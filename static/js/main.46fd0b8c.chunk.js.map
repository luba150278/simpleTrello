{"version":3,"sources":["store/types/boards.ts","common/Context.ts","common/constans/api.ts","api/request.ts","common/constans/messages.ts","store/actions/boards.ts","store/types/lists.ts","store/actions/lists.ts","store/types/changeItem.ts","store/actions/itemEdit.ts","store/actions/itemDelete.ts","store/actions/itemAdd.ts","store/actions/index.ts","hooks/useActions.ts","hooks/useTypeSelector.ts","components/Alert.tsx","components/InputBlock.tsx","functions/callAlert.ts","functions/validTitles.ts","pages/Home/components/boards/boardCreate/BoardCreate.tsx","pages/Modal/Modal.tsx","pages/Modal/ModalPopup.styles.ts","pages/Modal/ModalWrapper.tsx","pages/Board/components/DeleteBoard/DeleteBoard.tsx","pages/Board/components/BoardHeader/components/BoardTitle.tsx","pages/Board/components/BoardHeader/BoardHeader.tsx","pages/Board/components/Lists/components/Card/DeleteCard/DeleteCard.tsx","pages/Board/components/Lists/components/Card/Card.tsx","pages/Board/components/Lists/components/List/AddList/AddList.tsx","pages/Board/components/Lists/components/List/ListsMain/ListMain.tsx","pages/Board/components/Lists/components/List/DeleteList/DeleteList.tsx","pages/Board/components/Lists/components/Card/AddCard/AddCard.tsx","pages/Board/components/Lists/components/AddCardField/AddCardField.tsx","pages/Board/components/Lists/components/List/ListTitle/ListTitle.tsx","pages/Board/components/Lists/components/List/ListInner/ListInner.tsx","pages/Board/components/Lists/Lists.tsx","pages/Board/Board.tsx","functions/cardColorGenerator.ts","pages/Home/components/boards/Boards.tsx","pages/Home/Home.tsx","App.tsx","store/reducers/boardsReducer.ts","store/reducers/listsReducer.ts","store/reducers/itemChangeReducer.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["BoardsActionTypes","MyContext","React","createContext","boardID","baseURL","process","board","instance","axios","create","api","headers","Authorization","DANGER_NAME","ERROR_ITEM_ADD","ADD_BOARD","ListsActionTypes","fetchBoards","dispatch","a","type","FETCH_BOARDS","get","config","response","FETCH_BOARDS_SUCCESS","payload","data","FETCH_BOARDS_ERROR","ChangeItemActionTypes","fetchLists","id","FETCH_LISTS","FETCH_LISTS_SUCCESS","FETCH_LISTS_ERROR","editItem","newData","urlEdit","put","CHANGE_ITEM_SUCCESS","CHANGE_ITEM_ERROR","deleteItem","url","delete","addItem","newItem","post","res","result","BoardsActionCreators","ListsActionCreators","ItemEditActionCreators","ItemDeleteActionCreators","ItemAddActionCreators","useActions","useDispatch","bindActionCreators","ActionCreators","useTypeSelector","useSelector","Alert","alertState","isShow","className","isDanger","role","text","InputBlock","inputData","cln","onChange","changeHandler","onKeyPress","onKeyUp","onBlur","value","title","placeholder","ph","clni","ref","callAlert","isValidTitle","match","BoardCreate","startTitle","useState","setTitle","setAlertState","newBoard","addFunction","toString","setTimeout","onClckHandler","event","target","key","onClick","Modal","onBackDropClick","children","ReactDOM","createPortal","e","stopPropagation","document","getElementById","ModalContainer","styled","div","DesktopModalContainer","Header","h3","Close","BaseModalWrapper","isModalVisible","Provider","DeleteBoard","history","useHistory","Consumer","push","InputTitle","inputEl","useRef","editTitle","BoardHeader","to","DeleteCard","Card","card","listID","isAlert","setAlert","list_id","update","AddList","maxListPos","newList","position","ListMain","arrLenght","lists","DeleteList","AddCard","newCard","AddCardField","list","maxCardPos","isCardAddVisible","setCardAddVisible","wasVisible","ListTitle","newPos","ListInner","cards","length","Lists","getLists","arr","Object","keys","sort","b","Number","map","i","idCard","Board","setModalVisible","params","state","error","loading","useEffect","abortController","AbortController","abort","Spinner","color","ModalWrapper","wasModalVisible","colorGenerator","min","max","colors","Array","Math","floor","random","getRandomFloat","Boards","boards","getBoards","style","background","Main","toggleModal","App","component","Home","path","exact","initialState","users","changeState","rootReducer","combineReducers","action","changeItem","store","createStore","composeWithDevTools","applyMiddleware","thunk","render"],"mappings":"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","file":"static/js/main.46fd0b8c.chunk.js","sourcesContent":["import { IBoards } from '../../interfaces/inrefaces';\r\n\r\nexport interface BoardsState {\r\n  getBoards: IBoards;\r\n  loading: boolean;\r\n  error: boolean | string;\r\n}\r\nexport enum BoardsActionTypes {\r\n  FETCH_BOARDS = 'FETCH_BOARDS',\r\n  FETCH_BOARDS_SUCCESS = 'FETCH_BOARDS_SUCCESS',\r\n  FETCH_BOARDS_ERROR = 'FETCH_BOARDS_ERROR',\r\n}\r\n\r\ninterface FetchBoardsAction {\r\n  type: BoardsActionTypes.FETCH_BOARDS;\r\n}\r\ninterface FetchBoardsSuccessAction {\r\n  type: BoardsActionTypes.FETCH_BOARDS_SUCCESS;\r\n  payload: IBoards;\r\n}\r\ninterface FetchBoardsErrorAction {\r\n  type: BoardsActionTypes.FETCH_BOARDS_ERROR;\r\n  payload: string;\r\n}\r\nexport type BoardsAction = FetchBoardsAction | FetchBoardsSuccessAction | FetchBoardsErrorAction;\r\n","import React from 'react';\r\n\r\nconst MyContext = React.createContext({\r\n  boardID: '',\r\n});\r\n\r\nexport default MyContext;\r\n","export default {\r\n  baseURL: process.env.REACT_APP_API_URL || '',\r\n  board: 'board',\r\n};\r\n","import axios from 'axios';\r\nimport { api } from '../common/constans';\r\n\r\nconst instance = axios.create({\r\n  baseURL: api.baseURL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    Authorization: 'Bearer 123', // к этому мы ещё вернёмся как-нибудь потом\r\n  },\r\n});\r\n\r\n// instance.interceptors.response.use((res) => res.data);\r\n\r\nexport default instance;\r\n","export const DANGER_NAME =\r\n  'The value is empty or contains errors. Allowed characters: letters, numbers, spaces, dashes, dots, underscores.';\r\nexport const SUCCESS_BOARD_NAME = 'New board was created successfully!';\r\nexport const SUCCESS_BOARD_NAME_EDIT = 'The board title was edited successfully!';\r\nexport const SUCCESS_LIST_NAME = 'New list was created successfully!';\r\nexport const SUCCESS_LIST_NAME_EDIT = 'The list title was edited successfully!';\r\nexport const ERROR_BOARDS_LOAD = \"Error. The boards data didn't load\";\r\nexport const ERROR_ITEM_ADD = \"Error. The item didn't add on the server. Please, check name of item\";\r\nexport const ERROR_ITEM_DELETE = \"Error. The item didn't delete on the server.\";\r\nexport const ERROR_ITEM_EDIT = \"Error. The item title didn't change\";\r\nexport const ERROR_LISTS_LOAD = \"Error. The lists data didn't load from server\";\r\nexport const ANY_BOARD_YET = 'Any board yet. Create your first board!';\r\nexport const ADD_BOARD = 'Add a board';\r\nexport const ADD_CARD = 'Add a card';\r\nexport const ADD_LIST = 'Add a list';\r\nexport const BOARDS = 'Boards';\r\nexport const HOME_PAGE_DESC = 'This is a training React-project. An analogue of the \"Trello\" service.';\r\nexport const ADD_BOARD_TITLE = 'Add new board';\r\nexport const ANY_LIST_YET = 'Any list yet. Create your first list!';\r\nexport const LIST_NUMBER = 'The lists number:';\r\nexport const TASKS_NUMBER = 'The tasks number on the list:';\r\n","/* eslint-disable no-console */\r\nimport { Dispatch } from 'redux';\r\nimport api from '../../api/request';\r\nimport config from '../../common/constans/api';\r\nimport { ERROR_BOARDS_LOAD } from '../../common/constans/messages';\r\nimport { BoardsAction, BoardsActionTypes } from '../types/boards';\r\n\r\n// const url = `${api.baseURL}/board`;\r\nexport const fetchBoards = () => async (dispatch: Dispatch<BoardsAction>): Promise<void> => {\r\n  try {\r\n    dispatch({ type: BoardsActionTypes.FETCH_BOARDS });\r\n    const response = await api.get(config.board);\r\n    dispatch({ type: BoardsActionTypes.FETCH_BOARDS_SUCCESS, payload: response.data });\r\n  } catch (e) {\r\n    dispatch({ type: BoardsActionTypes.FETCH_BOARDS_ERROR, payload: ERROR_BOARDS_LOAD });\r\n  }\r\n};\r\n","import { ILists } from '../../interfaces/inrefaces';\r\n\r\nexport interface ListsState {\r\n  getLists: ILists;\r\n  loading: boolean;\r\n  error: null | string;\r\n}\r\nexport enum ListsActionTypes {\r\n  FETCH_LISTS = 'FETCH_LISTS',\r\n  FETCH_LISTS_SUCCESS = 'FETCH_LISTS_SUCCESS',\r\n  FETCH_LISTS_ERROR = 'FETCH_LISTS_ERROR',\r\n}\r\n\r\ninterface FetchListsAction {\r\n  type: ListsActionTypes.FETCH_LISTS;\r\n}\r\ninterface FetchListsSuccessAction {\r\n  type: ListsActionTypes.FETCH_LISTS_SUCCESS;\r\n  payload: ILists;\r\n}\r\ninterface FetchListsErrorAction {\r\n  type: ListsActionTypes.FETCH_LISTS_ERROR;\r\n  payload: string;\r\n}\r\nexport type ListsAction = FetchListsAction | FetchListsSuccessAction | FetchListsErrorAction;\r\n","/* eslint-disable no-console */\r\nimport { Dispatch } from 'redux';\r\nimport api from '../../api/request';\r\nimport config from '../../common/constans/api';\r\nimport { ERROR_LISTS_LOAD } from '../../common/constans/messages';\r\nimport { ListsAction, ListsActionTypes } from '../types/lists';\r\n\r\nexport const fetchLists = (id: string) => async (dispatch: Dispatch<ListsAction>): Promise<void> => {\r\n  // const url = `${api.baseURL}/board/${id}`;\r\n  try {\r\n    dispatch({ type: ListsActionTypes.FETCH_LISTS });\r\n    const response = await api.get(`${config.board}/${id}`);\r\n    dispatch({ type: ListsActionTypes.FETCH_LISTS_SUCCESS, payload: response.data });\r\n  } catch (e) {\r\n    dispatch({ type: ListsActionTypes.FETCH_LISTS_ERROR, payload: ERROR_LISTS_LOAD });\r\n  }\r\n};\r\n","export enum ChangeItemActionTypes {\r\n  CHANGE_ITEM = 'CHANGE_ITEM',\r\n  CHANGE_ITEM_SUCCESS = 'CHANGE_ITEM_SUCCESS',\r\n  CHANGE_ITEM_ERROR = 'CHANGE_ITEM_ERROR',\r\n}\r\n\r\nexport interface ChangeItemState {\r\n  changeState: boolean;\r\n  error: null | string;\r\n}\r\n\r\ninterface ChangeItemAction {\r\n  type: ChangeItemActionTypes.CHANGE_ITEM;\r\n  payload: boolean;\r\n}\r\ninterface ChangeItemSuccessAction {\r\n  type: ChangeItemActionTypes.CHANGE_ITEM_SUCCESS;\r\n  payload: boolean;\r\n}\r\ninterface ChangeItemErrorAction {\r\n  type: ChangeItemActionTypes.CHANGE_ITEM_ERROR;\r\n  payload: string;\r\n}\r\nexport type ChangeItemActions = ChangeItemAction | ChangeItemSuccessAction | ChangeItemErrorAction;\r\n","/* eslint-disable no-console */\r\nimport { Dispatch } from 'redux';\r\nimport api from '../../api/request';\r\nimport config from '../../common/constans/api';\r\nimport { ERROR_ITEM_EDIT } from '../../common/constans/messages';\r\nimport { ChangeItemActions, ChangeItemActionTypes } from '../types/changeItem';\r\n\r\ntype Card = {\r\n  position: number;\r\n  title: string;\r\n  list_id: number;\r\n};\r\n\r\ntype Board = {\r\n  title: string;\r\n};\r\n\r\ntype List = {\r\n  position: number;\r\n  title: string;\r\n};\r\n\r\nexport const editItem = (newData: Card | Board | List, urlEdit: string) => async (\r\n  dispatch: Dispatch<ChangeItemActions>\r\n): Promise<void> => {\r\n  try {\r\n    // dispatch({ type: ChangeItemActionTypes.CHANGE_ITEM, payload: false });\r\n    await api.put(`${config.board}/${urlEdit}`, newData);\r\n    dispatch({ type: ChangeItemActionTypes.CHANGE_ITEM_SUCCESS, payload: true });\r\n  } catch (e) {\r\n    dispatch({ type: ChangeItemActionTypes.CHANGE_ITEM_ERROR, payload: ERROR_ITEM_EDIT });\r\n  }\r\n};\r\n","/* eslint-disable no-console */\r\nimport { Dispatch } from 'redux';\r\nimport api from '../../api/request';\r\nimport config from '../../common/constans/api';\r\nimport { ERROR_ITEM_DELETE } from '../../common/constans/messages';\r\nimport { ChangeItemActions, ChangeItemActionTypes } from '../types/changeItem';\r\n\r\nexport const deleteItem = (url: string) => async (dispatch: Dispatch<ChangeItemActions>): Promise<void> => {\r\n  try {\r\n    // dispatch({ type: ChangeItemActionTypes.CHANGE_ITEM, payload: false });\r\n    await api.delete(`${config.board}/${url}`);\r\n\r\n    dispatch({ type: ChangeItemActionTypes.CHANGE_ITEM_SUCCESS, payload: true });\r\n  } catch (e) {\r\n    dispatch({ type: ChangeItemActionTypes.CHANGE_ITEM_ERROR, payload: ERROR_ITEM_DELETE });\r\n  }\r\n};\r\n","/* eslint-disable no-console */\r\nimport { Dispatch } from 'redux';\r\nimport api from '../../api/request';\r\nimport config from '../../common/constans/api';\r\nimport { ERROR_ITEM_ADD } from '../../common/constans/messages';\r\nimport { ChangeItemActions, ChangeItemActionTypes } from '../types/changeItem';\r\n\r\ntype Card = {\r\n  title: string;\r\n  list_id: number;\r\n  position: number;\r\n};\r\n\r\ntype Board = {\r\n  title: string;\r\n};\r\n\r\ntype List = {\r\n  title: string;\r\n  position: number;\r\n};\r\n\r\nexport const addItem = (url: string, newItem: Card | Board | List) => async (\r\n  dispatch: Dispatch<ChangeItemActions>\r\n): Promise<string> => {\r\n  try {\r\n    const res = await api.post(`${config.board}/${url}`, newItem);\r\n    dispatch({ type: ChangeItemActionTypes.CHANGE_ITEM_SUCCESS, payload: true });\r\n    return res.data.result;\r\n  } catch (e) {\r\n    dispatch({ type: ChangeItemActionTypes.CHANGE_ITEM_ERROR, payload: ERROR_ITEM_ADD });\r\n    return ERROR_ITEM_ADD;\r\n  }\r\n};\r\n","import * as BoardsActionCreators from './boards';\r\nimport * as ListsActionCreators from './lists';\r\nimport * as ItemEditActionCreators from './itemEdit';\r\nimport * as ItemDeleteActionCreators from './itemDelete';\r\nimport * as ItemAddActionCreators from './itemAdd';\r\n\r\nexport default {\r\n  ...BoardsActionCreators,\r\n  ...ListsActionCreators,\r\n  ...ItemEditActionCreators,\r\n  ...ItemDeleteActionCreators,\r\n  ...ItemAddActionCreators,\r\n};\r\n","/* eslint-disable @typescript-eslint/explicit-function-return-type */\r\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\nimport { useDispatch } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport ActionCreators from '../store/actions';\r\n\r\nexport const useActions = () => {\r\n  const dispatch = useDispatch();\r\n  return bindActionCreators(ActionCreators, dispatch);\r\n};\r\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\r\nimport { RootState } from '../store/reducers';\r\n\r\nexport const useTypeSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import React from 'react';\r\nimport { IAlert } from '../interfaces/inrefaces';\r\n\r\ntype Props = {\r\n  alertState: IAlert;\r\n};\r\nexport const Alert: React.FC<Props> = ({ alertState }) =>\r\n  alertState.isShow ? (\r\n    <div className={alertState.isDanger ? 'alert alert-danger' : 'alert alert-success'} role=\"alert\">\r\n      {alertState.text}\r\n    </div>\r\n  ) : (\r\n    <></>\r\n  );\r\n","import React from 'react';\r\nimport { IAlert, IInput } from '../interfaces/inrefaces';\r\nimport { Alert } from './Alert';\r\n\r\ntype Props = {\r\n  alertState: IAlert;\r\n  inputData: IInput;\r\n};\r\nconst InputBlock: React.FC<Props> = ({ alertState, inputData }) => (\r\n  <div className={inputData.cln}>\r\n    <Alert alertState={alertState} />\r\n    <input\r\n      onChange={inputData.changeHandler}\r\n      onKeyPress={inputData.onKeyPress}\r\n      onKeyUp={inputData.onKeyUp}\r\n      onBlur={inputData.onBlur}\r\n      value={inputData.title}\r\n      type=\"text\"\r\n      id=\"title\"\r\n      placeholder={inputData.ph}\r\n      className={inputData.clni}\r\n      ref={inputData.ref}\r\n    />\r\n  </div>\r\n);\r\n\r\nexport default InputBlock;\r\n","import { IAlert } from '../interfaces/inrefaces';\r\n\r\nexport function callAlert(isShow: boolean, isDanger: boolean, text: string): IAlert {\r\n  return { isShow, isDanger, text };\r\n}\r\n","export function isValidTitle(title: string): boolean {\r\n  if (title.match(/^[\\d\\p{L} .,_-]+$/u) === null) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n","/* eslint-disable no-console */\r\nimport React, { useState } from 'react';\r\nimport { ADD_BOARD, DANGER_NAME, SUCCESS_BOARD_NAME } from '../../../../../common/constans/messages';\r\nimport InputBlock from '../../../../../components/InputBlock';\r\nimport { callAlert } from '../../../../../functions/callAlert';\r\nimport { isValidTitle } from '../../../../../functions/validTitles';\r\nimport { useActions } from '../../../../../hooks/useActions';\r\nimport { IAlert, IInput } from '../../../../../interfaces/inrefaces';\r\nimport './boardCreate.css';\r\n\r\ntype ITitle = {\r\n  title: string;\r\n};\r\n\r\ntype IProps = {\r\n  startTitle: string;\r\n};\r\n\r\nconst BoardCreate: React.FC<IProps> = ({ startTitle }) => {\r\n  const [title, setTitle] = useState<string>(startTitle);\r\n  const startAlert: IAlert = { isShow: false, isDanger: false, text: '' };\r\n  const [alertState, setAlertState] = useState<IAlert>(startAlert);\r\n  const newBoard: ITitle = { title };\r\n  const changeHandler = (event: React.ChangeEvent<HTMLInputElement>): void => setTitle(event.target.value);\r\n  const { addItem, fetchBoards } = useActions();\r\n\r\n  const addFunction = async (): Promise<void> => {\r\n    if (isValidTitle(title)) {\r\n      const res = await addItem('', newBoard);\r\n      if (res.toString() === 'Created') {\r\n        setAlertState(callAlert(true, false, SUCCESS_BOARD_NAME));\r\n        await fetchBoards();\r\n      } else {\r\n        setAlertState(callAlert(true, true, res.toString()));\r\n      }\r\n    } else {\r\n      setAlertState(callAlert(true, true, DANGER_NAME));\r\n    }\r\n    setTimeout(() => {\r\n      setTitle('');\r\n      setAlertState(callAlert(false, false, ''));\r\n    }, 5000);\r\n  };\r\n  const onClckHandler = async (): Promise<void> => {\r\n    addFunction();\r\n  };\r\n\r\n  const keyPressHandler = (event: React.KeyboardEvent): void => {\r\n    if (event.key === 'Enter') {\r\n      addFunction();\r\n    }\r\n  };\r\n\r\n  const keyUpHandler = (): void => {\r\n    ('');\r\n  };\r\n\r\n  const blurHandler = (): void => {\r\n    ('');\r\n  };\r\n\r\n  const inputData: IInput = {\r\n    title,\r\n    ph: 'Enter board name',\r\n    changeHandler,\r\n    onKeyPress: keyPressHandler,\r\n    onKeyUp: keyUpHandler,\r\n    onBlur: blurHandler,\r\n    cln: 'fields mb-4',\r\n    clni: 'inputName',\r\n    ref: null,\r\n  };\r\n  return (\r\n    <div className=\"main-container\">\r\n      <InputBlock alertState={alertState} inputData={inputData} />\r\n\r\n      <button className=\"btn btn-success mr-2 btn-new-board\" onClick={onClckHandler}>\r\n        {ADD_BOARD}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BoardCreate;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './modal.css';\r\n\r\ninterface ModalProps {\r\n  onBackDropClick: () => void;\r\n}\r\n\r\nconst Modal: React.FC<ModalProps> = ({ onBackDropClick, children }) =>\r\n  ReactDOM.createPortal(\r\n    <div className=\"overlay\" onClick={onBackDropClick}>\r\n      <div onClick={(e): void => e.stopPropagation()}>{children}</div>\r\n    </div>,\r\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n    document.getElementById('modal-root')!\r\n  );\r\n\r\nexport default Modal;\r\n","import styled from 'styled-components';\r\n\r\nconst ModalContainer = styled.div`\r\n  background-color: #ffffff;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  position: relative;\r\n`;\r\nexport const DesktopModalContainer = styled(ModalContainer)`\r\n  border-radius: 7px;\r\n  box-shadow: 0 0 32px rgba(0, 0, 0, 0.5);\r\n  padding: 40px;\r\n  width: 450px;\r\n  font-size: 26px;\r\n  @media screen and (max-width: 480px) {\r\n    width: 100%;\r\n  } ;\r\n`;\r\nexport const Header = styled.h3`\r\n  color: #25306c;\r\n  font-size: 35px;\r\n  line-height: 1em;\r\n  font-weight: bold;\r\n  margin: 5px 0 10px;\r\n  text-align: center;\r\n`;\r\n\r\nexport const Close = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 80%;\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n  .close-icon {\r\n    color: rgb(128, 127, 127);\r\n    height: 1rem;\r\n    &:hover {\r\n      color: #bb2a81;\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { IconContext } from 'react-icons';\r\nimport { FaTimes } from 'react-icons/fa';\r\nimport { ADD_BOARD_TITLE } from '../../common/constans/messages';\r\nimport BoardCreate from '../Home/components/boards/boardCreate/BoardCreate';\r\nimport Modal from './Modal';\r\nimport { Close, DesktopModalContainer, Header } from './ModalPopup.styles';\r\n\r\ninterface BaseModalWrapperProps {\r\n  isModalVisible: boolean;\r\n  onBackDropClick: () => void;\r\n  startTitle: string;\r\n}\r\n\r\nconst BaseModalWrapper: React.FC<BaseModalWrapperProps> = ({ isModalVisible, onBackDropClick, startTitle }) => {\r\n  if (!isModalVisible) {\r\n    return null;\r\n  }\r\n  return (\r\n    <Modal onBackDropClick={onBackDropClick}>\r\n      <DesktopModalContainer>\r\n        <Close>\r\n          <IconContext.Provider value={{ className: 'close-icon' }}>\r\n            <FaTimes onClick={(): void => onBackDropClick()} />\r\n          </IconContext.Provider>\r\n        </Close>\r\n        <Header>{ADD_BOARD_TITLE}</Header>\r\n        <BoardCreate startTitle={startTitle} />\r\n      </DesktopModalContainer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default BaseModalWrapper;\r\n","import React from 'react';\r\nimport { FaTrashAlt } from 'react-icons/fa';\r\nimport { IconContext } from 'react-icons/lib';\r\nimport { useHistory } from 'react-router-dom';\r\nimport MyContext from '../../../../common/Context';\r\nimport { useActions } from '../../../../hooks/useActions';\r\n\r\nconst DeleteBoard: React.FC = () => {\r\n  const history = useHistory();\r\n  const { deleteItem } = useActions();\r\n  return (\r\n    <MyContext.Consumer>\r\n      {({ boardID }): JSX.Element => (\r\n        <IconContext.Provider value={{ className: 'trash-list deleteBoard' }}>\r\n          <FaTrashAlt\r\n            onClick={async (): Promise<void> => {\r\n              await deleteItem(boardID);\r\n              history.push('/');\r\n            }}\r\n          />\r\n        </IconContext.Provider>\r\n      )}\r\n    </MyContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default DeleteBoard;\r\n","import React, { useRef, useState } from 'react';\r\nimport { DANGER_NAME } from '../../../../../common/constans/messages';\r\nimport MyContext from '../../../../../common/Context';\r\nimport InputBlock from '../../../../../components/InputBlock';\r\nimport { callAlert } from '../../../../../functions/callAlert';\r\nimport { isValidTitle } from '../../../../../functions/validTitles';\r\nimport { useActions } from '../../../../../hooks/useActions';\r\nimport { IAlert, IInput } from '../../../../../interfaces/inrefaces';\r\nimport DeleteBoard from '../../DeleteBoard/DeleteBoard';\r\n\r\ntype IData = {\r\n  startTitle: string;\r\n};\r\n\r\ntype ITitle = {\r\n  title: string;\r\n};\r\n\r\nconst InputTitle: React.FC<IData> = ({ startTitle }) => {\r\n  const inputEl = useRef<HTMLInputElement>(null);\r\n  const [title, setTitle] = useState<string>(startTitle);\r\n  const startAlert: IAlert = { isShow: false, isDanger: false, text: '' };\r\n  const [alertState, setAlertState] = useState<IAlert>(startAlert);\r\n  const { editItem, fetchLists } = useActions();\r\n\r\n  return (\r\n    <MyContext.Consumer>\r\n      {({ boardID }): JSX.Element => {\r\n        const changeHandler = (event: React.ChangeEvent<HTMLInputElement>): void => setTitle(event.target.value);\r\n        const newData: ITitle = { title };\r\n\r\n        function editTitle(): void {\r\n          if (isValidTitle(title)) {\r\n            editItem(newData, boardID);\r\n          } else {\r\n            setAlertState(callAlert(true, true, DANGER_NAME));\r\n            setTimeout(() => {\r\n              setTitle(startTitle);\r\n              setAlertState(callAlert(false, false, ''));\r\n            }, 3000);\r\n          }\r\n        }\r\n        const keyPressHandler = (event: React.KeyboardEvent): void => {\r\n          if (event.key === 'Enter') {\r\n            editTitle();\r\n            fetchLists(boardID);\r\n          }\r\n        };\r\n\r\n        const keyUpHandler = (): void => {\r\n          editTitle();\r\n        };\r\n\r\n        const blurHandler = (): void => {\r\n          if (startTitle !== title) {\r\n            editTitle();\r\n            fetchLists(boardID);\r\n          }\r\n        };\r\n        const inputData: IInput = {\r\n          title,\r\n          ph: title,\r\n          changeHandler,\r\n          onKeyPress: keyPressHandler,\r\n          onKeyUp: keyUpHandler,\r\n          onBlur: blurHandler,\r\n          cln: 'input-row',\r\n          clni: 'h1',\r\n          ref: inputEl,\r\n        };\r\n        return (\r\n          <div className=\"card board-header-title mt-4 py-2\">\r\n            <InputBlock alertState={alertState} inputData={inputData} />\r\n            <DeleteBoard />\r\n          </div>\r\n        );\r\n      }}\r\n    </MyContext.Consumer>\r\n  );\r\n};\r\nexport default InputTitle;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport InputTitle from './components/BoardTitle';\r\n\r\ntype IData = {\r\n  startTitle: string;\r\n};\r\n\r\nconst BoardHeader: React.FC<IData> = ({ startTitle }) => (\r\n  <div className=\"board-header container my-4\">\r\n    <Link to=\"/\">Home</Link>\r\n    <InputTitle startTitle={startTitle} />\r\n  </div>\r\n);\r\n\r\nexport default BoardHeader;\r\n","/* eslint-disable no-console */\r\nimport React from 'react';\r\nimport { IconContext } from 'react-icons';\r\nimport { FaTrashAlt } from 'react-icons/fa';\r\nimport MyContext from '../../../../../../../common/Context';\r\nimport { useActions } from '../../../../../../../hooks/useActions';\r\n\r\ntype Props = {\r\n  id: number;\r\n};\r\n\r\nconst DeleteCard: React.FC<Props> = ({ id }) => {\r\n  const { fetchLists, deleteItem } = useActions();\r\n  return (\r\n    <MyContext.Consumer>\r\n      {({ boardID }): JSX.Element => (\r\n        <div className=\"icon__inner mr-4 my-2\">\r\n          <IconContext.Provider value={{ className: 'trash-list' }}>\r\n            <FaTrashAlt\r\n              onClick={async (): Promise<void> => {\r\n                await deleteItem(`${boardID}/card/${id}`);\r\n                await fetchLists(boardID);\r\n              }}\r\n            />\r\n          </IconContext.Provider>\r\n        </div>\r\n      )}\r\n    </MyContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default DeleteCard;\r\n","/* eslint-disable no-console */\r\nimport React, { useRef, useState } from 'react';\r\nimport { DANGER_NAME } from '../../../../../../common/constans/messages';\r\nimport MyContext from '../../../../../../common/Context';\r\nimport InputBlock from '../../../../../../components/InputBlock';\r\nimport { isValidTitle } from '../../../../../../functions/validTitles';\r\nimport { useActions } from '../../../../../../hooks/useActions';\r\nimport { IAlert, ICard, IInput } from '../../../../../../interfaces/inrefaces';\r\nimport DeleteCard from './DeleteCard/DeleteCard';\r\n\r\ntype Props = {\r\n  card: ICard;\r\n  listID: number;\r\n};\r\ntype Data = {\r\n  title: string;\r\n  list_id: number;\r\n};\r\n\r\nconst Card: React.FC<Props> = ({ card, listID }) => {\r\n  const inputEl = useRef<HTMLInputElement>(null);\r\n  const [title, setTitle] = useState<string>(card.title);\r\n  const [isAlert, setAlert] = useState<boolean>(false);\r\n  const { editItem, fetchLists } = useActions();\r\n\r\n  return (\r\n    <MyContext.Consumer>\r\n      {({ boardID }): JSX.Element => {\r\n        const changeHandler = (event: React.ChangeEvent<HTMLInputElement>): void => setTitle(event.target.value);\r\n        const newData: Data = { list_id: listID, title };\r\n\r\n        function callAlert(): void {\r\n          setAlert(true);\r\n          setTimeout(() => {\r\n            setTitle(card.title);\r\n            setAlert(false);\r\n          }, 3000);\r\n        }\r\n\r\n        function editTitle(update: boolean): void {\r\n          if (isValidTitle(title)) {\r\n            editItem(newData, `${boardID}/card/${card.id}`);\r\n            if (update) {\r\n              fetchLists(boardID);\r\n            }\r\n          } else {\r\n            callAlert();\r\n          }\r\n        }\r\n        const keyPressHandler = (event: React.KeyboardEvent): void => {\r\n          if (event.key === 'Enter') {\r\n            editTitle(true);\r\n          }\r\n        };\r\n\r\n        const keyUpHandler = (): void => {\r\n          editTitle(false);\r\n        };\r\n\r\n        const blurHandler = (): void => {\r\n          if (card.title !== title) {\r\n            editTitle(true);\r\n          }\r\n        };\r\n        const alertState: IAlert = { isShow: isAlert, isDanger: true, text: DANGER_NAME };\r\n        const inputData: IInput = {\r\n          title,\r\n          ph: card.title,\r\n          changeHandler,\r\n          onKeyPress: keyPressHandler,\r\n          onKeyUp: keyUpHandler,\r\n          onBlur: blurHandler,\r\n          cln: 'card__inner',\r\n          clni: 'listTitle',\r\n          ref: inputEl,\r\n        };\r\n        return (\r\n          <li className=\"card list-item\" id={card.id.toString()}>\r\n            <DeleteCard id={card.id} />\r\n            <InputBlock alertState={alertState} inputData={inputData} />\r\n          </li>\r\n        );\r\n      }}\r\n    </MyContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","/* eslint-disable no-console */\r\nimport React, { useState } from 'react';\r\nimport { ADD_LIST, DANGER_NAME } from '../../../../../../../common/constans/messages';\r\nimport MyContext from '../../../../../../../common/Context';\r\nimport { Alert } from '../../../../../../../components/Alert';\r\nimport { isValidTitle } from '../../../../../../../functions/validTitles';\r\nimport { useActions } from '../../../../../../../hooks/useActions';\r\nimport { IAlert } from '../../../../../../../interfaces/inrefaces';\r\nimport './addList.css';\r\n\r\ntype Props = {\r\n  maxListPos: number;\r\n};\r\n\r\nconst AddList: React.FC<Props> = ({ maxListPos }) => {\r\n  const [title, setTitle] = useState<string>('');\r\n  const [isAlert, setAlert] = useState<boolean>(false);\r\n  const changeHandler = (event: React.ChangeEvent<HTMLInputElement>): void => setTitle(event.target.value);\r\n  const { addItem, fetchLists } = useActions();\r\n  return (\r\n    <MyContext.Consumer>\r\n      {({ boardID }): JSX.Element => {\r\n        function callAlert(): void {\r\n          setAlert(true);\r\n          setTimeout(() => {\r\n            setTitle('');\r\n            setAlert(false);\r\n          }, 3000);\r\n        }\r\n        async function clickHandler(): Promise<void> {\r\n          if (isValidTitle(title)) {\r\n            const newList = { title, position: maxListPos + 1 };\r\n            await addItem(`${boardID}/list`, newList);\r\n            await fetchLists(boardID);\r\n          } else {\r\n            callAlert();\r\n          }\r\n        }\r\n        const alertState: IAlert = { isShow: isAlert, isDanger: true, text: DANGER_NAME };\r\n        return (\r\n          <div className=\"list-input-outside\">\r\n            <Alert alertState={alertState} />\r\n            <div className=\"list-input mt-2\">\r\n              <input type=\"text\" id=\"addList\" placeholder=\"Enter list name\" onChange={changeHandler} value={title} />\r\n              <button className=\"btn btn-primary ml-2\" onClick={clickHandler}>\r\n                {ADD_LIST}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        );\r\n      }}\r\n    </MyContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default AddList;\r\n","import React from 'react';\r\nimport { LIST_NUMBER } from '../../../../../../../common/constans/messages';\r\nimport AddList from '../AddList/AddList';\r\n\r\ntype Props = {\r\n  arrLenght: number;\r\n  maxListPos: number;\r\n  lists: JSX.Element | JSX.Element[];\r\n};\r\nconst ListMain: React.FC<Props> = ({ arrLenght, maxListPos, lists }) => (\r\n  <div className=\"lists-main container\">\r\n    <div className=\"input-row mb-4\">\r\n      <AddList maxListPos={maxListPos} />\r\n      <div className=\"count-lists\">\r\n        {LIST_NUMBER} {arrLenght}\r\n      </div>\r\n    </div>\r\n    <div className=\"cards\">{lists}</div>\r\n  </div>\r\n);\r\n\r\nexport default ListMain;\r\n","/* eslint-disable no-console */\r\nimport React from 'react';\r\nimport { IconContext } from 'react-icons';\r\nimport { FaTrashAlt } from 'react-icons/fa';\r\nimport MyContext from '../../../../../../../common/Context';\r\nimport { useActions } from '../../../../../../../hooks/useActions';\r\n\r\ntype Props = {\r\n  id: string;\r\n};\r\n\r\nconst DeleteList: React.FC<Props> = ({ id }) => {\r\n  const { fetchLists, deleteItem } = useActions();\r\n  return (\r\n    <MyContext.Consumer>\r\n      {({ boardID }): JSX.Element => (\r\n        <div className=\"icon__inner\">\r\n          <IconContext.Provider value={{ className: 'trash-list' }}>\r\n            <FaTrashAlt\r\n              onClick={async (): Promise<void> => {\r\n                await deleteItem(`${boardID}/list/${id}`);\r\n                await fetchLists(boardID);\r\n              }}\r\n            />\r\n          </IconContext.Provider>\r\n        </div>\r\n      )}\r\n    </MyContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default DeleteList;\r\n","/* eslint-disable no-console */\r\nimport React, { useState } from 'react';\r\nimport { ADD_CARD, DANGER_NAME } from '../../../../../../../common/constans/messages';\r\nimport MyContext from '../../../../../../../common/Context';\r\nimport { Alert } from '../../../../../../../components/Alert';\r\nimport { isValidTitle } from '../../../../../../../functions/validTitles';\r\nimport { useActions } from '../../../../../../../hooks/useActions';\r\nimport { IAlert } from '../../../../../../../interfaces/inrefaces';\r\nimport './addCard.css';\r\n\r\ntype Props = {\r\n  position: number;\r\n  list_id: number;\r\n};\r\n\r\nconst AddCard: React.FC<Props> = ({ position, list_id }) => {\r\n  const [title, setTitle] = useState<string>('');\r\n  const [isAlert, setAlert] = useState(false);\r\n  const { addItem, fetchLists } = useActions();\r\n  return (\r\n    <MyContext.Consumer>\r\n      {({ boardID }): JSX.Element => {\r\n        const changeHandler = (event: React.ChangeEvent<HTMLInputElement>): void => setTitle(event.target.value);\r\n        function callAlert(): void {\r\n          setAlert(true);\r\n          setTimeout(() => {\r\n            setTitle('');\r\n            setAlert(false);\r\n          }, 3000);\r\n        }\r\n        async function clickHandler(): Promise<void> {\r\n          if (isValidTitle(title)) {\r\n            const newCard = { title, list_id, position };\r\n            await addItem(`${boardID}/card`, newCard);\r\n            await fetchLists(boardID);\r\n          } else {\r\n            callAlert();\r\n          }\r\n        }\r\n        const alertState: IAlert = { isShow: isAlert, isDanger: true, text: DANGER_NAME };\r\n        return (\r\n          <div className=\"card-input-outside\">\r\n            <Alert alertState={alertState} />\r\n            <div className=\"card-input mt-2\">\r\n              <input\r\n                className=\"card-title\"\r\n                type=\"text\"\r\n                placeholder=\"Enter card title\"\r\n                onChange={changeHandler}\r\n                value={title}\r\n              />\r\n              <button className=\"btn btn-primary ml-2\" onClick={clickHandler}>\r\n                {ADD_CARD}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        );\r\n      }}\r\n    </MyContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default AddCard;\r\n","import React, { useState } from 'react';\r\nimport { FaPlus } from 'react-icons/fa';\r\nimport { IconContext } from 'react-icons/lib';\r\nimport { IList } from '../../../../../../interfaces/inrefaces';\r\nimport AddCard from '../Card/AddCard/AddCard';\r\n\r\nimport './addCardField.css';\r\n\r\ntype Props = {\r\n  list: IList;\r\n  maxCardPos: number;\r\n};\r\n\r\nconst AddCardField: React.FC<Props> = ({ list, maxCardPos }) => {\r\n  const [isCardAddVisible, setCardAddVisible] = useState(false);\r\n  const toggleCardAdd = (): void => {\r\n    setCardAddVisible((wasVisible) => !wasVisible);\r\n  };\r\n  return (\r\n    <div className=\"addCardInput\">\r\n      <div className=\"iconPlus__inner\">\r\n        <IconContext.Provider value={{ className: 'add-card' }}>\r\n          <FaPlus onClick={toggleCardAdd} />\r\n        </IconContext.Provider>\r\n      </div>\r\n      {isCardAddVisible ? <AddCard position={maxCardPos + 1} list_id={list.id} /> : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddCardField;\r\n","/* eslint-disable no-console */\r\nimport React, { useRef, useState } from 'react';\r\nimport { DANGER_NAME } from '../../../../../../../common/constans/messages';\r\nimport MyContext from '../../../../../../../common/Context';\r\nimport InputBlock from '../../../../../../../components/InputBlock';\r\nimport { isValidTitle } from '../../../../../../../functions/validTitles';\r\nimport { useActions } from '../../../../../../../hooks/useActions';\r\nimport { IAlert, IInput } from '../../../../../../../interfaces/inrefaces';\r\n\r\ntype Props = {\r\n  startTitle: string;\r\n  position: number;\r\n  id: string;\r\n};\r\n\r\ntype Data = {\r\n  position: number;\r\n  title: string;\r\n};\r\n\r\nconst ListTitle: React.FC<Props> = ({ startTitle, position, id }) => {\r\n  const [title, setTitle] = useState<string>(startTitle);\r\n  const [isAlert, setAlert] = useState<boolean>(false);\r\n  const inputEl = useRef<HTMLInputElement>(null);\r\n  const { editItem, fetchLists } = useActions();\r\n  return (\r\n    <MyContext.Consumer>\r\n      {({ boardID }): JSX.Element => {\r\n        const newPos: Data = { position, title };\r\n        const changeHandler = (event: React.ChangeEvent<HTMLInputElement>): void => setTitle(event.target.value);\r\n        function callAlert(): void {\r\n          setAlert(true);\r\n          setTimeout(() => {\r\n            setTitle(startTitle);\r\n            setAlert(false);\r\n          }, 3000);\r\n        }\r\n\r\n        function editTitle(update: boolean): void {\r\n          if (isValidTitle(title)) {\r\n            editItem(newPos, `${boardID}/list/${id}`); // /list/<id>\r\n\r\n            if (update) {\r\n              fetchLists(boardID);\r\n            }\r\n          } else {\r\n            callAlert();\r\n          }\r\n        }\r\n        const keyPressHandler = (event: React.KeyboardEvent): void => {\r\n          if (event.key === 'Enter') {\r\n            editTitle(true);\r\n          }\r\n        };\r\n\r\n        const keyUpHandler = (): void => {\r\n          editTitle(false);\r\n        };\r\n\r\n        const blurHandler = (): void => {\r\n          if (startTitle !== title) {\r\n            editTitle(true);\r\n          }\r\n        };\r\n        const alertState: IAlert = { isShow: isAlert, isDanger: true, text: DANGER_NAME };\r\n        const inputData: IInput = {\r\n          title,\r\n          ph: title,\r\n          changeHandler,\r\n          onKeyPress: keyPressHandler,\r\n          onKeyUp: keyUpHandler,\r\n          onBlur: blurHandler,\r\n          cln: 'listTitleMain',\r\n          clni: 'listTitle',\r\n          ref: inputEl,\r\n        };\r\n        return (\r\n          <div className=\"listTitleMain\">\r\n            <InputBlock alertState={alertState} inputData={inputData} />\r\n          </div>\r\n        );\r\n      }}\r\n    </MyContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default ListTitle;\r\n","/* eslint-disable no-console */\r\nimport React from 'react';\r\nimport { TASKS_NUMBER } from '../../../../../../../common/constans/messages';\r\nimport { IList } from '../../../../../../../interfaces/inrefaces';\r\nimport DeleteList from '../DeleteList/DeleteList';\r\nimport AddCardField from '../../AddCardField/AddCardField';\r\nimport ListTitle from '../ListTitle/ListTitle';\r\n\r\ntype Props = {\r\n  list: IList;\r\n  id: string;\r\n  cards: JSX.Element[];\r\n  maxCardPos: number;\r\n};\r\n\r\nconst ListInner: React.FC<Props> = ({ list, id, cards, maxCardPos }) => (\r\n  <div className=\"card list\" id={id}>\r\n    <DeleteList id={id} />\r\n    <p>\r\n      {TASKS_NUMBER} {cards.length}\r\n    </p>\r\n    <ListTitle startTitle={list.title} position={list.position} id={id} />\r\n\r\n    <ul className=\"list-items\">{cards}</ul>\r\n    <AddCardField list={list} maxCardPos={maxCardPos} />\r\n  </div>\r\n);\r\nexport default ListInner;\r\n","/* eslint-disable no-console */\r\nimport React from 'react';\r\nimport Card from './components/Card/Card';\r\nimport './lists.css';\r\nimport ListMain from './components/List/ListsMain/ListMain';\r\nimport ListInner from './components/List/ListInner/ListInner';\r\nimport { ILists } from '../../../../interfaces/inrefaces';\r\nimport { ANY_LIST_YET } from '../../../../common/constans/messages';\r\n\r\ntype Props = {\r\n  getLists: ILists;\r\n};\r\n\r\nconst Lists: React.FC<Props> = ({ getLists }) => {\r\n  const arr = Object.keys(getLists.lists).sort((a, b) => {\r\n    const first = getLists.lists[Number(a)].position;\r\n    const second = getLists.lists[Number(b)].position;\r\n    return first > second ? 1 : -1;\r\n  });\r\n\r\n  let maxCardPos = 0;\r\n  let maxListPos = 0;\r\n  const arrLenght = arr.length;\r\n  const lists =\r\n    arrLenght !== 0 ? (\r\n      arr.map((id, i) => {\r\n        const list = getLists.lists[Number(id)];\r\n        if (i === arrLenght - 1) maxListPos = list.position;\r\n        maxCardPos = 0;\r\n        const cds = Object.keys(list.cards).sort((a, b) => {\r\n          const first = list.cards[Number(a)].position;\r\n          const second = list.cards[Number(b)].position;\r\n          return first > second ? 1 : -1;\r\n        });\r\n        const cards = cds.map((idCard) => {\r\n          const card = list.cards[Number(idCard)];\r\n          maxCardPos = maxCardPos < card.position ? card.position : maxCardPos;\r\n          return <Card key={card.id} card={card} listID={Number(id)} />;\r\n        });\r\n        return <ListInner key={id} list={list} id={id} cards={cards} maxCardPos={maxCardPos} />;\r\n      })\r\n    ) : (\r\n      <h2>{ANY_LIST_YET}</h2>\r\n    );\r\n\r\n  return <ListMain arrLenght={arrLenght} maxListPos={maxListPos} lists={lists} />;\r\n};\r\n\r\nexport default Lists;\r\n","/* eslint-disable no-console */\r\nimport React, { useEffect, useState } from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport Spinner from 'reactstrap/es/Spinner';\r\nimport MyContext from '../../common/Context';\r\nimport { useActions } from '../../hooks/useActions';\r\nimport { useTypeSelector } from '../../hooks/useTypeSelector';\r\nimport ModalWrapper from '../Modal/ModalWrapper';\r\nimport './board.css';\r\nimport BoardHeader from './components/BoardHeader/BoardHeader';\r\nimport Lists from './components/Lists/Lists';\r\n\r\ntype TParams = { id: string };\r\n\r\nconst Board: React.FC<RouteComponentProps<TParams>> = ({ match }) => {\r\n  const [isModalVisible, setModalVisible] = useState(false);\r\n  const toggleModal = (): void => {\r\n    setModalVisible((wasModalVisible) => !wasModalVisible);\r\n  };\r\n  const boardID = match.params.id;\r\n  const { getLists, error, loading } = useTypeSelector((state) => state.lists);\r\n  const { fetchLists } = useActions();\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    fetchLists(boardID);\r\n    return (): void => {\r\n      abortController.abort();\r\n    };\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <Spinner color=\"success\" />;\r\n  }\r\n\r\n  if (error) {\r\n    return <h2>{error}</h2>;\r\n  }\r\n\r\n  const { title } = getLists;\r\n  return (\r\n    <>\r\n      <MyContext.Provider\r\n        value={{\r\n          boardID,\r\n        }}\r\n      >\r\n        <BoardHeader startTitle={title} />\r\n        <Lists getLists={getLists} />\r\n        <ModalWrapper isModalVisible={isModalVisible} onBackDropClick={toggleModal} startTitle=\"\" />\r\n      </MyContext.Provider>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","const LOWER_COLOR = 100;\r\nconst UPPER_COLOR = 255;\r\nconst LOWER_OPACITY = 0.3;\r\nconst UPPER_OPACITY = 0.8;\r\n\r\nfunction getRandomFloat(min: number, max: number): number {\r\n  return Math.random() * (max - min) + min;\r\n}\r\n\r\nfunction getRandomInRange(min: number, max: number): number {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport function colorGenerator(): string {\r\n  const colors: number[] = new Array(3);\r\n  for (let i = 0; i < 3; i++) {\r\n    colors[i] = getRandomInRange(LOWER_COLOR, UPPER_COLOR);\r\n  }\r\n  const a = getRandomFloat(LOWER_OPACITY, UPPER_OPACITY);\r\n\r\n  return `rgba(${colors[0]}, ${colors[1]}, ${colors[2]}, ${a})`;\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Spinner } from 'reactstrap';\r\nimport { ANY_BOARD_YET } from '../../../../common/constans/messages';\r\nimport { colorGenerator } from '../../../../functions/cardColorGenerator';\r\nimport { useActions } from '../../../../hooks/useActions';\r\nimport { useTypeSelector } from '../../../../hooks/useTypeSelector';\r\nimport './boards.css';\r\n/**\r\n * Get boards list from api\r\n * @returns Boards List\r\n */\r\nconst Boards: React.FC = () => {\r\n  const { getBoards, error, loading } = useTypeSelector((state) => state.boards);\r\n  const { fetchBoards } = useActions();\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    fetchBoards();\r\n    return (): void => {\r\n      abortController.abort();\r\n    };\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <Spinner color=\"success\" />;\r\n  }\r\n\r\n  if (error) {\r\n    return <h2>{error}</h2>;\r\n  }\r\n\r\n  if (getBoards.boards.length > 0) {\r\n    return (\r\n      <div className=\"boards-row\">\r\n        {getBoards.boards.map((board) => (\r\n          <Link\r\n            to={`/board/${board.id}`}\r\n            key={board.id}\r\n            className=\"card card-boards\"\r\n            style={{ background: `${colorGenerator()}` }}\r\n          >\r\n            {board.title}\r\n          </Link>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>{ANY_BOARD_YET}</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Boards;\r\n","import React, { useState } from 'react';\r\nimport { ADD_BOARD, BOARDS, HOME_PAGE_DESC } from '../../common/constans/messages';\r\nimport ModalWrapper from '../Modal/ModalWrapper';\r\nimport Boards from './components/boards/Boards';\r\n/**\r\n * The page has 3 components: the \"Add Board\" button, the board's list, and modal window (MW) for add a new board.\r\n * MW is hidden by default and stays visible by clicking the button.\r\n * @returns Main page\r\n */\r\nconst Main: React.FC = () => {\r\n  const [isModalVisible, setModalVisible] = useState(false); // the state for control MV visibility\r\n  const toggleModal = (): void => {\r\n    setModalVisible((wasModalVisible) => !wasModalVisible);\r\n  };\r\n  return (\r\n    <section>\r\n      <div className=\"container my-4\">\r\n        <button className=\"btn btn-outline-primary\" onClick={toggleModal}>\r\n          {ADD_BOARD}\r\n        </button>\r\n      </div>\r\n      <div className=\"container\">\r\n        <h1>{BOARDS}</h1>\r\n        <p>{HOME_PAGE_DESC}</p>\r\n        <Boards />\r\n      </div>\r\n      <ModalWrapper isModalVisible={isModalVisible} onBackDropClick={toggleModal} startTitle=\"\" />\r\n    </section>\r\n  );\r\n};\r\nexport default Main;\r\n","import React from 'react';\r\nimport { Switch, Route, Redirect, BrowserRouter } from 'react-router-dom';\r\nimport './App.css';\r\nimport Board from './pages/Board/Board';\r\nimport Home from './pages/Home/Home';\r\n\r\nconst App: React.FC = () => (\r\n  <BrowserRouter>\r\n    <div className=\"container\">\r\n      <Switch>\r\n        <Route component={Home} path=\"/\" exact />\r\n        <Route component={Board} path=\"/board/:id\" />\r\n        <Redirect exact to=\"/\" />\r\n      </Switch>\r\n    </div>\r\n  </BrowserRouter>\r\n);\r\n\r\nexport default App;\r\n","import { BoardsAction, BoardsActionTypes, BoardsState } from '../types/boards';\r\n\r\nconst initialState: BoardsState = {\r\n  getBoards: { boards: [] },\r\n  loading: false,\r\n  error: false,\r\n};\r\n\r\nexport const boardsReducer = (state = initialState, action: BoardsAction): BoardsState => {\r\n  switch (action.type) {\r\n    case BoardsActionTypes.FETCH_BOARDS:\r\n      return { loading: true, error: false, getBoards: { boards: [] } };\r\n    case BoardsActionTypes.FETCH_BOARDS_SUCCESS:\r\n      return { loading: false, error: false, getBoards: action.payload };\r\n    case BoardsActionTypes.FETCH_BOARDS_ERROR:\r\n      return { loading: false, error: action.payload, getBoards: { boards: [] } };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { ListsAction, ListsActionTypes, ListsState } from '../types/lists';\r\n\r\nconst initialState: ListsState = {\r\n  getLists: {\r\n    title: '',\r\n    users: [],\r\n    lists: [],\r\n  },\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nexport const listsReducer = (state = initialState, action: ListsAction): ListsState => {\r\n  switch (action.type) {\r\n    case ListsActionTypes.FETCH_LISTS:\r\n      return {\r\n        loading: true,\r\n        error: null,\r\n        getLists: {\r\n          title: '',\r\n          users: [],\r\n          lists: [],\r\n        },\r\n      };\r\n    case ListsActionTypes.FETCH_LISTS_SUCCESS:\r\n      return { loading: false, error: null, getLists: action.payload };\r\n    case ListsActionTypes.FETCH_LISTS_ERROR:\r\n      return {\r\n        loading: false,\r\n        error: action.payload,\r\n        getLists: {\r\n          title: '',\r\n          users: [],\r\n          lists: [],\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { ChangeItemActions, ChangeItemActionTypes, ChangeItemState } from '../types/changeItem';\r\n\r\nconst initialState: ChangeItemState = {\r\n  changeState: false,\r\n  error: null,\r\n};\r\n\r\nexport const itemChangeReducer = (state = initialState, action: ChangeItemActions): ChangeItemState => {\r\n  switch (action.type) {\r\n    case ChangeItemActionTypes.CHANGE_ITEM_SUCCESS:\r\n      return { changeState: true, error: null };\r\n    case ChangeItemActionTypes.CHANGE_ITEM_ERROR:\r\n      return { changeState: true, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { boardsReducer } from './boardsReducer';\r\nimport { listsReducer } from './listsReducer';\r\nimport { itemChangeReducer } from './itemChangeReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n  boards: boardsReducer,\r\n  lists: listsReducer,\r\n  changeItem: itemChangeReducer,\r\n});\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n","import { applyMiddleware, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { rootReducer } from './reducers';\r\n\r\n// export const store = createStore(rootReducer, compose(applyMiddleware(thunk), composeWithDevTools()));\r\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport { store } from './store';\r\n\r\n/* import reportWebVitals from './reportWebVitals'; */\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n/* reportWebVitals(); */\r\n"],"sourceRoot":""}