{"version":3,"sources":["store/types/boards.ts","common/Context.ts","common/constans/api.ts","api/request.ts","common/constans/messages.ts","store/actions/boards.ts","store/types/lists.ts","store/actions/lists.ts","store/types/changeItem.ts","store/actions/itemEdit.ts","store/actions/itemDelete.ts","store/actions/itemAdd.ts","store/actions/index.ts","hooks/useActions.ts","hooks/useTypeSelector.ts","components/Alert.tsx","components/InputBlock.tsx","functions/callAlert.ts","functions/validTitles.ts","pages/Board/components/DeleteBoard/DeleteBoard.tsx","pages/Board/components/BoardHeader/components/BoardTitle.tsx","pages/Board/components/BoardHeader/BoardHeader.tsx","pages/Board/components/Lists/components/Card/CardDisplay/CardDisplay.tsx","pages/Home/components/BoardCreate/BoardCreate.tsx","components/Modal/Modal.tsx","components/Modal/ModalPopup.styles.ts","components/Modal/ModalWrapper.tsx","pages/Board/components/Lists/components/Card/DeleteCard/DeleteCard.tsx","pages/Board/components/Lists/components/Card/Card.tsx","pages/Board/components/Lists/components/List/AddList/AddList.tsx","pages/Board/components/Lists/components/List/ListsMain/ListMain.tsx","pages/Board/components/Lists/components/List/DeleteList/DeleteList.tsx","pages/Board/components/Lists/components/Card/AddCard/AddCard.tsx","pages/Board/components/Lists/components/AddCardField/AddCardField.tsx","pages/Board/components/Lists/components/List/ListTitle/ListTitle.tsx","pages/Board/components/Lists/components/List/ListInner/ListInner.tsx","pages/Board/components/Lists/Lists.tsx","pages/Board/Board.tsx","pages/Home/components/AddButton/AddButton.tsx","functions/cardColorGenerator.ts","pages/Home/components/Boards/Boards.tsx","pages/Home/Home.tsx","App.tsx","store/reducers/boardsReducer.ts","store/reducers/listsReducer.ts","store/reducers/itemChangeReducer.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["BoardsActionTypes","MyContext","React","createContext","boardID","baseURL","process","board","instance","axios","create","api","headers","Authorization","DANGER_NAME","ERROR_ITEM_ADD","ADD_BOARD","ListsActionTypes","fetchBoards","dispatch","a","type","FETCH_BOARDS","get","config","response","FETCH_BOARDS_SUCCESS","payload","data","FETCH_BOARDS_ERROR","ChangeItemActionTypes","fetchLists","id","FETCH_LISTS","FETCH_LISTS_SUCCESS","FETCH_LISTS_ERROR","editItem","newData","urlEdit","put","CHANGE_ITEM_SUCCESS","CHANGE_ITEM_ERROR","deleteItem","url","delete","addItem","newItem","post","res","result","BoardsActionCreators","ListsActionCreators","ItemEditActionCreators","ItemDeleteActionCreators","ItemAddActionCreators","useActions","useDispatch","bindActionCreators","ActionCreators","useTypeSelector","useSelector","Alert","alertState","isShow","className","isDanger","role","text","InputBlock","inputData","cln","onChange","changeHandler","onKeyPress","onKeyUp","onBlur","value","title","placeholder","ph","clni","ref","callAlert","isValidTitle","match","DeleteBoard","history","useHistory","Consumer","Provider","onClick","push","InputTitle","startTitle","inputEl","useRef","useState","setTitle","setAlertState","editTitle","setTimeout","event","target","key","BoardHeader","to","CardDisplay","card","desc","description","defaultValue","BoardCreate","onBackDropClick","notify","message","toast","error","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","addFunction","newBoard","toString","Modal","children","e","stopPropagation","ModalContainer","styled","div","DesktopModalContainer","Header","h3","Close","BaseModalWrapper","isModalVisible","isCard","headerTitle","main","DeleteCard","Card","listID","onCurrentCard","onCurrentCardTitle","activeCard","isAlert","setAlert","setModalVisible","toggleModal","wasModalVisible","console","log","list_id","update","ModalWrapper","onDragOver","preventDefault","dragOverHandler","onDragLeave","onDragStart","onDragEnter","activeElement","document","getElementById","currentElement","currentTarget","nextElement","cursorPosition","currentElementCoord","getBoundingClientRect","y","height","nextElementSibling","getNextElement","clientY","previousElementSibling","insertBefore","err","append","dragEnterHandler","onDoubleClick","AddList","maxListPos","newList","ListMain","arrLenght","lists","DeleteList","AddCard","newCard","AddCardField","list","maxCardPos","isCardAddVisible","setCardAddVisible","wasVisible","ListTitle","newPos","ListInner","cards","currentCard","currentCardTitle","dropHandler","Number","onDrop","length","Lists","getLists","setCurrentCard","cardVal","cardID","setCurrentCardTitle","cardTitleVal","cardTitle","arr","Object","keys","sort","b","map","i","idCard","Board","params","state","loading","useEffect","abortController","AbortController","abort","Spinner","color","AddButton","oldIsVisible","success","users","colorGenerator","min","max","colors","Array","Math","floor","random","getRandomFloat","Boards","boards","getBoards","style","background","Main","App","component","Home","path","exact","initialState","changeState","rootReducer","combineReducers","action","changeItem","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render"],"mappings":"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","file":"static/js/main.8fa9bec6.chunk.js","sourcesContent":["import { IBoards } from '../../interfaces/inrefaces';\r\n\r\nexport interface BoardsState {\r\n  getBoards: IBoards;\r\n  loading: boolean;\r\n  error: boolean | string;\r\n}\r\nexport enum BoardsActionTypes {\r\n  FETCH_BOARDS = 'FETCH_BOARDS',\r\n  FETCH_BOARDS_SUCCESS = 'FETCH_BOARDS_SUCCESS',\r\n  FETCH_BOARDS_ERROR = 'FETCH_BOARDS_ERROR',\r\n}\r\n\r\ninterface FetchBoardsAction {\r\n  type: BoardsActionTypes.FETCH_BOARDS;\r\n}\r\ninterface FetchBoardsSuccessAction {\r\n  type: BoardsActionTypes.FETCH_BOARDS_SUCCESS;\r\n  payload: IBoards;\r\n}\r\ninterface FetchBoardsErrorAction {\r\n  type: BoardsActionTypes.FETCH_BOARDS_ERROR;\r\n  payload: string;\r\n}\r\nexport type BoardsAction = FetchBoardsAction | FetchBoardsSuccessAction | FetchBoardsErrorAction;\r\n","import React from 'react';\r\n\r\nconst MyContext = React.createContext({\r\n  boardID: '',\r\n});\r\n\r\nexport default MyContext;\r\n","export default {\r\n  baseURL: process.env.REACT_APP_API_URL || '',\r\n  board: 'board',\r\n};\r\n","import axios from 'axios';\r\nimport { api } from '../common/constans';\r\n\r\nconst instance = axios.create({\r\n  baseURL: api.baseURL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    Authorization: 'Bearer 123', // к этому мы ещё вернёмся как-нибудь потом\r\n  },\r\n});\r\n\r\n// instance.interceptors.response.use((res) => res.data);\r\n\r\nexport default instance;\r\n","export const DANGER_NAME =\r\n  'The value is empty or contains errors. Allowed characters: letters, numbers, spaces, dashes, dots, underscores.';\r\nexport const SUCCESS_BOARD_NAME = 'New board was created successfully!';\r\nexport const SUCCESS_BOARD_NAME_EDIT = 'The board title was edited successfully!';\r\nexport const SUCCESS_LIST_NAME = 'New list was created successfully!';\r\nexport const SUCCESS_LIST_NAME_EDIT = 'The list title was edited successfully!';\r\nexport const ERROR_BOARDS_LOAD = \"Error. The boards data didn't load\";\r\nexport const ERROR_ITEM_ADD = \"Error. The item didn't add on the server. Please, check name of item\";\r\nexport const ERROR_ITEM_DELETE = \"Error. The item didn't delete on the server.\";\r\nexport const ERROR_ITEM_EDIT = \"Error. The item title didn't change\";\r\nexport const ERROR_LISTS_LOAD = \"Error. The lists data didn't load from server\";\r\nexport const ANY_BOARD_YET = 'Any board yet. Create your first board!';\r\nexport const ADD_BOARD = 'Add a board';\r\nexport const ADD_CARD = 'Add a card';\r\nexport const ADD_LIST = 'Add a list';\r\nexport const BOARDS = 'Boards';\r\nexport const HOME_PAGE_DESC = 'This is a training React-project. An analogue of the \"Trello\" service.';\r\nexport const ADD_BOARD_TITLE = 'Add new board';\r\nexport const ANY_LIST_YET = 'Any list yet. Create your first list!';\r\nexport const LIST_NUMBER = 'The lists number:';\r\nexport const TASKS_NUMBER = 'The tasks number on the list:';\r\n","/* eslint-disable no-console */\r\nimport { Dispatch } from 'redux';\r\nimport api from '../../api/request';\r\nimport config from '../../common/constans/api';\r\nimport { ERROR_BOARDS_LOAD } from '../../common/constans/messages';\r\nimport { BoardsAction, BoardsActionTypes } from '../types/boards';\r\n\r\n// const url = `${api.baseURL}/board`;\r\nexport const fetchBoards = () => async (dispatch: Dispatch<BoardsAction>): Promise<void> => {\r\n  try {\r\n    dispatch({ type: BoardsActionTypes.FETCH_BOARDS });\r\n    const response = await api.get(config.board);\r\n    dispatch({ type: BoardsActionTypes.FETCH_BOARDS_SUCCESS, payload: response.data });\r\n  } catch (e) {\r\n    dispatch({ type: BoardsActionTypes.FETCH_BOARDS_ERROR, payload: ERROR_BOARDS_LOAD });\r\n  }\r\n};\r\n","import { ILists } from '../../interfaces/inrefaces';\r\n\r\nexport interface ListsState {\r\n  getLists: ILists;\r\n  loading: boolean;\r\n  error: null | string;\r\n}\r\nexport enum ListsActionTypes {\r\n  FETCH_LISTS = 'FETCH_LISTS',\r\n  FETCH_LISTS_SUCCESS = 'FETCH_LISTS_SUCCESS',\r\n  FETCH_LISTS_ERROR = 'FETCH_LISTS_ERROR',\r\n}\r\n\r\ninterface FetchListsAction {\r\n  type: ListsActionTypes.FETCH_LISTS;\r\n}\r\ninterface FetchListsSuccessAction {\r\n  type: ListsActionTypes.FETCH_LISTS_SUCCESS;\r\n  payload: ILists;\r\n}\r\ninterface FetchListsErrorAction {\r\n  type: ListsActionTypes.FETCH_LISTS_ERROR;\r\n  payload: string;\r\n}\r\nexport type ListsAction = FetchListsAction | FetchListsSuccessAction | FetchListsErrorAction;\r\n","/* eslint-disable no-console */\r\nimport { Dispatch } from 'redux';\r\nimport api from '../../api/request';\r\nimport config from '../../common/constans/api';\r\nimport { ERROR_LISTS_LOAD } from '../../common/constans/messages';\r\nimport { ListsAction, ListsActionTypes } from '../types/lists';\r\n\r\nexport const fetchLists = (id: string) => async (dispatch: Dispatch<ListsAction>): Promise<void> => {\r\n  // const url = `${api.baseURL}/board/${id}`;\r\n  try {\r\n    dispatch({ type: ListsActionTypes.FETCH_LISTS });\r\n    const response = await api.get(`${config.board}/${id}`);\r\n    dispatch({ type: ListsActionTypes.FETCH_LISTS_SUCCESS, payload: response.data });\r\n  } catch (e) {\r\n    dispatch({ type: ListsActionTypes.FETCH_LISTS_ERROR, payload: ERROR_LISTS_LOAD });\r\n  }\r\n};\r\n","export enum ChangeItemActionTypes {\r\n  CHANGE_ITEM = 'CHANGE_ITEM',\r\n  CHANGE_ITEM_SUCCESS = 'CHANGE_ITEM_SUCCESS',\r\n  CHANGE_ITEM_ERROR = 'CHANGE_ITEM_ERROR',\r\n}\r\n\r\nexport interface ChangeItemState {\r\n  changeState: boolean;\r\n  error: null | string;\r\n}\r\n\r\ninterface ChangeItemAction {\r\n  type: ChangeItemActionTypes.CHANGE_ITEM;\r\n  payload: boolean;\r\n}\r\ninterface ChangeItemSuccessAction {\r\n  type: ChangeItemActionTypes.CHANGE_ITEM_SUCCESS;\r\n  payload: boolean;\r\n}\r\ninterface ChangeItemErrorAction {\r\n  type: ChangeItemActionTypes.CHANGE_ITEM_ERROR;\r\n  payload: string;\r\n}\r\nexport type ChangeItemActions = ChangeItemAction | ChangeItemSuccessAction | ChangeItemErrorAction;\r\n","/* eslint-disable no-console */\r\nimport { Dispatch } from 'redux';\r\nimport api from '../../api/request';\r\nimport config from '../../common/constans/api';\r\nimport { ERROR_ITEM_EDIT } from '../../common/constans/messages';\r\nimport { ChangeItemActions, ChangeItemActionTypes } from '../types/changeItem';\r\n\r\ntype Card = {\r\n  position: number;\r\n  title: string;\r\n  list_id: number;\r\n};\r\n\r\ntype Board = {\r\n  title: string;\r\n};\r\n\r\ntype List = {\r\n  position: number;\r\n  title: string;\r\n};\r\n\r\nexport const editItem = (newData: Card | Board | List, urlEdit: string) => async (\r\n  dispatch: Dispatch<ChangeItemActions>\r\n): Promise<void> => {\r\n  try {\r\n    // dispatch({ type: ChangeItemActionTypes.CHANGE_ITEM, payload: false });\r\n    await api.put(`${config.board}/${urlEdit}`, newData);\r\n    dispatch({ type: ChangeItemActionTypes.CHANGE_ITEM_SUCCESS, payload: true });\r\n  } catch (e) {\r\n    dispatch({ type: ChangeItemActionTypes.CHANGE_ITEM_ERROR, payload: ERROR_ITEM_EDIT });\r\n  }\r\n};\r\n","/* eslint-disable no-console */\r\nimport { Dispatch } from 'redux';\r\nimport api from '../../api/request';\r\nimport config from '../../common/constans/api';\r\nimport { ERROR_ITEM_DELETE } from '../../common/constans/messages';\r\nimport { ChangeItemActions, ChangeItemActionTypes } from '../types/changeItem';\r\n\r\nexport const deleteItem = (url: string) => async (dispatch: Dispatch<ChangeItemActions>): Promise<void> => {\r\n  try {\r\n    // dispatch({ type: ChangeItemActionTypes.CHANGE_ITEM, payload: false });\r\n    await api.delete(`${config.board}/${url}`);\r\n\r\n    dispatch({ type: ChangeItemActionTypes.CHANGE_ITEM_SUCCESS, payload: true });\r\n  } catch (e) {\r\n    dispatch({ type: ChangeItemActionTypes.CHANGE_ITEM_ERROR, payload: ERROR_ITEM_DELETE });\r\n  }\r\n};\r\n","/* eslint-disable no-console */\r\nimport { Dispatch } from 'redux';\r\nimport api from '../../api/request';\r\nimport config from '../../common/constans/api';\r\nimport { ERROR_ITEM_ADD } from '../../common/constans/messages';\r\nimport { ChangeItemActions, ChangeItemActionTypes } from '../types/changeItem';\r\n\r\ntype Card = {\r\n  title: string;\r\n  list_id: number;\r\n  position: number;\r\n};\r\n\r\ntype Board = {\r\n  title: string;\r\n};\r\n\r\ntype List = {\r\n  title: string;\r\n  position: number;\r\n};\r\n\r\nexport const addItem = (url: string, newItem: Card | Board | List) => async (\r\n  dispatch: Dispatch<ChangeItemActions>\r\n): Promise<string> => {\r\n  try {\r\n    const res = await api.post(`${config.board}/${url}`, newItem);\r\n    dispatch({ type: ChangeItemActionTypes.CHANGE_ITEM_SUCCESS, payload: true });\r\n    return res.data.result;\r\n  } catch (e) {\r\n    dispatch({ type: ChangeItemActionTypes.CHANGE_ITEM_ERROR, payload: ERROR_ITEM_ADD });\r\n    return ERROR_ITEM_ADD;\r\n  }\r\n};\r\n","import * as BoardsActionCreators from './boards';\r\nimport * as ListsActionCreators from './lists';\r\nimport * as ItemEditActionCreators from './itemEdit';\r\nimport * as ItemDeleteActionCreators from './itemDelete';\r\nimport * as ItemAddActionCreators from './itemAdd';\r\n\r\nexport default {\r\n  ...BoardsActionCreators,\r\n  ...ListsActionCreators,\r\n  ...ItemEditActionCreators,\r\n  ...ItemDeleteActionCreators,\r\n  ...ItemAddActionCreators,\r\n};\r\n","/* eslint-disable @typescript-eslint/explicit-function-return-type */\r\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\nimport { useDispatch } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport ActionCreators from '../store/actions';\r\n\r\nexport const useActions = () => {\r\n  const dispatch = useDispatch();\r\n  return bindActionCreators(ActionCreators, dispatch);\r\n};\r\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\r\nimport { RootState } from '../store/reducers';\r\n\r\nexport const useTypeSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import React from 'react';\r\nimport { IAlert } from '../interfaces/inrefaces';\r\n\r\ntype Props = {\r\n  alertState: IAlert;\r\n};\r\nexport const Alert: React.FC<Props> = ({ alertState }) =>\r\n  alertState.isShow ? (\r\n    <div className={alertState.isDanger ? 'alert alert-danger' : 'alert alert-success'} role=\"alert\">\r\n      {alertState.text}\r\n    </div>\r\n  ) : (\r\n    <></>\r\n  );\r\n","import React from 'react';\r\nimport { IAlert, IInput } from '../interfaces/inrefaces';\r\nimport { Alert } from './Alert';\r\n\r\ntype Props = {\r\n  alertState: IAlert;\r\n  inputData: IInput;\r\n};\r\nconst InputBlock: React.FC<Props> = ({ alertState, inputData }) => (\r\n  <div className={inputData.cln}>\r\n    <Alert alertState={alertState} />\r\n    <input\r\n      onChange={inputData.changeHandler}\r\n      onKeyPress={inputData.onKeyPress}\r\n      onKeyUp={inputData.onKeyUp}\r\n      onBlur={inputData.onBlur}\r\n      value={inputData.title}\r\n      type=\"text\"\r\n      placeholder={inputData.ph}\r\n      className={inputData.clni}\r\n      ref={inputData.ref}\r\n    />\r\n  </div>\r\n);\r\n\r\nexport default InputBlock;\r\n","import { IAlert } from '../interfaces/inrefaces';\r\n\r\nexport function callAlert(isShow: boolean, isDanger: boolean, text: string): IAlert {\r\n  return { isShow, isDanger, text };\r\n}\r\n","export function isValidTitle(title: string): boolean {\r\n  if (title.match(/^[\\d\\p{L} .,_-]+$/u) === null) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n","import React from 'react';\r\nimport { FaTrashAlt } from 'react-icons/fa';\r\nimport { IconContext } from 'react-icons/lib';\r\nimport { useHistory } from 'react-router-dom';\r\nimport MyContext from '../../../../common/Context';\r\nimport { useActions } from '../../../../hooks/useActions';\r\n\r\nconst DeleteBoard: React.FC = () => {\r\n  const history = useHistory();\r\n  const { deleteItem } = useActions();\r\n  return (\r\n    <MyContext.Consumer>\r\n      {({ boardID }): JSX.Element => (\r\n        <IconContext.Provider value={{ className: 'trash-list deleteBoard' }}>\r\n          <FaTrashAlt\r\n            onClick={async (): Promise<void> => {\r\n              await deleteItem(boardID);\r\n              history.push('/');\r\n            }}\r\n          />\r\n        </IconContext.Provider>\r\n      )}\r\n    </MyContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default DeleteBoard;\r\n","import React, { useRef, useState } from 'react';\r\nimport { DANGER_NAME } from '../../../../../common/constans/messages';\r\nimport MyContext from '../../../../../common/Context';\r\nimport InputBlock from '../../../../../components/InputBlock';\r\nimport { callAlert } from '../../../../../functions/callAlert';\r\nimport { isValidTitle } from '../../../../../functions/validTitles';\r\nimport { useActions } from '../../../../../hooks/useActions';\r\nimport { IAlert, IInput } from '../../../../../interfaces/inrefaces';\r\nimport DeleteBoard from '../../DeleteBoard/DeleteBoard';\r\n\r\ntype IData = {\r\n  startTitle: string;\r\n};\r\n\r\ntype ITitle = {\r\n  title: string;\r\n};\r\n\r\nconst InputTitle: React.FC<IData> = ({ startTitle }) => {\r\n  const inputEl = useRef<HTMLInputElement>(null);\r\n  const [title, setTitle] = useState<string>(startTitle);\r\n  const startAlert: IAlert = { isShow: false, isDanger: false, text: '' };\r\n  const [alertState, setAlertState] = useState<IAlert>(startAlert);\r\n  const { editItem, fetchLists } = useActions();\r\n\r\n  return (\r\n    <MyContext.Consumer>\r\n      {({ boardID }): JSX.Element => {\r\n        const changeHandler = (event: React.ChangeEvent<HTMLInputElement>): void => setTitle(event.target.value);\r\n        const newData: ITitle = { title };\r\n\r\n        function editTitle(): void {\r\n          if (isValidTitle(title)) {\r\n            editItem(newData, boardID);\r\n          } else {\r\n            setAlertState(callAlert(true, true, DANGER_NAME));\r\n            setTimeout(() => {\r\n              setTitle(startTitle);\r\n              setAlertState(callAlert(false, false, ''));\r\n            }, 3000);\r\n          }\r\n        }\r\n        const keyPressHandler = (event: React.KeyboardEvent): void => {\r\n          if (event.key === 'Enter') {\r\n            editTitle();\r\n            fetchLists(boardID);\r\n          }\r\n        };\r\n\r\n        const keyUpHandler = (): void => {\r\n          editTitle();\r\n        };\r\n\r\n        const blurHandler = (): void => {\r\n          if (startTitle !== title) {\r\n            editTitle();\r\n            fetchLists(boardID);\r\n          }\r\n        };\r\n        const inputData: IInput = {\r\n          title,\r\n          ph: title,\r\n          changeHandler,\r\n          onKeyPress: keyPressHandler,\r\n          onKeyUp: keyUpHandler,\r\n          onBlur: blurHandler,\r\n          cln: 'input-row',\r\n          clni: 'h1',\r\n          ref: inputEl,\r\n        };\r\n        return (\r\n          <div className=\"card board-header-title mt-4 py-2\">\r\n            <InputBlock alertState={alertState} inputData={inputData} />\r\n            <DeleteBoard />\r\n          </div>\r\n        );\r\n      }}\r\n    </MyContext.Consumer>\r\n  );\r\n};\r\nexport default InputTitle;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport InputTitle from './components/BoardTitle';\r\n\r\ntype IData = {\r\n  startTitle: string;\r\n};\r\n\r\nconst BoardHeader: React.FC<IData> = ({ startTitle }) => (\r\n  <div className=\"board-header container my-4\">\r\n    <Link to=\"/\">Home</Link>\r\n    <InputTitle startTitle={startTitle} />\r\n  </div>\r\n);\r\n\r\nexport default BoardHeader;\r\n","import React from 'react';\r\nimport { ICard } from '../../../../../../../interfaces/inrefaces';\r\n\r\ntype Props = {\r\n  card: ICard;\r\n};\r\nconst CardDisplay: React.FC<Props> = ({ card }) => {\r\n  const desc = card.description !== '' ? card.description : 'Type your description';\r\n  const cln = card.description !== '' ? 'textArea' : 'textArea empty';\r\n  return (\r\n    <div>\r\n      <label>Description</label>\r\n      <textarea defaultValue={desc} className={cln} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardDisplay;\r\n","/* eslint-disable no-console */\r\nimport React, { useState } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport { ADD_BOARD, DANGER_NAME, SUCCESS_BOARD_NAME } from '../../../../common/constans/messages';\r\nimport InputBlock from '../../../../components/InputBlock';\r\nimport { isValidTitle } from '../../../../functions/validTitles';\r\nimport { useActions } from '../../../../hooks/useActions';\r\nimport { IAlert, IInput } from '../../../../interfaces/inrefaces';\r\nimport './boardCreate.css';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\ntype ITitle = {\r\n  title: string;\r\n};\r\n\r\ntype Props = {\r\n  onBackDropClick: (message: string) => void;\r\n};\r\n\r\nconst BoardCreate: React.FC<Props> = ({ onBackDropClick }) => {\r\n  const notify = (message: string): React.ReactText =>\r\n    toast.error(message, {\r\n      position: 'top-right',\r\n      autoClose: 5000,\r\n      hideProgressBar: false,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined,\r\n    });\r\n  const [title, setTitle] = useState<string>('');\r\n  const startAlert: IAlert = { isShow: false, isDanger: false, text: '' };\r\n  const [alertState] = useState<IAlert>(startAlert);\r\n  const changeHandler = (event: React.ChangeEvent<HTMLInputElement>): void => setTitle(event.target.value);\r\n  const { addItem, fetchBoards } = useActions();\r\n\r\n  const addFunction = async (): Promise<void> => {\r\n    if (isValidTitle(title)) {\r\n      const newBoard: ITitle = { title };\r\n      const res = await addItem('', newBoard);\r\n      if (res.toString() === 'Created') {\r\n        await fetchBoards();\r\n        onBackDropClick(`${SUCCESS_BOARD_NAME} Your board name is \"${title}\"`);\r\n      } else {\r\n        notify(res.toString());\r\n      }\r\n    } else {\r\n      notify(DANGER_NAME);\r\n    }\r\n  };\r\n\r\n  const keyPressHandler = (event: React.KeyboardEvent): void => {\r\n    if (event.key === 'Enter') {\r\n      addFunction();\r\n    }\r\n  };\r\n\r\n  const keyUpHandler = (): void => {\r\n    ('');\r\n  };\r\n\r\n  const blurHandler = (): void => {\r\n    ('');\r\n  };\r\n\r\n  const inputData: IInput = {\r\n    title,\r\n    ph: 'Enter board name',\r\n    changeHandler,\r\n    onKeyPress: keyPressHandler,\r\n    onKeyUp: keyUpHandler,\r\n    onBlur: blurHandler,\r\n    cln: 'fields mb-4',\r\n    clni: 'inputName',\r\n    ref: null,\r\n  };\r\n  return (\r\n    <div className=\"main-container\">\r\n      <InputBlock alertState={alertState} inputData={inputData} />\r\n\r\n      <button className=\"btn btn-success mr-2 btn-new-board\" onClick={addFunction}>\r\n        {ADD_BOARD}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BoardCreate;\r\n","import React from 'react';\r\nimport './modal.css';\r\n\r\ninterface ModalProps {\r\n  onBackDropClick: (message: string) => void;\r\n}\r\n\r\nconst Modal: React.FC<ModalProps> = ({ onBackDropClick, children }) => (\r\n  <div className=\"overlay\" onClick={(): void => onBackDropClick('')}>\r\n    <div onClick={(e): void => e.stopPropagation()}>{children}</div>\r\n  </div>\r\n);\r\n\r\nexport default Modal;\r\n","import styled from 'styled-components';\r\n\r\nconst ModalContainer = styled.div`\r\n  background-color: #ffffff;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  position: relative;\r\n`;\r\nexport const DesktopModalContainer = styled(ModalContainer)`\r\n  border-radius: 7px;\r\n  box-shadow: 0 0 32px rgba(0, 0, 0, 0.5);\r\n  padding: 40px;\r\n  width: 450px;\r\n  font-size: 26px;\r\n  @media screen and (max-width: 480px) {\r\n    width: 100%;\r\n  } ;\r\n`;\r\nexport const Header = styled.h3`\r\n  color: #25306c;\r\n  font-size: 35px;\r\n  line-height: 1em;\r\n  font-weight: bold;\r\n  margin: 5px 0 10px;\r\n  text-align: center;\r\n`;\r\n\r\nexport const Close = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 80%;\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n  .close-icon {\r\n    color: rgb(128, 127, 127);\r\n    height: 1rem;\r\n    &:hover {\r\n      color: #bb2a81;\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { IconContext } from 'react-icons';\r\nimport { FaTimes } from 'react-icons/fa';\r\nimport { ADD_BOARD_TITLE } from '../../common/constans/messages';\r\nimport { ICard } from '../../interfaces/inrefaces';\r\nimport CardDisplay from '../../pages/Board/components/Lists/components/Card/CardDisplay/CardDisplay';\r\nimport BoardCreate from '../../pages/Home/components/BoardCreate/BoardCreate';\r\nimport Modal from './Modal';\r\nimport { Close, DesktopModalContainer, Header } from './ModalPopup.styles';\r\n\r\ninterface BaseModalWrapperProps {\r\n  isModalVisible: boolean;\r\n  onBackDropClick: (message: string) => void;\r\n  isCard: boolean;\r\n  card: ICard;\r\n}\r\n\r\nconst BaseModalWrapper: React.FC<BaseModalWrapperProps> = ({ isModalVisible, onBackDropClick, isCard, card }) => {\r\n  if (!isModalVisible) {\r\n    return null;\r\n  }\r\n  const headerTitle = isCard ? card.title : ADD_BOARD_TITLE;\r\n  const main = (\r\n    <DesktopModalContainer>\r\n      <Close>\r\n        <IconContext.Provider value={{ className: 'close-icon' }}>\r\n          <FaTimes onClick={(): void => onBackDropClick('')} />\r\n        </IconContext.Provider>\r\n      </Close>\r\n      <Header>{headerTitle}</Header>\r\n      {!isCard ? <BoardCreate onBackDropClick={onBackDropClick} /> : <CardDisplay card={card} />}\r\n    </DesktopModalContainer>\r\n  );\r\n\r\n  return <Modal onBackDropClick={onBackDropClick}>{main}</Modal>;\r\n};\r\n\r\nexport default BaseModalWrapper;\r\n","/* eslint-disable no-console */\r\nimport React from 'react';\r\nimport { IconContext } from 'react-icons';\r\nimport { FaTrashAlt } from 'react-icons/fa';\r\nimport MyContext from '../../../../../../../common/Context';\r\nimport { useActions } from '../../../../../../../hooks/useActions';\r\n\r\ntype Props = {\r\n  id: number;\r\n};\r\n\r\nconst DeleteCard: React.FC<Props> = ({ id }) => {\r\n  const { fetchLists, deleteItem } = useActions();\r\n  return (\r\n    <MyContext.Consumer>\r\n      {({ boardID }): JSX.Element => (\r\n        <div className=\"icon__inner mr-4 my-2\">\r\n          <IconContext.Provider value={{ className: 'trash-list' }}>\r\n            <FaTrashAlt\r\n              onClick={async (): Promise<void> => {\r\n                await deleteItem(`${boardID}/card/${id}`);\r\n                await fetchLists(boardID);\r\n              }}\r\n            />\r\n          </IconContext.Provider>\r\n        </div>\r\n      )}\r\n    </MyContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default DeleteCard;\r\n","/* eslint-disable no-console */\r\nimport React, { useRef, useState } from 'react';\r\nimport { DANGER_NAME } from '../../../../../../common/constans/messages';\r\nimport MyContext from '../../../../../../common/Context';\r\nimport InputBlock from '../../../../../../components/InputBlock';\r\nimport { isValidTitle } from '../../../../../../functions/validTitles';\r\nimport { useActions } from '../../../../../../hooks/useActions';\r\nimport { IAlert, ICard, IInput } from '../../../../../../interfaces/inrefaces';\r\nimport ModalWrapper from '../../../../../../components/Modal/ModalWrapper';\r\nimport DeleteCard from './DeleteCard/DeleteCard';\r\n\r\ntype Props = {\r\n  card: ICard;\r\n  listID: number;\r\n  onCurrentCard: (cardID: number) => void;\r\n  onCurrentCardTitle: (cardTitle: string) => void;\r\n  activeCard: number;\r\n};\r\ntype Data = {\r\n  title: string;\r\n  list_id: number;\r\n};\r\n\r\nconst Card: React.FC<Props> = ({ card, listID, onCurrentCard, onCurrentCardTitle, activeCard }) => {\r\n  const inputEl = useRef<HTMLInputElement>(null);\r\n  const [title, setTitle] = useState<string>(card.title);\r\n  const [isAlert, setAlert] = useState<boolean>(false);\r\n  const { editItem, fetchLists } = useActions();\r\n  const [isModalVisible, setModalVisible] = useState(false);\r\n  const toggleModal = (message: string): void => {\r\n    setModalVisible((wasModalVisible) => !wasModalVisible);\r\n    if (message !== '') {\r\n      console.log('sdasdasd');\r\n    }\r\n  };\r\n  return (\r\n    <MyContext.Consumer>\r\n      {({ boardID }): JSX.Element => {\r\n        const changeHandler = (event: React.ChangeEvent<HTMLInputElement>): void => setTitle(event.target.value);\r\n        const newData: Data = { list_id: listID, title };\r\n\r\n        function callAlert(): void {\r\n          setAlert(true);\r\n          setTimeout(() => {\r\n            setTitle(card.title);\r\n            setAlert(false);\r\n          }, 3000);\r\n        }\r\n\r\n        function editTitle(update: boolean): void {\r\n          if (isValidTitle(title)) {\r\n            editItem(newData, `${boardID}/card/${card.id}`);\r\n            if (update) {\r\n              fetchLists(boardID);\r\n            }\r\n          } else {\r\n            callAlert();\r\n          }\r\n        }\r\n        const keyPressHandler = (event: React.KeyboardEvent): void => {\r\n          event.stopPropagation();\r\n          if (event.key === 'Enter') {\r\n            editTitle(true);\r\n          }\r\n        };\r\n\r\n        const keyUpHandler = (): void => {\r\n          editTitle(false);\r\n        };\r\n\r\n        const blurHandler = (): void => {\r\n          if (card.title !== title) {\r\n            editTitle(true);\r\n          }\r\n        };\r\n        const alertState: IAlert = { isShow: isAlert, isDanger: true, text: DANGER_NAME };\r\n        const inputData: IInput = {\r\n          title,\r\n          ph: card.title,\r\n          changeHandler,\r\n          onKeyPress: keyPressHandler,\r\n          onKeyUp: keyUpHandler,\r\n          onBlur: blurHandler,\r\n          cln: 'card__inner',\r\n          clni: 'listTitle',\r\n          ref: inputEl,\r\n        };\r\n        const getNextElement = (cursorPosition: number, currentElement: HTMLLIElement): HTMLLIElement => {\r\n          // Получаем объект с размерами и координатами\r\n          const currentElementCoord = currentElement.getBoundingClientRect();\r\n          // Находим вертикальную координату центра текущего элемента\r\n          const currentElementCenter = currentElementCoord.y + currentElementCoord.height / 2;\r\n\r\n          // Если курсор выше центра элемента, возвращаем текущий элемент\r\n          // В ином случае — следующий DOM-элемент\r\n          const nextElement =\r\n            cursorPosition < currentElementCenter\r\n              ? currentElement\r\n              : (currentElement.nextElementSibling as HTMLLIElement);\r\n\r\n          return nextElement;\r\n        };\r\n        const dragOverHandler = (e: React.DragEvent<HTMLLIElement>): void => {\r\n          e.preventDefault();\r\n        };\r\n\r\n        const dragEnterHandler = (e: React.DragEvent<HTMLLIElement>): void => {\r\n          e.preventDefault();\r\n          const activeElement = document.getElementById(activeCard.toString()) as HTMLLIElement;\r\n          const currentElement = e.currentTarget as HTMLLIElement;\r\n          const nextElement = getNextElement(e.clientY, currentElement) as HTMLLIElement;\r\n          // console.log(nextElement.id);\r\n          // Проверяем, нужно ли менять элементы местами\r\n          if ((nextElement && activeElement === nextElement.previousElementSibling) || activeElement === nextElement) {\r\n            return;\r\n          }\r\n\r\n          try {\r\n            document.getElementById(listID.toString())?.insertBefore(activeElement, nextElement);\r\n            console.log('bbbb');\r\n          } catch (err) {\r\n            document.getElementById(listID.toString())?.append(activeElement, nextElement);\r\n            console.log('aaaaa');\r\n          }\r\n        };\r\n        const dragLeaveHandler = (): void => {\r\n          console.log('e');\r\n        };\r\n        const dragStartHandler = (): void => {\r\n          onCurrentCard(card.id);\r\n          onCurrentCardTitle(card.title);\r\n        };\r\n\r\n        return !isModalVisible ? (\r\n          <li\r\n            className=\"card list-item\"\r\n            id={card.id.toString()}\r\n            draggable\r\n            onDragOver={(e): void => dragOverHandler(e)}\r\n            onDragLeave={(): void => dragLeaveHandler()}\r\n            onDragStart={(): void => dragStartHandler()}\r\n            onDragEnter={(e): void => dragEnterHandler(e)}\r\n            onDoubleClick={(): void => toggleModal('')}\r\n          >\r\n            <DeleteCard id={card.id} />\r\n            <InputBlock alertState={alertState} inputData={inputData} />\r\n            <span>{card.id}</span>\r\n          </li>\r\n        ) : (\r\n          <ModalWrapper isModalVisible={isModalVisible} onBackDropClick={toggleModal} isCard card={card} />\r\n        );\r\n      }}\r\n    </MyContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","/* eslint-disable no-console */\r\nimport React, { useState } from 'react';\r\nimport { ADD_LIST, DANGER_NAME } from '../../../../../../../common/constans/messages';\r\nimport MyContext from '../../../../../../../common/Context';\r\nimport { Alert } from '../../../../../../../components/Alert';\r\nimport { isValidTitle } from '../../../../../../../functions/validTitles';\r\nimport { useActions } from '../../../../../../../hooks/useActions';\r\nimport { IAlert } from '../../../../../../../interfaces/inrefaces';\r\nimport './addList.css';\r\n\r\ntype Props = {\r\n  maxListPos: number;\r\n};\r\n\r\nconst AddList: React.FC<Props> = ({ maxListPos }) => {\r\n  const [title, setTitle] = useState<string>('');\r\n  const [isAlert, setAlert] = useState<boolean>(false);\r\n  const changeHandler = (event: React.ChangeEvent<HTMLInputElement>): void => setTitle(event.target.value);\r\n  const { addItem, fetchLists } = useActions();\r\n  return (\r\n    <MyContext.Consumer>\r\n      {({ boardID }): JSX.Element => {\r\n        function callAlert(): void {\r\n          setAlert(true);\r\n          setTimeout(() => {\r\n            setTitle('');\r\n            setAlert(false);\r\n          }, 3000);\r\n        }\r\n        async function clickHandler(): Promise<void> {\r\n          if (isValidTitle(title)) {\r\n            const newList = { title, position: maxListPos + 1 };\r\n            await addItem(`${boardID}/list`, newList);\r\n            await fetchLists(boardID);\r\n          } else {\r\n            callAlert();\r\n          }\r\n        }\r\n        const alertState: IAlert = { isShow: isAlert, isDanger: true, text: DANGER_NAME };\r\n        return (\r\n          <div className=\"list-input-outside\">\r\n            <Alert alertState={alertState} />\r\n            <div className=\"list-input mt-2\">\r\n              <input type=\"text\" id=\"addList\" placeholder=\"Enter list name\" onChange={changeHandler} value={title} />\r\n              <button className=\"btn btn-primary ml-2\" onClick={clickHandler}>\r\n                {ADD_LIST}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        );\r\n      }}\r\n    </MyContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default AddList;\r\n","import React from 'react';\r\nimport { LIST_NUMBER } from '../../../../../../../common/constans/messages';\r\nimport AddList from '../AddList/AddList';\r\n\r\ntype Props = {\r\n  arrLenght: number;\r\n  maxListPos: number;\r\n  lists: JSX.Element | JSX.Element[];\r\n};\r\nconst ListMain: React.FC<Props> = ({ arrLenght, maxListPos, lists }) => (\r\n  <div className=\"lists-main container\">\r\n    <div className=\"input-row mb-4\">\r\n      <AddList maxListPos={maxListPos} />\r\n      <div className=\"count-lists\">\r\n        {LIST_NUMBER} {arrLenght}\r\n      </div>\r\n    </div>\r\n    <div className=\"cards\">{lists}</div>\r\n  </div>\r\n);\r\n\r\nexport default ListMain;\r\n","/* eslint-disable no-console */\r\nimport React from 'react';\r\nimport { IconContext } from 'react-icons';\r\nimport { FaTrashAlt } from 'react-icons/fa';\r\nimport MyContext from '../../../../../../../common/Context';\r\nimport { useActions } from '../../../../../../../hooks/useActions';\r\n\r\ntype Props = {\r\n  id: string;\r\n};\r\n\r\nconst DeleteList: React.FC<Props> = ({ id }) => {\r\n  const { fetchLists, deleteItem } = useActions();\r\n  return (\r\n    <MyContext.Consumer>\r\n      {({ boardID }): JSX.Element => (\r\n        <div className=\"icon__inner\">\r\n          <IconContext.Provider value={{ className: 'trash-list' }}>\r\n            <FaTrashAlt\r\n              onClick={async (): Promise<void> => {\r\n                await deleteItem(`${boardID}/list/${id}`);\r\n                await fetchLists(boardID);\r\n              }}\r\n            />\r\n          </IconContext.Provider>\r\n        </div>\r\n      )}\r\n    </MyContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default DeleteList;\r\n","/* eslint-disable no-console */\r\nimport React, { useState } from 'react';\r\nimport { ADD_CARD, DANGER_NAME } from '../../../../../../../common/constans/messages';\r\nimport MyContext from '../../../../../../../common/Context';\r\nimport { Alert } from '../../../../../../../components/Alert';\r\nimport { isValidTitle } from '../../../../../../../functions/validTitles';\r\nimport { useActions } from '../../../../../../../hooks/useActions';\r\nimport { IAlert } from '../../../../../../../interfaces/inrefaces';\r\nimport './addCard.css';\r\n\r\ntype Props = {\r\n  position: number;\r\n  list_id: number;\r\n};\r\n\r\nconst AddCard: React.FC<Props> = ({ position, list_id }) => {\r\n  const [title, setTitle] = useState<string>('');\r\n  const [isAlert, setAlert] = useState(false);\r\n  const { addItem, fetchLists } = useActions();\r\n  return (\r\n    <MyContext.Consumer>\r\n      {({ boardID }): JSX.Element => {\r\n        const changeHandler = (event: React.ChangeEvent<HTMLInputElement>): void => setTitle(event.target.value);\r\n        function callAlert(): void {\r\n          setAlert(true);\r\n          setTimeout(() => {\r\n            setTitle('');\r\n            setAlert(false);\r\n          }, 3000);\r\n        }\r\n        async function clickHandler(): Promise<void> {\r\n          if (isValidTitle(title)) {\r\n            const newCard = { title, list_id, position };\r\n            console.log(newCard);\r\n            await addItem(`${boardID}/card`, newCard);\r\n            await fetchLists(boardID);\r\n          } else {\r\n            callAlert();\r\n          }\r\n        }\r\n        const alertState: IAlert = { isShow: isAlert, isDanger: true, text: DANGER_NAME };\r\n        return (\r\n          <div className=\"card-input-outside\">\r\n            <Alert alertState={alertState} />\r\n            <div className=\"card-input mt-2\">\r\n              <input\r\n                className=\"card-title\"\r\n                type=\"text\"\r\n                placeholder=\"Enter card title\"\r\n                onChange={changeHandler}\r\n                value={title}\r\n              />\r\n              <button className=\"btn btn-primary ml-2\" onClick={clickHandler}>\r\n                {ADD_CARD}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        );\r\n      }}\r\n    </MyContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default AddCard;\r\n","import React, { useState } from 'react';\r\nimport { FaPlus } from 'react-icons/fa';\r\nimport { IconContext } from 'react-icons/lib';\r\nimport { IList } from '../../../../../../interfaces/inrefaces';\r\nimport AddCard from '../Card/AddCard/AddCard';\r\n\r\nimport './addCardField.css';\r\n\r\ntype Props = {\r\n  list: IList;\r\n  maxCardPos: number;\r\n};\r\n\r\nconst AddCardField: React.FC<Props> = ({ list, maxCardPos }) => {\r\n  const [isCardAddVisible, setCardAddVisible] = useState(false);\r\n  const toggleCardAdd = (): void => {\r\n    setCardAddVisible((wasVisible) => !wasVisible);\r\n  };\r\n  return (\r\n    <div className=\"addCardInput\">\r\n      <div className=\"iconPlus__inner\">\r\n        <IconContext.Provider value={{ className: 'add-card' }}>\r\n          <FaPlus onClick={toggleCardAdd} />\r\n        </IconContext.Provider>\r\n      </div>\r\n      {isCardAddVisible ? <AddCard position={maxCardPos + 1} list_id={list.id} /> : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddCardField;\r\n","/* eslint-disable no-console */\r\nimport React, { useRef, useState } from 'react';\r\nimport { DANGER_NAME } from '../../../../../../../common/constans/messages';\r\nimport MyContext from '../../../../../../../common/Context';\r\nimport InputBlock from '../../../../../../../components/InputBlock';\r\nimport { isValidTitle } from '../../../../../../../functions/validTitles';\r\nimport { useActions } from '../../../../../../../hooks/useActions';\r\nimport { IAlert, IInput } from '../../../../../../../interfaces/inrefaces';\r\n\r\ntype Props = {\r\n  startTitle: string;\r\n  position: number;\r\n  id: string;\r\n};\r\n\r\ntype Data = {\r\n  position: number;\r\n  title: string;\r\n};\r\n\r\nconst ListTitle: React.FC<Props> = ({ startTitle, position, id }) => {\r\n  const [title, setTitle] = useState<string>(startTitle);\r\n  const [isAlert, setAlert] = useState<boolean>(false);\r\n  const inputEl = useRef<HTMLInputElement>(null);\r\n  const { editItem, fetchLists } = useActions();\r\n  return (\r\n    <MyContext.Consumer>\r\n      {({ boardID }): JSX.Element => {\r\n        const newPos: Data = { position, title };\r\n        const changeHandler = (event: React.ChangeEvent<HTMLInputElement>): void => setTitle(event.target.value);\r\n        function callAlert(): void {\r\n          setAlert(true);\r\n          setTimeout(() => {\r\n            setTitle(startTitle);\r\n            setAlert(false);\r\n          }, 3000);\r\n        }\r\n\r\n        function editTitle(update: boolean): void {\r\n          if (isValidTitle(title)) {\r\n            editItem(newPos, `${boardID}/list/${id}`); // /list/<id>\r\n\r\n            if (update) {\r\n              fetchLists(boardID);\r\n            }\r\n          } else {\r\n            callAlert();\r\n          }\r\n        }\r\n        const keyPressHandler = (event: React.KeyboardEvent): void => {\r\n          if (event.key === 'Enter') {\r\n            editTitle(true);\r\n          }\r\n        };\r\n\r\n        const keyUpHandler = (): void => {\r\n          editTitle(false);\r\n        };\r\n\r\n        const blurHandler = (): void => {\r\n          if (startTitle !== title) {\r\n            editTitle(true);\r\n          }\r\n        };\r\n        const alertState: IAlert = { isShow: isAlert, isDanger: true, text: DANGER_NAME };\r\n        const inputData: IInput = {\r\n          title,\r\n          ph: title,\r\n          changeHandler,\r\n          onKeyPress: keyPressHandler,\r\n          onKeyUp: keyUpHandler,\r\n          onBlur: blurHandler,\r\n          cln: 'listTitleMain',\r\n          clni: 'listTitle',\r\n          ref: inputEl,\r\n        };\r\n        return (\r\n          <div className=\"listTitleMain\">\r\n            <InputBlock alertState={alertState} inputData={inputData} />\r\n          </div>\r\n        );\r\n      }}\r\n    </MyContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default ListTitle;\r\n","/* eslint-disable no-console */\r\nimport React from 'react';\r\nimport { TASKS_NUMBER } from '../../../../../../../common/constans/messages';\r\nimport { IList } from '../../../../../../../interfaces/inrefaces';\r\nimport DeleteList from '../DeleteList/DeleteList';\r\nimport AddCardField from '../../AddCardField/AddCardField';\r\nimport ListTitle from '../ListTitle/ListTitle';\r\nimport MyContext from '../../../../../../../common/Context';\r\nimport { useActions } from '../../../../../../../hooks/useActions';\r\n\r\ntype Props = {\r\n  list: IList;\r\n  id: string;\r\n  cards: JSX.Element[];\r\n  maxCardPos: number;\r\n  currentCard: string;\r\n  currentCardTitle: string;\r\n};\r\n\r\nconst ListInner: React.FC<Props> = ({ list, id, cards, maxCardPos, currentCard, currentCardTitle }) => {\r\n  const { deleteItem, addItem, fetchLists } = useActions();\r\n  const position = maxCardPos + 1;\r\n  return (\r\n    <MyContext.Consumer>\r\n      {({ boardID }): JSX.Element => {\r\n        const dropHandler = async (e: React.DragEvent<HTMLDivElement>): Promise<void> => {\r\n          e.preventDefault();\r\n          const target = Number(e.currentTarget.id);\r\n          await deleteItem(`${boardID}/card/${currentCard}`);\r\n          const newCard = { title: currentCardTitle, list_id: target, position };\r\n          await addItem(`${boardID}/card`, newCard);\r\n          await fetchLists(boardID);\r\n        };\r\n        const dragOverHandler = (e: React.DragEvent<HTMLDivElement>): void => {\r\n          e.preventDefault();\r\n        };\r\n        return (\r\n          <div\r\n            className=\"card list\"\r\n            id={id}\r\n            onDrop={(e): Promise<void> => dropHandler(e)}\r\n            onDragOver={(e): void => dragOverHandler(e)}\r\n          >\r\n            <DeleteList id={id} />\r\n            <p>\r\n              {TASKS_NUMBER} {cards.length}\r\n            </p>\r\n            <ListTitle startTitle={list.title} position={list.position} id={id} />\r\n            <span>{id}</span>\r\n            <ul className=\"list-items\">{cards}</ul>\r\n            <AddCardField list={list} maxCardPos={maxCardPos} />\r\n          </div>\r\n        );\r\n      }}\r\n    </MyContext.Consumer>\r\n  );\r\n};\r\nexport default ListInner;\r\n","/* eslint-disable no-console */\r\nimport React, { useState } from 'react';\r\nimport Card from './components/Card/Card';\r\nimport './lists.css';\r\nimport ListMain from './components/List/ListsMain/ListMain';\r\nimport ListInner from './components/List/ListInner/ListInner';\r\nimport { ANY_LIST_YET } from '../../../../common/constans/messages';\r\nimport { ILists } from '../../../../interfaces/inrefaces';\r\n\r\ntype Props = {\r\n  getLists: ILists;\r\n};\r\n\r\nconst Lists: React.FC<Props> = ({ getLists }) => {\r\n  const [currentCard, setCurrentCard] = useState(0);\r\n  const cardVal = (cardID: number): void => {\r\n    setCurrentCard(cardID);\r\n  };\r\n  const [currentCardTitle, setCurrentCardTitle] = useState('');\r\n  const cardTitleVal = (cardTitle: string): void => {\r\n    setCurrentCardTitle(cardTitle);\r\n  };\r\n  const arr = Object.keys(getLists.lists).sort((a, b) => {\r\n    const first = getLists.lists[Number(a)].position;\r\n    const second = getLists.lists[Number(b)].position;\r\n    return first > second ? 1 : -1;\r\n  });\r\n\r\n  let maxCardPos = 0;\r\n  let maxListPos = 0;\r\n  const arrLenght = arr.length;\r\n  const lists =\r\n    arrLenght !== 0 ? (\r\n      arr.map((id, i) => {\r\n        const list = getLists.lists[Number(id)];\r\n        if (i === arrLenght - 1) maxListPos = list.position;\r\n        maxCardPos = 0;\r\n        const cds = Object.keys(list.cards).sort((a, b) => {\r\n          const first = list.cards[Number(a)].position;\r\n          const second = list.cards[Number(b)].position;\r\n          return first > second ? 1 : -1;\r\n        });\r\n        const cards = cds.map((idCard) => {\r\n          const card = list.cards[Number(idCard)];\r\n          maxCardPos = maxCardPos < card.position ? card.position : maxCardPos;\r\n          return (\r\n            <Card\r\n              key={card.id}\r\n              card={card}\r\n              listID={Number(id)}\r\n              onCurrentCard={cardVal}\r\n              onCurrentCardTitle={cardTitleVal}\r\n              activeCard={currentCard}\r\n            />\r\n          );\r\n        });\r\n        return (\r\n          <ListInner\r\n            key={id}\r\n            list={list}\r\n            id={id}\r\n            cards={cards}\r\n            maxCardPos={maxCardPos}\r\n            currentCard={currentCard.toString()}\r\n            currentCardTitle={currentCardTitle}\r\n          />\r\n        );\r\n      })\r\n    ) : (\r\n      <h2>{ANY_LIST_YET}</h2>\r\n    );\r\n\r\n  return <ListMain arrLenght={arrLenght} maxListPos={maxListPos} lists={lists} />;\r\n};\r\n\r\nexport default Lists;\r\n","/* eslint-disable no-console */\r\nimport React, { useEffect } from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport Spinner from 'reactstrap/es/Spinner';\r\nimport MyContext from '../../common/Context';\r\nimport { useActions } from '../../hooks/useActions';\r\nimport { useTypeSelector } from '../../hooks/useTypeSelector';\r\nimport './board.css';\r\nimport BoardHeader from './components/BoardHeader/BoardHeader';\r\nimport Lists from './components/Lists/Lists';\r\n\r\ntype TParams = { id: string };\r\n\r\nconst Board: React.FC<RouteComponentProps<TParams>> = ({ match }) => {\r\n  const boardID = match.params.id;\r\n  const { getLists, error, loading } = useTypeSelector((state) => state.lists);\r\n  const { fetchLists } = useActions();\r\n\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    fetchLists(boardID);\r\n    return (): void => {\r\n      abortController.abort();\r\n    };\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <Spinner color=\"success\" />;\r\n  }\r\n\r\n  if (error) {\r\n    return <h2>{error}</h2>;\r\n  }\r\n\r\n  const { title } = getLists;\r\n  return (\r\n    <>\r\n      <MyContext.Provider\r\n        value={{\r\n          boardID,\r\n        }}\r\n      >\r\n        <BoardHeader startTitle={title} />\r\n        <Lists getLists={getLists} />\r\n      </MyContext.Provider>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","/* eslint-disable no-console */\r\nimport React, { useState } from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport { ADD_BOARD } from '../../../../common/constans/messages';\r\nimport ModalWrapper from '../../../../components/Modal/ModalWrapper';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst AddButton: React.FC = () => {\r\n  const notify = (message: string): React.ReactText =>\r\n    toast.success(message, {\r\n      position: 'top-right',\r\n      autoClose: 5000,\r\n      hideProgressBar: false,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined,\r\n    });\r\n  const [isModalVisible, setModalVisible] = useState(false); // the state for control MV visibility\r\n  const toggleModal = (message: string): void => {\r\n    setModalVisible((oldIsVisible) => !oldIsVisible);\r\n    if (message !== '' && isModalVisible) notify(message);\r\n  };\r\n  return (\r\n    <div className=\"container my-4\">\r\n      <button className=\"btn btn-outline-primary\" onClick={(): void => toggleModal('')}>\r\n        {ADD_BOARD}\r\n      </button>\r\n      <ModalWrapper\r\n        isModalVisible={isModalVisible}\r\n        onBackDropClick={toggleModal}\r\n        isCard={false}\r\n        card={{\r\n          id: 0,\r\n          position: 0,\r\n          title: '',\r\n          description: '',\r\n          users: [0],\r\n        }}\r\n      />\r\n      <ToastContainer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddButton;\r\n","const LOWER_COLOR = 100;\r\nconst UPPER_COLOR = 255;\r\nconst LOWER_OPACITY = 0.3;\r\nconst UPPER_OPACITY = 0.8;\r\n\r\nfunction getRandomFloat(min: number, max: number): number {\r\n  return Math.random() * (max - min) + min;\r\n}\r\n\r\nfunction getRandomInRange(min: number, max: number): number {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport function colorGenerator(): string {\r\n  const colors: number[] = new Array(3);\r\n  for (let i = 0; i < 3; i++) {\r\n    colors[i] = getRandomInRange(LOWER_COLOR, UPPER_COLOR);\r\n  }\r\n  const a = getRandomFloat(LOWER_OPACITY, UPPER_OPACITY);\r\n\r\n  return `rgba(${colors[0]}, ${colors[1]}, ${colors[2]}, ${a})`;\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Spinner } from 'reactstrap';\r\nimport { ANY_BOARD_YET } from '../../../../common/constans/messages';\r\nimport { colorGenerator } from '../../../../functions/cardColorGenerator';\r\nimport { useActions } from '../../../../hooks/useActions';\r\nimport { useTypeSelector } from '../../../../hooks/useTypeSelector';\r\nimport './boards.css';\r\n/**\r\n * Get boards list from api\r\n * @returns Boards List\r\n */\r\nconst Boards: React.FC = () => {\r\n  const { getBoards, error, loading } = useTypeSelector((state) => state.boards);\r\n  const { fetchBoards } = useActions();\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    fetchBoards();\r\n    return (): void => {\r\n      abortController.abort();\r\n    };\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <Spinner color=\"success\" />;\r\n  }\r\n\r\n  if (error) {\r\n    return <h2>{error}</h2>;\r\n  }\r\n\r\n  if (getBoards.boards.length > 0) {\r\n    return (\r\n      <div className=\"boards-row\">\r\n        {getBoards.boards.map((board) => (\r\n          <Link\r\n            to={`/board/${board.id}`}\r\n            key={board.id}\r\n            className=\"card card-boards\"\r\n            style={{ background: `${colorGenerator()}` }}\r\n          >\r\n            {board.title}\r\n          </Link>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>{ANY_BOARD_YET}</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Boards;\r\n","import React from 'react';\r\nimport { BOARDS, HOME_PAGE_DESC } from '../../common/constans/messages';\r\nimport AddButton from './components/AddButton/AddButton';\r\nimport Boards from './components/Boards/Boards';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\n/**\r\n * The page has 3 components: the \"Add Board\" button, the board's list, and modal window (MW) for add a new board.\r\n * MW is hidden by default and stays visible by clicking the button.\r\n * @returns Main page\r\n */\r\nconst Main: React.FC = () => (\r\n  <section>\r\n    <AddButton />\r\n    <div className=\"container\">\r\n      <h1>{BOARDS}</h1>\r\n      <p>{HOME_PAGE_DESC}</p>\r\n      <Boards />\r\n    </div>\r\n  </section>\r\n);\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport { Switch, Route, Redirect, BrowserRouter } from 'react-router-dom';\r\nimport './App.css';\r\nimport Board from './pages/Board/Board';\r\nimport Home from './pages/Home/Home';\r\n\r\nconst App: React.FC = () => (\r\n  <BrowserRouter>\r\n    <div className=\"container\">\r\n      <Switch>\r\n        <Route component={Home} path=\"/\" exact />\r\n        <Route component={Board} path=\"/board/:id\" />\r\n        <Redirect exact to=\"/\" />\r\n      </Switch>\r\n    </div>\r\n  </BrowserRouter>\r\n);\r\n\r\nexport default App;\r\n","import { BoardsAction, BoardsActionTypes, BoardsState } from '../types/boards';\r\n\r\nconst initialState: BoardsState = {\r\n  getBoards: { boards: [] },\r\n  loading: false,\r\n  error: false,\r\n};\r\n\r\nexport const boardsReducer = (state = initialState, action: BoardsAction): BoardsState => {\r\n  switch (action.type) {\r\n    case BoardsActionTypes.FETCH_BOARDS:\r\n      return { loading: true, error: false, getBoards: { boards: [] } };\r\n    case BoardsActionTypes.FETCH_BOARDS_SUCCESS:\r\n      return { loading: false, error: false, getBoards: action.payload };\r\n    case BoardsActionTypes.FETCH_BOARDS_ERROR:\r\n      return { loading: false, error: action.payload, getBoards: { boards: [] } };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { ListsAction, ListsActionTypes, ListsState } from '../types/lists';\r\n\r\nconst initialState: ListsState = {\r\n  getLists: {\r\n    title: '',\r\n    users: [],\r\n    lists: [],\r\n  },\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nexport const listsReducer = (state = initialState, action: ListsAction): ListsState => {\r\n  switch (action.type) {\r\n    case ListsActionTypes.FETCH_LISTS:\r\n      return {\r\n        loading: true,\r\n        error: null,\r\n        getLists: {\r\n          title: '',\r\n          users: [],\r\n          lists: [],\r\n        },\r\n      };\r\n    case ListsActionTypes.FETCH_LISTS_SUCCESS:\r\n      return { loading: false, error: null, getLists: action.payload };\r\n    case ListsActionTypes.FETCH_LISTS_ERROR:\r\n      return {\r\n        loading: false,\r\n        error: action.payload,\r\n        getLists: {\r\n          title: '',\r\n          users: [],\r\n          lists: [],\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { ChangeItemActions, ChangeItemActionTypes, ChangeItemState } from '../types/changeItem';\r\n\r\nconst initialState: ChangeItemState = {\r\n  changeState: false,\r\n  error: null,\r\n};\r\n\r\nexport const itemChangeReducer = (state = initialState, action: ChangeItemActions): ChangeItemState => {\r\n  switch (action.type) {\r\n    case ChangeItemActionTypes.CHANGE_ITEM_SUCCESS:\r\n      return { changeState: true, error: null };\r\n    case ChangeItemActionTypes.CHANGE_ITEM_ERROR:\r\n      return { changeState: true, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { boardsReducer } from './boardsReducer';\r\nimport { listsReducer } from './listsReducer';\r\nimport { itemChangeReducer } from './itemChangeReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n  boards: boardsReducer,\r\n  lists: listsReducer,\r\n  changeItem: itemChangeReducer,\r\n});\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n","import { applyMiddleware, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { rootReducer } from './reducers';\r\n\r\n// export const store = createStore(rootReducer, compose(applyMiddleware(thunk), composeWithDevTools()));\r\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport { store } from './store';\r\n\r\n/* import reportWebVitals from './reportWebVitals'; */\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n/* reportWebVitals(); */\r\n"],"sourceRoot":""}