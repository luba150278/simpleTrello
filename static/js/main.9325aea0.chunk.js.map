{"version":3,"sources":["common/constans/api.ts","common/constans/messages.ts","components/Alert.tsx","functions/validTitles.ts","store/types/boards.ts","store/actions/boards.ts","store/types/lists.ts","store/actions/lists.ts","store/types/addBoard.ts","store/actions/boardPost.ts","store/types/editBoard.ts","store/actions/editBoard.ts","store/types/deleteBoard.ts","store/actions/boardDelete.ts","store/types/addList.ts","store/actions/listAdd.ts","store/types/deleteList.ts","store/actions/listDelete.ts","store/actions/index.ts","hooks/useActions.ts","pages/Modal/boardCreate/BoardCreate.tsx","pages/Modal/Modal.tsx","pages/Modal/ModalPopup.styles.ts","pages/Modal/BaseModalWrapper.tsx","pages/Board/components/DeleteBoard/DeleteBoard.tsx","pages/Board/components/EditBoard/EditBoard.tsx","pages/Board/components/BoardHeader/BoardHeader.tsx","hooks/useTypeSelector.ts","pages/Board/components/AddList/AddList.tsx","pages/Board/components/Lists/Lists.tsx","pages/Board/Board.tsx","functions/cardColorGenerator.ts","pages/Home/components/boards/Boards.tsx","pages/Home/Home.tsx","App.tsx","store/reducers/boardsReducer.ts","store/reducers/listsReducer.ts","store/reducers/boardReducer.ts","store/reducers/boardEditReducer.ts","store/reducers/deleteBoardReducer.ts","store/reducers/listAddReducer.ts","store/reducers/deleteListReducer.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["process","DANGER_NAME","Alert","show","text","danger","className","role","isValidTitle","title","trim","replaceAll","length","BoardsActionTypes","ListsActionTypes","url","api","fetchBoards","dispatch","a","type","FETCH_BOARDS","axios","get","headers","Authorization","response","FETCH_BOARDS_SUCCESS","payload","data","FETCH_BOARDS_ERROR","AddBoardActionTypes","fetchLists","id","FETCH_LISTS_SUCCESS","FETCH_LISTS_ERROR","EditBoardActionTypes","addBoard","newBoard","post","ADD_BOARD_SUCCESS","e","ADD_BOARD_ERROR","DeleteBoardActionTypes","editBoard","urlEdit","put","EDIT_BOARD_SUCCESS","EDIT_BOARD_ERROR","AddListActionTypes","deleteBoard","delete","DELETE_BOARD_SUCCESS","DELETE_BOARD_ERROR","DeleteListActionTypes","addList","newList","ADD_LIST_SUCCESS","ADD_LIST_ERROR","deleteList","DELETE_LIST_SUCCESS","DELETE_LIST_ERROR","BoardsActionCreators","ListsActionCreators","BoardActionCreators","BoardEditActionCreators","BoardDeleteActionCreators","ListAddActionCreators","ListDeleteActionCreators","useActions","useDispatch","bindActionCreators","ActionCreators","BoardCreate","startTitle","isCreate","useState","setTitle","isAlert","setAlert","isDanger","setDanger","textAlert","setTextAlert","setUpAlert","alrt","dang","setTimeout","onChange","event","target","value","placeholder","onClick","Overlay","styled","div","Modal","onBackDropClick","children","ReactDOM","createPortal","stopPropagation","document","getElementById","ModalContainer","DesktopModalContainer","Header","h3","Close","BaseModalWrapper","isModalVisible","DeleteBoard","history","useHistory","push","EditBoard","setModalVisible","wasModalVisible","BoardHeader","to","useTypeSelector","useSelector","AddList","countLists","boardID","position","Lists","changeHandler","console","log","state","lists","getLists","error","loading","useEffect","arrLenght","Object","keys","map","list","Number","cards","idCard","card","Provider","Board","match","params","colorGenerator","min","max","colors","Array","i","Math","floor","random","getRandomFloat","Boards","boards","getBoards","board","style","background","Main","toggleModal","App","component","Home","path","exact","initialState","users","added","edited","deleted","rootReducer","combineReducers","action","FETCH_LISTS","boardAdd","boardEdit","boardDelete","listAdd","listDelete","store","createStore","composeWithDevTools","applyMiddleware","thunk","render"],"mappings":"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","file":"static/js/main.9325aea0.chunk.js","sourcesContent":["export default {\r\n  baseURL: process.env.REACT_APP_API_URL || '',\r\n};\r\n","export const DANGER_NAME =\r\n  'The value is empty or contains errors. Allowed characters: letters, numbers, spaces, dashes, dots, underscores.';\r\nexport const SUCCESS_BOARD_NAME = 'New board was created successfully!';\r\nexport const SUCCESS_BOARD_NAME_EDIT = 'Board title was edited successfully!';\r\nexport const SUCCESS_LIST_NAME = 'New list was created successfully!';\r\nexport const SUCCESS_LIST_NAME_EDIT = 'Board list was edited successfully!';\r\n","import React from 'react';\r\n\r\ntype AlertType = {\r\n  show: boolean;\r\n  text: string;\r\n  danger: boolean;\r\n};\r\nexport const Alert: React.FC<AlertType> = ({ show, text, danger }) =>\r\n  show ? (\r\n    <div className={danger ? 'alert alert-danger' : 'alert alert-success'} role=\"alert\">\r\n      {text}\r\n    </div>\r\n  ) : (\r\n    <></>\r\n  );\r\n","export function isValidTitle(title: string): boolean {\r\n  const newStr = title.trim().replaceAll(/[а-яА-ЯёЁ]|[a-zA-z]|[0-9]|\\s|,|-|_|\\.+/gm, '');\r\n  return newStr.length === 0 && title !== '';\r\n}\r\n","import { IBoards } from '../../interfaces/inrefaces';\r\n\r\nexport interface BoardsState {\r\n  getBoards: IBoards;\r\n  loading: boolean;\r\n  error: null | string;\r\n}\r\nexport enum BoardsActionTypes {\r\n  FETCH_BOARDS = 'FETCH_BOARDS',\r\n  FETCH_BOARDS_SUCCESS = 'FETCH_BOARDS_SUCCESS',\r\n  FETCH_BOARDS_ERROR = 'FETCH_BOARDS_ERROR',\r\n}\r\n\r\ninterface FetchBoardsAction {\r\n  type: BoardsActionTypes.FETCH_BOARDS;\r\n}\r\ninterface FetchBoardsSuccessAction {\r\n  type: BoardsActionTypes.FETCH_BOARDS_SUCCESS;\r\n  payload: IBoards;\r\n}\r\ninterface FetchBoardsErrorAction {\r\n  type: BoardsActionTypes.FETCH_BOARDS_ERROR;\r\n  payload: string;\r\n}\r\nexport type BoardsAction = FetchBoardsAction | FetchBoardsSuccessAction | FetchBoardsErrorAction;\r\n","import axios from 'axios';\r\nimport { Dispatch } from 'redux';\r\nimport api from '../../common/constans/api';\r\nimport { BoardsAction, BoardsActionTypes } from '../types/boards';\r\n\r\nconst url = `${api.baseURL}/board`;\r\nexport const fetchBoards = () => async (dispatch: Dispatch<BoardsAction>): Promise<void> => {\r\n  try {\r\n    dispatch({ type: BoardsActionTypes.FETCH_BOARDS });\r\n    const response = await axios.get(url, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: 'Bearer 123',\r\n      },\r\n    });\r\n    dispatch({ type: BoardsActionTypes.FETCH_BOARDS_SUCCESS, payload: response.data });\r\n  } catch (e) {\r\n    dispatch({ type: BoardsActionTypes.FETCH_BOARDS_ERROR, payload: \"Error. Boards info don't load\" });\r\n  }\r\n};\r\n","import { ILists } from '../../interfaces/inrefaces';\r\n\r\nexport interface ListsState {\r\n  getLists: ILists;\r\n  loading: boolean;\r\n  error: null | string;\r\n}\r\nexport enum ListsActionTypes {\r\n  FETCH_LISTS = 'FETCH_LISTS',\r\n  FETCH_LISTS_SUCCESS = 'FETCH_LISTS_SUCCESS',\r\n  FETCH_LISTS_ERROR = 'FETCH_LISTS_ERROR',\r\n}\r\n\r\ninterface FetchListsAction {\r\n  type: ListsActionTypes.FETCH_LISTS;\r\n}\r\ninterface FetchListsSuccessAction {\r\n  type: ListsActionTypes.FETCH_LISTS_SUCCESS;\r\n  payload: ILists;\r\n}\r\ninterface FetchListsErrorAction {\r\n  type: ListsActionTypes.FETCH_LISTS_ERROR;\r\n  payload: string;\r\n}\r\nexport type ListsAction = FetchListsAction | FetchListsSuccessAction | FetchListsErrorAction;\r\n","/* eslint-disable no-console */\r\nimport axios from 'axios';\r\nimport { Dispatch } from 'redux';\r\nimport api from '../../common/constans/api';\r\nimport { ListsAction, ListsActionTypes } from '../types/lists';\r\n\r\nexport const fetchLists = (id: string) => async (dispatch: Dispatch<ListsAction>): Promise<void> => {\r\n  const url = `${api.baseURL}/board/${id}`;\r\n  try {\r\n    // dispatch({ type: ListsActionTypes.FETCH_LISTS });\r\n    const response = await axios.get(url, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: 'Bearer 123',\r\n      },\r\n    });\r\n    dispatch({ type: ListsActionTypes.FETCH_LISTS_SUCCESS, payload: response.data });\r\n  } catch (e) {\r\n    dispatch({ type: ListsActionTypes.FETCH_LISTS_ERROR, payload: \"Error. Boards info didn't load\" });\r\n  }\r\n};\r\n","export enum AddBoardActionTypes {\r\n  /* ADD_BOARD = 'ADD_BOARD', */\r\n  ADD_BOARD_SUCCESS = 'ADD_BOARD_SUCCESS',\r\n  ADD_BOARD_ERROR = 'ADD_BOARD_ERROR',\r\n}\r\n\r\nexport interface AddBoardState {\r\n  added: boolean;\r\n  error: null | string;\r\n}\r\ninterface AddBoardSuccessAction {\r\n  type: AddBoardActionTypes.ADD_BOARD_SUCCESS;\r\n  payload: boolean;\r\n}\r\ninterface AddBoardErrorAction {\r\n  type: AddBoardActionTypes.ADD_BOARD_ERROR;\r\n  payload: string;\r\n}\r\nexport type AddBoardActions = AddBoardSuccessAction | AddBoardErrorAction;\r\n","import axios from 'axios';\r\nimport { Dispatch } from 'redux';\r\nimport api from '../../common/constans/api';\r\nimport { AddBoardActions, AddBoardActionTypes } from '../types/addBoard';\r\n\r\ntype ITitle = {\r\n  title: string;\r\n};\r\nconst url = `${api.baseURL}/board`;\r\nexport const addBoard = (newBoard: ITitle) => async (dispatch: Dispatch<AddBoardActions>): Promise<void> => {\r\n  try {\r\n    /* dispatch({ type: AddBoardActionTypes.ADD_BOARD, payload: false }); */\r\n    axios.post(url, newBoard, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: 'Bearer 123',\r\n      },\r\n    });\r\n    dispatch({ type: AddBoardActionTypes.ADD_BOARD_SUCCESS, payload: true });\r\n  } catch (e) {\r\n    dispatch({ type: AddBoardActionTypes.ADD_BOARD_ERROR, payload: \"Error. Boards info don't load\" });\r\n  }\r\n};\r\n","export enum EditBoardActionTypes {\r\n  /* ADD_BOARD = 'ADD_BOARD', */\r\n  EDIT_BOARD_SUCCESS = 'EDIT_BOARD_SUCCESS',\r\n  EDIT_BOARD_ERROR = 'EDIT_BOARD_ERROR',\r\n}\r\n\r\nexport interface EditBoardState {\r\n  edited: boolean;\r\n  error: null | string;\r\n}\r\ninterface EditBoardSuccessAction {\r\n  type: EditBoardActionTypes.EDIT_BOARD_SUCCESS;\r\n  payload: boolean;\r\n}\r\ninterface EditBoardErrorAction {\r\n  type: EditBoardActionTypes.EDIT_BOARD_ERROR;\r\n  payload: string;\r\n}\r\nexport type EditBoardActions = EditBoardSuccessAction | EditBoardErrorAction;\r\n","import axios from 'axios';\r\nimport { Dispatch } from 'redux';\r\nimport { EditBoardActions, EditBoardActionTypes } from '../types/editBoard';\r\n\r\ntype ITitle = {\r\n  title: string;\r\n};\r\n\r\nexport const editBoard = (newBoard: ITitle, urlEdit: string) => async (\r\n  dispatch: Dispatch<EditBoardActions>\r\n): Promise<void> => {\r\n  try {\r\n    /* dispatch({ type: AddBoardActionTypes.ADD_BOARD, payload: false }); */\r\n    axios.put(urlEdit, newBoard, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: 'Bearer 123',\r\n      },\r\n    });\r\n    dispatch({ type: EditBoardActionTypes.EDIT_BOARD_SUCCESS, payload: true });\r\n  } catch (e) {\r\n    dispatch({ type: EditBoardActionTypes.EDIT_BOARD_ERROR, payload: \"Error. Boards info don't load\" });\r\n  }\r\n};\r\n","export enum DeleteBoardActionTypes {\r\n  /* ADD_BOARD = 'ADD_BOARD', */\r\n  DELETE_BOARD_SUCCESS = 'DELETE_BOARD_SUCCESS',\r\n  DELETE_BOARD_ERROR = 'DELETE_BOARD_ERROR',\r\n}\r\n\r\nexport interface DeleteBoardState {\r\n  deleted: boolean;\r\n  error: null | string;\r\n}\r\ninterface DeleteBoardSuccessAction {\r\n  type: DeleteBoardActionTypes.DELETE_BOARD_SUCCESS;\r\n  payload: boolean;\r\n}\r\ninterface DeleteBoardErrorAction {\r\n  type: DeleteBoardActionTypes.DELETE_BOARD_ERROR;\r\n  payload: string;\r\n}\r\nexport type DeleteBoardActions = DeleteBoardSuccessAction | DeleteBoardErrorAction;\r\n","import axios from 'axios';\r\nimport { Dispatch } from 'redux';\r\nimport { DeleteBoardActions, DeleteBoardActionTypes } from '../types/deleteBoard';\r\n\r\nexport const deleteBoard = (url: string) => async (dispatch: Dispatch<DeleteBoardActions>): Promise<void> => {\r\n  try {\r\n    /* dispatch({ type: DeleteBoardActionTypes.Delete_BOARD, payload: false }); */\r\n    axios.delete(url, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: 'Bearer 123',\r\n      },\r\n    });\r\n    dispatch({ type: DeleteBoardActionTypes.DELETE_BOARD_SUCCESS, payload: true });\r\n  } catch (e) {\r\n    dispatch({ type: DeleteBoardActionTypes.DELETE_BOARD_ERROR, payload: \"Error. Boards info don't load\" });\r\n  }\r\n};\r\n","export enum AddListActionTypes {\r\n  /* ADD_LIST = 'ADD_LIST', */\r\n  ADD_LIST_SUCCESS = 'ADD_LIST_SUCCESS',\r\n  ADD_LIST_ERROR = 'ADD_LIST_ERROR',\r\n}\r\n\r\nexport interface AddListState {\r\n  added: boolean;\r\n  error: null | string;\r\n}\r\ninterface AddListSuccessAction {\r\n  type: AddListActionTypes.ADD_LIST_SUCCESS;\r\n  payload: boolean;\r\n}\r\ninterface AddListErrorAction {\r\n  type: AddListActionTypes.ADD_LIST_ERROR;\r\n  payload: string;\r\n}\r\nexport type AddListActions = AddListSuccessAction | AddListErrorAction;\r\n","import axios from 'axios';\r\nimport { Dispatch } from 'redux';\r\nimport { AddListActions, AddListActionTypes } from '../types/addList';\r\n\r\ntype ITitle = {\r\n  title: string;\r\n};\r\n\r\nexport const addList = (url: string, newList: ITitle) => async (dispatch: Dispatch<AddListActions>): Promise<void> => {\r\n  try {\r\n    /* dispatch({ type: AddListActionTypes.ADD_List, payload: false }); */\r\n    axios.post(url, newList, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: 'Bearer 123',\r\n      },\r\n    });\r\n    dispatch({ type: AddListActionTypes.ADD_LIST_SUCCESS, payload: true });\r\n  } catch (e) {\r\n    dispatch({ type: AddListActionTypes.ADD_LIST_ERROR, payload: \"Error. Lists info don't load\" });\r\n  }\r\n};\r\n","export enum DeleteListActionTypes {\r\n  DELETE_LIST_SUCCESS = 'DELETE_List_SUCCESS',\r\n  DELETE_LIST_ERROR = 'DELETE_List_ERROR',\r\n}\r\n\r\nexport interface DeleteListState {\r\n  deleted: boolean;\r\n  error: null | string;\r\n}\r\ninterface DeleteListSuccessAction {\r\n  type: DeleteListActionTypes.DELETE_LIST_SUCCESS;\r\n  payload: boolean;\r\n}\r\ninterface DeleteListErrorAction {\r\n  type: DeleteListActionTypes.DELETE_LIST_ERROR;\r\n  payload: string;\r\n}\r\nexport type DeleteListActions = DeleteListSuccessAction | DeleteListErrorAction;\r\n","import axios from 'axios';\r\nimport { Dispatch } from 'redux';\r\nimport { DeleteListActions, DeleteListActionTypes } from '../types/deleteList';\r\n\r\nexport const deleteList = (url: string) => async (dispatch: Dispatch<DeleteListActions>): Promise<void> => {\r\n  try {\r\n    /* dispatch({ type: DeleteListActionTypes.Delete_List, payload: false }); */\r\n    axios.delete(url, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: 'Bearer 123',\r\n      },\r\n    });\r\n    dispatch({ type: DeleteListActionTypes.DELETE_LIST_SUCCESS, payload: true });\r\n  } catch (e) {\r\n    dispatch({ type: DeleteListActionTypes.DELETE_LIST_ERROR, payload: \"Error. Lists info don't load\" });\r\n  }\r\n};\r\n","import * as BoardsActionCreators from './boards';\r\nimport * as ListsActionCreators from './lists';\r\nimport * as BoardActionCreators from './boardPost';\r\nimport * as BoardEditActionCreators from './editBoard';\r\nimport * as BoardDeleteActionCreators from './boardDelete';\r\nimport * as ListAddActionCreators from './listAdd';\r\nimport * as ListDeleteActionCreators from './listDelete';\r\n\r\nexport default {\r\n  ...BoardsActionCreators,\r\n  ...ListsActionCreators,\r\n  ...BoardActionCreators,\r\n  ...BoardEditActionCreators,\r\n  ...BoardDeleteActionCreators,\r\n  ...ListAddActionCreators,\r\n  ...ListDeleteActionCreators,\r\n};\r\n","/* eslint-disable @typescript-eslint/explicit-function-return-type */\r\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\nimport { useDispatch } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport ActionCreators from '../store/actions';\r\n\r\nexport const useActions = () => {\r\n  const dispatch = useDispatch();\r\n  return bindActionCreators(ActionCreators, dispatch);\r\n};\r\n","/* eslint-disable no-console */\r\nimport React, { useState } from 'react';\r\nimport { DANGER_NAME, SUCCESS_BOARD_NAME, SUCCESS_BOARD_NAME_EDIT } from '../../../common/constans/messages';\r\nimport { Alert } from '../../../components/Alert';\r\nimport { isValidTitle } from '../../../functions/validTitles';\r\nimport { useActions } from '../../../hooks/useActions';\r\nimport './boardCreate.css';\r\n\r\ntype ITitle = {\r\n  title: string;\r\n};\r\n\r\ntype IProps = {\r\n  startTitle: string;\r\n  isCreate: boolean;\r\n  urlEdit: string;\r\n};\r\nconst BoardCreate: React.FC<IProps> = ({ startTitle, isCreate, urlEdit }) => {\r\n  const [title, setTitle] = useState<string>(startTitle);\r\n  const [isAlert, setAlert] = useState<boolean>(false);\r\n  const [isDanger, setDanger] = useState<boolean>(false);\r\n  const [textAlert, setTextAlert] = useState<string>('');\r\n  const newBoard: ITitle = { title };\r\n  const changeHandler = (event: React.ChangeEvent<HTMLInputElement>): void => setTitle(event.target.value);\r\n  const { addBoard } = useActions();\r\n  const { editBoard } = useActions();\r\n  const { fetchBoards } = useActions();\r\n\r\n  function setUpAlert(alrt: boolean, dang: boolean, text: string): void {\r\n    setAlert(alrt);\r\n    setDanger(dang);\r\n    setTextAlert(text);\r\n    setTimeout(() => {\r\n      setTitle('');\r\n      setAlert(false);\r\n    }, 5000);\r\n  }\r\n  return (\r\n    <div className=\"container\">\r\n      <Alert show={isAlert} text={textAlert} danger={isDanger} />\r\n      <div className=\"fields mb-4\">\r\n        <div className=\"field mr-4\">\r\n          <input onChange={changeHandler} value={title} type=\"text\" id=\"title\" placeholder=\"Enter board name\" />\r\n        </div>\r\n      </div>\r\n      <button\r\n        className=\"btn btn-success mr-2 btn-new-board\"\r\n        onClick={(): void => {\r\n          if (isValidTitle(title)) {\r\n            if (isCreate) {\r\n              addBoard(newBoard);\r\n            } else {\r\n              editBoard(newBoard, urlEdit);\r\n            }\r\n            fetchBoards();\r\n            setUpAlert(true, false, isCreate ? SUCCESS_BOARD_NAME : SUCCESS_BOARD_NAME_EDIT);\r\n          } else {\r\n            setUpAlert(true, true, DANGER_NAME);\r\n          }\r\n        }}\r\n      >\r\n        {isCreate ? 'Add board' : 'Edit board'}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BoardCreate;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport styled from 'styled-components';\r\n\r\ninterface ModalProps {\r\n  onBackDropClick: () => void;\r\n}\r\n\r\nconst Overlay = styled.div`\r\n  background-color: rgba(0, 0, 0, 0.7);\r\n  position: fixed;\r\n  height: 100%;\r\n  width: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst Modal: React.FC<ModalProps> = ({ onBackDropClick, children }) =>\r\n  ReactDOM.createPortal(\r\n    <Overlay onClick={onBackDropClick}>\r\n      <div onClick={(e): void => e.stopPropagation()}>{children}</div>\r\n    </Overlay>,\r\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n    document.getElementById('modal-root')!\r\n  );\r\n\r\nexport default Modal;\r\n","import styled from 'styled-components';\r\n\r\nconst ModalContainer = styled.div`\r\n  background-color: #ffffff;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  position: relative;\r\n`;\r\nexport const DesktopModalContainer = styled(ModalContainer)`\r\n  border-radius: 7px;\r\n  box-shadow: 0 0 32px rgba(0, 0, 0, 0.5);\r\n  padding: 40px;\r\n  width: 450px;\r\n  font-size: 26px;\r\n`;\r\nexport const Header = styled.h3`\r\n  color: #25306c;\r\n  font-size: 35px;\r\n  line-height: 1em;\r\n  font-weight: bold;\r\n  margin: 5px 0 10px;\r\n  text-align: center;\r\n`;\r\n\r\nexport const Close = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 80%;\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport BoardCreate from './boardCreate/BoardCreate';\r\nimport Modal from './Modal';\r\nimport { Close, DesktopModalContainer, Header } from './ModalPopup.styles';\r\n\r\ninterface BaseModalWrapperProps {\r\n  isModalVisible: boolean;\r\n  onBackDropClick: () => void;\r\n  startTitle: string;\r\n  isCreate: boolean;\r\n  urlEdit: string;\r\n}\r\n\r\nconst BaseModalWrapper: React.FC<BaseModalWrapperProps> = ({\r\n  isModalVisible,\r\n  onBackDropClick,\r\n  startTitle,\r\n  isCreate,\r\n  urlEdit,\r\n}) => {\r\n  if (!isModalVisible) {\r\n    return null;\r\n  }\r\n  return (\r\n    <Modal onBackDropClick={onBackDropClick}>\r\n      <DesktopModalContainer>\r\n        <Close onClick={(): void => onBackDropClick()}>x</Close>\r\n        <Header>{isCreate ? 'Add new board' : 'Edit board title'}</Header>\r\n        <BoardCreate startTitle={startTitle} isCreate={isCreate} urlEdit={urlEdit} />\r\n      </DesktopModalContainer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default BaseModalWrapper;\r\n","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useActions } from '../../../../hooks/useActions';\r\n\r\ntype IUrl = {\r\n  url: string;\r\n};\r\n\r\nconst DeleteBoard: React.FC<IUrl> = ({ url }) => {\r\n  const history = useHistory();\r\n  const { deleteBoard } = useActions();\r\n  return (\r\n    <button\r\n      className=\"btn btn-danger deleteBoard ml-4\"\r\n      onClick={(): void => {\r\n        deleteBoard(url);\r\n        history.push('/');\r\n      }}\r\n    >\r\n      Delete\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default DeleteBoard;\r\n","import React, { useState } from 'react';\r\n\r\nconst EditBoard: React.FC = () => {\r\n  const [, setModalVisible] = useState(false);\r\n  const toggleModal = (): void => {\r\n    setModalVisible((wasModalVisible) => !wasModalVisible);\r\n  };\r\n  return (\r\n    <button className=\"btn btn-success editBoard ml-4\" onClick={toggleModal}>\r\n      Edit\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default EditBoard;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport DeleteBoard from '../DeleteBoard/DeleteBoard';\r\nimport EditBoard from '../EditBoard/EditBoard';\r\n\r\ntype IData = {\r\n  url: string;\r\n  id: string;\r\n};\r\n\r\nconst BoardHeader: React.FC<IData> = ({ url, id }) => (\r\n  <div className=\"board-header container my-4\">\r\n    <Link to=\"/\">Home</Link>\r\n    <div className=\"board-header-title\">\r\n      <h1>Boards Number: {id}</h1>\r\n      <EditBoard />\r\n      <DeleteBoard url={url} />\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default BoardHeader;\r\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\r\nimport { RootState } from '../store/reducers';\r\n\r\nexport const useTypeSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","/* eslint-disable no-console */\r\nimport React, { useState } from 'react';\r\nimport { DANGER_NAME, SUCCESS_LIST_NAME } from '../../../../common/constans/messages';\r\nimport { Alert } from '../../../../components/Alert';\r\nimport { isValidTitle } from '../../../../functions/validTitles';\r\nimport { useActions } from '../../../../hooks/useActions';\r\nimport './addList.css';\r\n\r\ntype Props = {\r\n  url: string;\r\n  countLists: number;\r\n  boardID: string;\r\n};\r\n\r\nconst AddList: React.FC<Props> = ({ url, countLists, boardID }) => {\r\n  const [title, setTitle] = useState<string>('');\r\n  const [isAlert, setAlert] = useState<boolean>(false);\r\n  const [isDanger, setDanger] = useState<boolean>(false);\r\n  const [textAlert, setTextAlert] = useState<string>('');\r\n  const changeHandler = (event: React.ChangeEvent<HTMLInputElement>): void => setTitle(event.target.value);\r\n  const { addList } = useActions();\r\n  const { fetchLists } = useActions();\r\n\r\n  function setUpAlert(alrt: boolean, dang: boolean, text: string): void {\r\n    setAlert(alrt);\r\n    setDanger(dang);\r\n    setTextAlert(text);\r\n    setTimeout(() => {\r\n      setTitle('');\r\n      setAlert(false);\r\n    }, 5000);\r\n  }\r\n\r\n  return (\r\n    <div className=\"list-input-outside\">\r\n      <Alert show={isAlert} text={textAlert} danger={isDanger} />\r\n      <div className=\"list-input mt-2\">\r\n        <input type=\"text\" id=\"addList\" placeholder=\"Enter list name\" onChange={changeHandler} value={title} />\r\n        <button\r\n          className=\"btn btn-primary ml-2\"\r\n          onClick={(): void => {\r\n            if (isValidTitle(title)) {\r\n              const newList = { title, position: countLists + 1 };\r\n              addList(`${url}/list`, newList);\r\n              fetchLists(boardID);\r\n              setUpAlert(true, false, SUCCESS_LIST_NAME);\r\n            } else {\r\n              setUpAlert(true, true, DANGER_NAME);\r\n            }\r\n          }}\r\n        >\r\n          Add List\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddList;\r\n","/* eslint-disable no-console */\r\nimport React, { useEffect } from 'react';\r\nimport { IconContext } from 'react-icons';\r\nimport { FaTrashAlt } from 'react-icons/fa';\r\nimport { useActions } from '../../../../hooks/useActions';\r\nimport { useTypeSelector } from '../../../../hooks/useTypeSelector';\r\nimport AddList from '../AddList/AddList';\r\nimport './lists.css';\r\n\r\ntype Props = {\r\n  url: string;\r\n  boardID: string;\r\n};\r\n\r\nconst Lists: React.FC<Props> = ({ url, boardID }) => {\r\n  // const [title, setTitle] = useState<string>('');\r\n  const changeHandler = (event: React.ChangeEvent<HTMLInputElement>): void => console.log(event.target.value);\r\n  const { getLists, error, loading } = useTypeSelector((state) => state.lists);\r\n  const { deleteList } = useActions();\r\n  const { fetchLists } = useActions();\r\n  useEffect(() => {\r\n    fetchLists(boardID);\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <h2>Loading...</h2>;\r\n  }\r\n\r\n  if (error) {\r\n    return <h2>{error}</h2>;\r\n  }\r\n  const arr = Object.keys(getLists.lists);\r\n  const arrLenght = arr.length;\r\n  const lists =\r\n    arrLenght !== 0 ? (\r\n      Object.keys(getLists.lists).map((id) => {\r\n        const list = getLists.lists[Number(id)];\r\n        // setTitle(list.title);\r\n        const cards = Object.keys(list.cards).map((idCard) => {\r\n          const card = getLists.lists[Number(idCard)];\r\n          return (\r\n            <li key={card.id} className=\"card list-item\">\r\n              {card.title}\r\n            </li>\r\n          );\r\n        });\r\n\r\n        return (\r\n          <div className=\"card list\" key={list.id}>\r\n            <div className=\"icon__inner\">\r\n              <IconContext.Provider value={{ className: 'trash-list' }}>\r\n                <FaTrashAlt\r\n                  onClick={(): void => {\r\n                    deleteList(`${url}/list/${id}`);\r\n                    fetchLists(boardID);\r\n                  }}\r\n                />\r\n              </IconContext.Provider>\r\n            </div>\r\n            <input\r\n              type=\"text\"\r\n              className=\"listTitle\"\r\n              placeholder={list.title}\r\n              value={list.title}\r\n              onChange={changeHandler}\r\n            />\r\n            <ul className=\"list-items\">{cards}</ul>\r\n          </div>\r\n        );\r\n      })\r\n    ) : (\r\n      <h2>Any lists yet. Create your first list!</h2>\r\n    );\r\n\r\n  return (\r\n    <div className=\"lists-main\">\r\n      <div className=\"input-row mb-4\">\r\n        <AddList url={url} countLists={arrLenght} boardID={boardID} />\r\n        <div className=\"count-lists\">Всего списков: {arrLenght}</div>\r\n      </div>\r\n      <div className=\"cards\">{lists}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Lists;\r\n","/* eslint-disable no-console */\r\nimport React, { useState } from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport api from '../../common/constans/api';\r\nimport BaseModalWrapper from '../Modal/BaseModalWrapper';\r\nimport './board.css';\r\nimport BoardHeader from './components/BoardHeader/BoardHeader';\r\nimport Lists from './components/Lists/Lists';\r\n\r\ntype TParams = { id: string };\r\n\r\nconst Board: React.FC<RouteComponentProps<TParams>> = ({ match }) => {\r\n  const url = `${api.baseURL}/board/${match.params.id}`;\r\n  const [isModalVisible, setModalVisible] = useState(false);\r\n  const toggleModal = (): void => {\r\n    setModalVisible((wasModalVisible) => !wasModalVisible);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <BoardHeader url={url} id={match.params.id} />\r\n      <Lists url={url} boardID={match.params.id} />\r\n      <BaseModalWrapper\r\n        isModalVisible={isModalVisible}\r\n        onBackDropClick={toggleModal}\r\n        startTitle=\"\"\r\n        isCreate={false}\r\n        urlEdit={url}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","const LOWER_COLOR = 100;\r\nconst UPPER_COLOR = 255;\r\nconst LOWER_OPACITY = 0.3;\r\nconst UPPER_OPACITY = 0.8;\r\n\r\nfunction getRandomFloat(min: number, max: number): number {\r\n  return Math.random() * (max - min) + min;\r\n}\r\n\r\nfunction getRandomInRange(min: number, max: number): number {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport function colorGenerator(): string {\r\n  const colors: number[] = new Array(3);\r\n  for (let i = 0; i < 3; i++) {\r\n    colors[i] = getRandomInRange(LOWER_COLOR, UPPER_COLOR);\r\n  }\r\n  const a = getRandomFloat(LOWER_OPACITY, UPPER_OPACITY);\r\n\r\n  return `rgba(${colors[0]}, ${colors[1]}, ${colors[2]}, ${a})`;\r\n}\r\n","/* eslint-disable no-console */\r\nimport React, { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { colorGenerator } from '../../../../functions/cardColorGenerator';\r\nimport { useActions } from '../../../../hooks/useActions';\r\nimport { useTypeSelector } from '../../../../hooks/useTypeSelector';\r\nimport './boards.css';\r\n\r\nconst Boards: React.FC = () => {\r\n  const { getBoards, error, loading } = useTypeSelector((state) => state.boards);\r\n  const { fetchBoards } = useActions();\r\n  useEffect(() => {\r\n    fetchBoards();\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <h2>Loading...</h2>;\r\n  }\r\n\r\n  if (error) {\r\n    return <h2>{error}</h2>;\r\n  }\r\n\r\n  if (getBoards.boards.length > 0) {\r\n    return (\r\n      <div>\r\n        <div className=\"row boards-row\">\r\n          {getBoards.boards.map((board) => (\r\n            <Link\r\n              to={`/board/${board.id}`}\r\n              key={board.id}\r\n              className=\"card col-md-3 mx-2\"\r\n              style={{ background: `${colorGenerator()}` }}\r\n            >\r\n              {board.title}\r\n            </Link>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Boards</h1>\r\n      <h2>Boards wasn't create</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Boards;\r\n","import React, { useState } from 'react';\r\nimport BaseModalWrapper from '../Modal/BaseModalWrapper';\r\nimport Boards from './components/boards/Boards';\r\n\r\nconst Main: React.FC = () => {\r\n  const [isModalVisible, setModalVisible] = useState(false);\r\n  const toggleModal = (): void => {\r\n    setModalVisible((wasModalVisible) => !wasModalVisible);\r\n  };\r\n  return (\r\n    <section>\r\n      <div className=\"container my-4\">\r\n        <button className=\"btn btn-outline-primary\" onClick={toggleModal}>\r\n          Add Board\r\n        </button>\r\n      </div>\r\n      <div className=\"container\">\r\n        <h1>Boards</h1>\r\n        <p>This is a training React-project. An analogue of the \"Trello\" service.</p>\r\n        <Boards />\r\n      </div>\r\n      <BaseModalWrapper\r\n        isModalVisible={isModalVisible}\r\n        onBackDropClick={toggleModal}\r\n        startTitle=\"\"\r\n        isCreate\r\n        urlEdit=\"\"\r\n      />\r\n    </section>\r\n  );\r\n};\r\nexport default Main;\r\n","import React from 'react';\r\nimport { Switch, Route, Redirect, BrowserRouter } from 'react-router-dom';\r\nimport './App.css';\r\nimport Board from './pages/Board/Board';\r\nimport Home from './pages/Home/Home';\r\n\r\nconst App: React.FC = () => (\r\n  <BrowserRouter>\r\n    <div className=\"container\">\r\n      <Switch>\r\n        <Route component={Home} path=\"/\" exact />\r\n        <Route component={Board} path=\"/board/:id\" />\r\n        <Redirect exact to=\"/\" />\r\n      </Switch>\r\n    </div>\r\n  </BrowserRouter>\r\n);\r\n\r\nexport default App;\r\n","import { BoardsAction, BoardsActionTypes, BoardsState } from '../types/boards';\r\n\r\nconst initialState: BoardsState = {\r\n  getBoards: { boards: [{ id: 1, title: '' }] },\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nexport const boardsReducer = (state = initialState, action: BoardsAction): BoardsState => {\r\n  switch (action.type) {\r\n    case BoardsActionTypes.FETCH_BOARDS:\r\n      return { loading: true, error: null, getBoards: { boards: [{ id: 1, title: '' }] } };\r\n    case BoardsActionTypes.FETCH_BOARDS_SUCCESS:\r\n      return { loading: false, error: null, getBoards: action.payload };\r\n    case BoardsActionTypes.FETCH_BOARDS_ERROR:\r\n      return { loading: false, error: action.payload, getBoards: { boards: [{ id: 1, title: '' }] } };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { ListsAction, ListsActionTypes, ListsState } from '../types/lists';\r\n\r\nconst initialState: ListsState = {\r\n  getLists: {\r\n    users: [],\r\n    lists: [],\r\n  },\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nexport const listsReducer = (state = initialState, action: ListsAction): ListsState => {\r\n  switch (action.type) {\r\n    case ListsActionTypes.FETCH_LISTS:\r\n      return {\r\n        loading: true,\r\n        error: null,\r\n        getLists: {\r\n          users: [],\r\n          lists: [],\r\n        },\r\n      };\r\n    case ListsActionTypes.FETCH_LISTS_SUCCESS:\r\n      return { loading: false, error: null, getLists: action.payload };\r\n    case ListsActionTypes.FETCH_LISTS_ERROR:\r\n      return {\r\n        loading: false,\r\n        error: action.payload,\r\n        getLists: {\r\n          users: [],\r\n          lists: [],\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { AddBoardActions, AddBoardActionTypes, AddBoardState } from '../types/addBoard';\r\n\r\nconst initialState: AddBoardState = {\r\n  added: true,\r\n  error: null,\r\n};\r\n\r\nexport const boardReducer = (state = initialState, action: AddBoardActions): AddBoardState => {\r\n  switch (action.type) {\r\n    case AddBoardActionTypes.ADD_BOARD_SUCCESS:\r\n      return { added: true, error: null };\r\n    case AddBoardActionTypes.ADD_BOARD_ERROR:\r\n      return { added: false, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { EditBoardActions, EditBoardActionTypes, EditBoardState } from '../types/editBoard';\r\n\r\nconst initialState: EditBoardState = {\r\n  edited: true,\r\n  error: null,\r\n};\r\n\r\nexport const boardEditReducer = (state = initialState, action: EditBoardActions): EditBoardState => {\r\n  switch (action.type) {\r\n    case EditBoardActionTypes.EDIT_BOARD_SUCCESS:\r\n      return { edited: true, error: null };\r\n    case EditBoardActionTypes.EDIT_BOARD_ERROR:\r\n      return { edited: false, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { DeleteBoardActions, DeleteBoardActionTypes, DeleteBoardState } from '../types/deleteBoard';\r\n\r\nconst initialState: DeleteBoardState = {\r\n  deleted: true,\r\n  error: null,\r\n};\r\n\r\nexport const deleteBoardReducer = (state = initialState, action: DeleteBoardActions): DeleteBoardState => {\r\n  switch (action.type) {\r\n    case DeleteBoardActionTypes.DELETE_BOARD_SUCCESS:\r\n      return { deleted: true, error: null };\r\n    case DeleteBoardActionTypes.DELETE_BOARD_ERROR:\r\n      return { deleted: false, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { AddListActions, AddListActionTypes, AddListState } from '../types/addList';\r\n\r\nconst initialState: AddListState = {\r\n  added: true,\r\n  error: null,\r\n};\r\n\r\nexport const listAddReducer = (state = initialState, action: AddListActions): AddListState => {\r\n  switch (action.type) {\r\n    case AddListActionTypes.ADD_LIST_SUCCESS:\r\n      return { added: true, error: null };\r\n    case AddListActionTypes.ADD_LIST_ERROR:\r\n      return { added: false, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { DeleteListActions, DeleteListActionTypes, DeleteListState } from '../types/deleteList';\r\n\r\nconst initialState: DeleteListState = {\r\n  deleted: true,\r\n  error: null,\r\n};\r\n\r\nexport const deleteListReducer = (state = initialState, action: DeleteListActions): DeleteListState => {\r\n  switch (action.type) {\r\n    case DeleteListActionTypes.DELETE_LIST_SUCCESS:\r\n      return { deleted: true, error: null };\r\n    case DeleteListActionTypes.DELETE_LIST_ERROR:\r\n      return { deleted: false, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { boardsReducer } from './boardsReducer';\r\nimport { listsReducer } from './listsReducer';\r\nimport { boardReducer } from './boardReducer';\r\nimport { boardEditReducer } from './boardEditReducer';\r\nimport { deleteBoardReducer } from './deleteBoardReducer';\r\nimport { listAddReducer } from './listAddReducer';\r\nimport { deleteListReducer } from './deleteListReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n  boards: boardsReducer,\r\n  lists: listsReducer,\r\n  boardAdd: boardReducer,\r\n  boardEdit: boardEditReducer,\r\n  boardDelete: deleteBoardReducer,\r\n  listAdd: listAddReducer,\r\n  listDelete: deleteListReducer,\r\n});\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n","import { applyMiddleware, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { rootReducer } from './reducers';\r\n\r\n// export const store = createStore(rootReducer, compose(applyMiddleware(thunk), composeWithDevTools()));\r\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport { store } from './store';\r\n\r\n/* import reportWebVitals from './reportWebVitals'; */\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n/* reportWebVitals(); */\r\n"],"sourceRoot":""}