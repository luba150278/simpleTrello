{"version":3,"sources":["store/types/boards.ts","common/Context.ts","common/constans/api.ts","api/request.ts","common/constans/messages.ts","store/actions/boards.ts","store/types/lists.ts","store/actions/lists.ts","store/types/changeItem.ts","store/actions/itemEdit.ts","store/actions/itemDelete.ts","store/actions/itemAdd.ts","store/actions/index.ts","hooks/useActions.ts","hooks/useTypeSelector.ts","components/Alert.tsx","functions/validTitles.ts","pages/Home/components/boards/boardCreate/BoardCreate.tsx","pages/Modal/Modal.tsx","pages/Modal/ModalPopup.styles.ts","pages/Modal/BaseModalWrapper.tsx","pages/Board/components/DeleteBoard/DeleteBoard.tsx","pages/Board/components/BoardHeader/BoardHeader.tsx","pages/Board/components/Lists/components/Card/DeleteCard/DeleteCard.tsx","pages/Board/components/Lists/components/Card/Card.tsx","pages/Board/components/AddList/AddList.tsx","pages/Board/components/Lists/components/ListsMain/ListMain.tsx","pages/Board/components/DeleteList/DeleteList.tsx","pages/Board/components/AddCard/AddCard.tsx","pages/Board/components/Lists/components/AddCardInput/AddCardInput.tsx","pages/Board/components/Lists/components/ListTitle/ListTitle.tsx","pages/Board/components/Lists/components/ListInner/ListInner.tsx","pages/Board/components/Lists/Lists.tsx","pages/Board/Board.tsx","functions/cardColorGenerator.ts","pages/Home/components/boards/Boards.tsx","pages/Home/Home.tsx","App.tsx","store/reducers/boardsReducer.ts","store/reducers/listsReducer.ts","store/reducers/itemChangeReducer.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["BoardsActionTypes","MyContext","React","createContext","boardID","baseURL","process","board","instance","axios","create","api","headers","Authorization","DANGER_NAME","ListsActionTypes","fetchBoards","dispatch","a","type","FETCH_BOARDS","get","config","response","FETCH_BOARDS_SUCCESS","payload","data","FETCH_BOARDS_ERROR","ChangeItemActionTypes","fetchLists","id","FETCH_LISTS","FETCH_LISTS_SUCCESS","FETCH_LISTS_ERROR","editItem","newData","urlEdit","put","CHANGE_ITEM_SUCCESS","CHANGE_ITEM_ERROR","deleteItem","url","delete","addItem","newItem","post","BoardsActionCreators","ListsActionCreators","ItemEditActionCreators","ItemDeleteActionCreators","ItemAddActionCreators","useActions","useDispatch","bindActionCreators","ActionCreators","useTypeSelector","useSelector","Alert","show","text","danger","className","role","isValidTitle","title","match","BoardCreate","startTitle","useState","setTitle","isAlert","setAlert","isDanger","setDanger","textAlert","setTextAlert","newBoard","setUpAlert","alrt","dang","setTimeout","onChange","event","target","value","placeholder","onClick","Overlay","styled","div","Modal","onBackDropClick","children","ReactDOM","createPortal","e","stopPropagation","document","getElementById","ModalContainer","DesktopModalContainer","Header","h3","Close","BaseModalWrapper","isModalVisible","DeleteBoard","history","useHistory","Consumer","push","BoardHeader","inputEl","useRef","editTitle","to","ref","onKeyPress","key","onKeyUp","onBlur","DeleteCard","Provider","Card","card","listID","list_id","update","draggable","description","AddList","countLists","changeHandler","callAlert","newList","position","ListMain","arrLenght","lists","DeleteList","AddCard","newCard","AddCardInput","list","isCardAddVisible","setCardAddVisible","wasVisible","ListTitle","newPos","ListInner","cards","length","Lists","getLists","arr","Object","keys","map","Number","idCard","Board","setModalVisible","params","state","error","loading","useLayoutEffect","abortController","AbortController","abort","Spinner","color","wasModalVisible","colorGenerator","min","max","colors","Array","i","Math","floor","random","getRandomFloat","Boards","boards","getBoards","style","background","Main","toggleModal","App","component","Home","path","exact","initialState","users","changeState","rootReducer","combineReducers","action","changeItem","store","createStore","composeWithDevTools","applyMiddleware","thunk","render"],"mappings":"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","file":"static/js/main.54b0e982.chunk.js","sourcesContent":["import { IBoards } from '../../interfaces/inrefaces';\r\n\r\nexport interface BoardsState {\r\n  getBoards: IBoards;\r\n  loading: boolean;\r\n  error: boolean | string;\r\n}\r\nexport enum BoardsActionTypes {\r\n  FETCH_BOARDS = 'FETCH_BOARDS',\r\n  FETCH_BOARDS_SUCCESS = 'FETCH_BOARDS_SUCCESS',\r\n  FETCH_BOARDS_ERROR = 'FETCH_BOARDS_ERROR',\r\n}\r\n\r\ninterface FetchBoardsAction {\r\n  type: BoardsActionTypes.FETCH_BOARDS;\r\n}\r\ninterface FetchBoardsSuccessAction {\r\n  type: BoardsActionTypes.FETCH_BOARDS_SUCCESS;\r\n  payload: IBoards;\r\n}\r\ninterface FetchBoardsErrorAction {\r\n  type: BoardsActionTypes.FETCH_BOARDS_ERROR;\r\n  payload: string;\r\n}\r\nexport type BoardsAction = FetchBoardsAction | FetchBoardsSuccessAction | FetchBoardsErrorAction;\r\n","import React from 'react';\r\n\r\nconst MyContext = React.createContext({\r\n  boardID: '',\r\n});\r\n\r\nexport default MyContext;\r\n","export default {\r\n  baseURL: process.env.REACT_APP_API_URL || '',\r\n  board: 'board',\r\n};\r\n","import axios from 'axios';\r\nimport { api } from '../common/constans';\r\n\r\nconst instance = axios.create({\r\n  baseURL: api.baseURL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    Authorization: 'Bearer 123', // к этому мы ещё вернёмся как-нибудь потом\r\n  },\r\n});\r\n\r\n// instance.interceptors.response.use((res) => res.data);\r\n\r\nexport default instance;\r\n","export const DANGER_NAME =\r\n  'The value is empty or contains errors. Allowed characters: letters, numbers, spaces, dashes, dots, underscores.';\r\nexport const SUCCESS_BOARD_NAME = 'New board was created successfully!';\r\nexport const SUCCESS_BOARD_NAME_EDIT = 'The board title was edited successfully!';\r\nexport const SUCCESS_LIST_NAME = 'New list was created successfully!';\r\nexport const SUCCESS_LIST_NAME_EDIT = 'The list title was edited successfully!';\r\nexport const ERROR_BOARDS_LOAD = \"Error. The boards data didn't load\";\r\nexport const ERROR_ITEM_ADD = \"Error. The item didn't add on the server\";\r\nexport const ERROR_ITEM_DELETE = \"Error. The item didn't delete on the server.\";\r\nexport const ERROR_ITEM_EDIT = \"Error. The item title didn't change\";\r\nexport const ERROR_LISTS_LOAD = \"Error. The lists data didn't load from server\";\r\nexport const ANY_BOARD_YET = 'Any board yet. Create your first board!';\r\nexport const ADD_BOARD = 'Add a board';\r\nexport const ADD_CARD = 'Add a card';\r\nexport const ADD_LIST = 'Add a list';\r\nexport const BOARDS = 'Boards';\r\nexport const HOME_PAGE_DESC = 'This is a training React-project. An analogue of the \"Trello\" service.';\r\nexport const ADD_BOARD_TITLE = 'Add new board';\r\nexport const ANY_LIST_YET = 'Any list yet. Create your first list!';\r\nexport const LIST_NUMBER = 'The lists number:';\r\nexport const TASKS_NUMBER = 'The tasks number on the list:';\r\n","import { Dispatch } from 'redux';\r\nimport api from '../../api/request';\r\nimport config from '../../common/constans/api';\r\nimport { ERROR_BOARDS_LOAD } from '../../common/constans/messages';\r\nimport { BoardsAction, BoardsActionTypes } from '../types/boards';\r\n\r\n// const url = `${api.baseURL}/board`;\r\nexport const fetchBoards = () => async (dispatch: Dispatch<BoardsAction>): Promise<void> => {\r\n  try {\r\n    dispatch({ type: BoardsActionTypes.FETCH_BOARDS });\r\n\r\n    const response = await api.get(config.board);\r\n    dispatch({ type: BoardsActionTypes.FETCH_BOARDS_SUCCESS, payload: response.data });\r\n  } catch (e) {\r\n    dispatch({ type: BoardsActionTypes.FETCH_BOARDS_ERROR, payload: ERROR_BOARDS_LOAD });\r\n  }\r\n};\r\n","import { ILists } from '../../interfaces/inrefaces';\r\n\r\nexport interface ListsState {\r\n  getLists: ILists;\r\n  loading: boolean;\r\n  error: null | string;\r\n}\r\nexport enum ListsActionTypes {\r\n  FETCH_LISTS = 'FETCH_LISTS',\r\n  FETCH_LISTS_SUCCESS = 'FETCH_LISTS_SUCCESS',\r\n  FETCH_LISTS_ERROR = 'FETCH_LISTS_ERROR',\r\n}\r\n\r\ninterface FetchListsAction {\r\n  type: ListsActionTypes.FETCH_LISTS;\r\n}\r\ninterface FetchListsSuccessAction {\r\n  type: ListsActionTypes.FETCH_LISTS_SUCCESS;\r\n  payload: ILists;\r\n}\r\ninterface FetchListsErrorAction {\r\n  type: ListsActionTypes.FETCH_LISTS_ERROR;\r\n  payload: string;\r\n}\r\nexport type ListsAction = FetchListsAction | FetchListsSuccessAction | FetchListsErrorAction;\r\n","/* eslint-disable no-console */\r\nimport { Dispatch } from 'redux';\r\nimport api from '../../api/request';\r\nimport config from '../../common/constans/api';\r\nimport { ERROR_LISTS_LOAD } from '../../common/constans/messages';\r\nimport { ListsAction, ListsActionTypes } from '../types/lists';\r\n\r\nexport const fetchLists = (id: string) => async (dispatch: Dispatch<ListsAction>): Promise<void> => {\r\n  // const url = `${api.baseURL}/board/${id}`;\r\n  try {\r\n    dispatch({ type: ListsActionTypes.FETCH_LISTS });\r\n    const response = await api.get(`${config.board}/${id}`);\r\n    dispatch({ type: ListsActionTypes.FETCH_LISTS_SUCCESS, payload: response.data });\r\n  } catch (e) {\r\n    dispatch({ type: ListsActionTypes.FETCH_LISTS_ERROR, payload: ERROR_LISTS_LOAD });\r\n  }\r\n};\r\n","export enum ChangeItemActionTypes {\r\n  CHANGE_ITEM = 'CHANGE_ITEM',\r\n  CHANGE_ITEM_SUCCESS = 'CHANGE_ITEM_SUCCESS',\r\n  CHANGE_ITEM_ERROR = 'CHANGE_ITEM_ERROR',\r\n}\r\n\r\nexport interface ChangeItemState {\r\n  changeState: boolean;\r\n  error: null | string;\r\n}\r\n\r\ninterface ChangeItemAction {\r\n  type: ChangeItemActionTypes.CHANGE_ITEM;\r\n  payload: boolean;\r\n}\r\ninterface ChangeItemSuccessAction {\r\n  type: ChangeItemActionTypes.CHANGE_ITEM_SUCCESS;\r\n  payload: boolean;\r\n}\r\ninterface ChangeItemErrorAction {\r\n  type: ChangeItemActionTypes.CHANGE_ITEM_ERROR;\r\n  payload: string;\r\n}\r\nexport type ChangeItemActions = ChangeItemAction | ChangeItemSuccessAction | ChangeItemErrorAction;\r\n","/* eslint-disable no-console */\r\nimport { Dispatch } from 'redux';\r\nimport api from '../../api/request';\r\nimport config from '../../common/constans/api';\r\nimport { ERROR_ITEM_EDIT } from '../../common/constans/messages';\r\nimport { ChangeItemActions, ChangeItemActionTypes } from '../types/changeItem';\r\n\r\ntype Card = {\r\n  position: number;\r\n  title: string;\r\n  list_id: number;\r\n};\r\n\r\ntype Board = {\r\n  title: string;\r\n};\r\n\r\ntype List = {\r\n  position: number;\r\n  title: string;\r\n};\r\n\r\nexport const editItem = (newData: Card | Board | List, urlEdit: string) => async (\r\n  dispatch: Dispatch<ChangeItemActions>\r\n): Promise<void> => {\r\n  try {\r\n    // dispatch({ type: ChangeItemActionTypes.CHANGE_ITEM, payload: false });\r\n    await api.put(`${config.board}/${urlEdit}`, newData);\r\n    dispatch({ type: ChangeItemActionTypes.CHANGE_ITEM_SUCCESS, payload: true });\r\n  } catch (e) {\r\n    dispatch({ type: ChangeItemActionTypes.CHANGE_ITEM_ERROR, payload: ERROR_ITEM_EDIT });\r\n  }\r\n};\r\n","/* eslint-disable no-console */\r\nimport { Dispatch } from 'redux';\r\nimport api from '../../api/request';\r\nimport config from '../../common/constans/api';\r\nimport { ERROR_ITEM_DELETE } from '../../common/constans/messages';\r\nimport { ChangeItemActions, ChangeItemActionTypes } from '../types/changeItem';\r\n\r\nexport const deleteItem = (url: string) => async (dispatch: Dispatch<ChangeItemActions>): Promise<void> => {\r\n  try {\r\n    // dispatch({ type: ChangeItemActionTypes.CHANGE_ITEM, payload: false });\r\n    await api.delete(`${config.board}/${url}`);\r\n\r\n    dispatch({ type: ChangeItemActionTypes.CHANGE_ITEM_SUCCESS, payload: true });\r\n  } catch (e) {\r\n    dispatch({ type: ChangeItemActionTypes.CHANGE_ITEM_ERROR, payload: ERROR_ITEM_DELETE });\r\n  }\r\n};\r\n","/* eslint-disable no-console */\r\nimport { Dispatch } from 'redux';\r\nimport api from '../../api/request';\r\nimport config from '../../common/constans/api';\r\nimport { ERROR_ITEM_ADD } from '../../common/constans/messages';\r\nimport { ChangeItemActions, ChangeItemActionTypes } from '../types/changeItem';\r\n\r\ntype Card = {\r\n  title: string;\r\n  list_id: number;\r\n  position: number;\r\n};\r\n\r\ntype Board = {\r\n  title: string;\r\n};\r\n\r\ntype List = {\r\n  title: string;\r\n  position: number;\r\n};\r\n\r\nexport const addItem = (url: string, newItem: Card | Board | List) => async (\r\n  dispatch: Dispatch<ChangeItemActions>\r\n): Promise<void> => {\r\n  try {\r\n    // dispatch({ type: ChangeItemActionTypes.CHANGE_ITEM, payload: false });\r\n    await api.post(`${config.board}/${url}`, newItem);\r\n    dispatch({ type: ChangeItemActionTypes.CHANGE_ITEM_SUCCESS, payload: true });\r\n    // dispatch({ type: 'ADD_BOARDS', boards });\r\n  } catch (e) {\r\n    dispatch({ type: ChangeItemActionTypes.CHANGE_ITEM_ERROR, payload: ERROR_ITEM_ADD });\r\n  }\r\n};\r\n","import * as BoardsActionCreators from './boards';\r\nimport * as ListsActionCreators from './lists';\r\nimport * as ItemEditActionCreators from './itemEdit';\r\nimport * as ItemDeleteActionCreators from './itemDelete';\r\nimport * as ItemAddActionCreators from './itemAdd';\r\n\r\nexport default {\r\n  ...BoardsActionCreators,\r\n  ...ListsActionCreators,\r\n  ...ItemEditActionCreators,\r\n  ...ItemDeleteActionCreators,\r\n  ...ItemAddActionCreators,\r\n};\r\n","/* eslint-disable @typescript-eslint/explicit-function-return-type */\r\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\nimport { useDispatch } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport ActionCreators from '../store/actions';\r\n\r\nexport const useActions = () => {\r\n  const dispatch = useDispatch();\r\n  return bindActionCreators(ActionCreators, dispatch);\r\n};\r\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\r\nimport { RootState } from '../store/reducers';\r\n\r\nexport const useTypeSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import React from 'react';\r\n\r\ntype AlertType = {\r\n  show: boolean;\r\n  text: string;\r\n  danger: boolean;\r\n};\r\nexport const Alert: React.FC<AlertType> = ({ show, text, danger }) =>\r\n  show ? (\r\n    <div className={danger ? 'alert alert-danger' : 'alert alert-success'} role=\"alert\">\r\n      {text}\r\n    </div>\r\n  ) : (\r\n    <></>\r\n  );\r\n","export function isValidTitle(title: string): boolean {\r\n  if (title.match(/^[\\d\\p{L} .,_-]+$/u) === null) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n","/* eslint-disable no-console */\r\nimport React, { useState } from 'react';\r\n// import { api } from '../../../../../common/constans';\r\nimport { DANGER_NAME, SUCCESS_BOARD_NAME } from '../../../../../common/constans/messages';\r\nimport { Alert } from '../../../../../components/Alert';\r\nimport { isValidTitle } from '../../../../../functions/validTitles';\r\nimport { useActions } from '../../../../../hooks/useActions';\r\nimport './boardCreate.css';\r\n\r\ntype ITitle = {\r\n  title: string;\r\n};\r\n\r\ntype IProps = {\r\n  startTitle: string;\r\n};\r\nconst BoardCreate: React.FC<IProps> = ({ startTitle }) => {\r\n  const [title, setTitle] = useState<string>(startTitle);\r\n  const [isAlert, setAlert] = useState<boolean>(false);\r\n  const [isDanger, setDanger] = useState<boolean>(false);\r\n  const [textAlert, setTextAlert] = useState<string>('');\r\n  const newBoard: ITitle = { title };\r\n  const changeHandler = (event: React.ChangeEvent<HTMLInputElement>): void => setTitle(event.target.value);\r\n  const { addItem, fetchBoards } = useActions();\r\n\r\n  function setUpAlert(alrt: boolean, dang: boolean, text: string): void {\r\n    setAlert(alrt);\r\n    setDanger(dang);\r\n    setTextAlert(text);\r\n    setTimeout(() => {\r\n      setTitle('');\r\n      setAlert(false);\r\n    }, 3000);\r\n  }\r\n  return (\r\n    <div className=\"main-container\">\r\n      <Alert show={isAlert} text={textAlert} danger={isDanger} />\r\n      <div className=\"fields mb-4\">\r\n        <div className=\"field mr-4\">\r\n          <input\r\n            onChange={changeHandler}\r\n            value={title}\r\n            type=\"text\"\r\n            id=\"title\"\r\n            placeholder=\"Enter board name\"\r\n            className=\"inputName\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <button\r\n        className=\"btn btn-success mr-2 btn-new-board\"\r\n        onClick={async (): Promise<void> => {\r\n          if (isValidTitle(title)) {\r\n            await addItem('', newBoard);\r\n            setUpAlert(true, false, SUCCESS_BOARD_NAME);\r\n            await fetchBoards();\r\n          } else {\r\n            setUpAlert(true, true, DANGER_NAME);\r\n          }\r\n        }}\r\n      >\r\n        Add board\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BoardCreate;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport styled from 'styled-components';\r\n\r\ninterface ModalProps {\r\n  onBackDropClick: () => void;\r\n}\r\n\r\nconst Overlay = styled.div`\r\n  background-color: rgba(0, 0, 0, 0.7);\r\n  position: fixed;\r\n  height: 100%;\r\n  width: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst Modal: React.FC<ModalProps> = ({ onBackDropClick, children }) =>\r\n  ReactDOM.createPortal(\r\n    <Overlay onClick={onBackDropClick}>\r\n      <div onClick={(e): void => e.stopPropagation()}>{children}</div>\r\n    </Overlay>,\r\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n    document.getElementById('modal-root')!\r\n  );\r\n\r\nexport default Modal;\r\n","import styled from 'styled-components';\r\n\r\nconst ModalContainer = styled.div`\r\n  background-color: #ffffff;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  position: relative;\r\n`;\r\nexport const DesktopModalContainer = styled(ModalContainer)`\r\n  border-radius: 7px;\r\n  box-shadow: 0 0 32px rgba(0, 0, 0, 0.5);\r\n  padding: 40px;\r\n  width: 450px;\r\n  font-size: 26px;\r\n  @media screen and (max-width: 480px) {\r\n    width: 100%;\r\n  } ;\r\n`;\r\nexport const Header = styled.h3`\r\n  color: #25306c;\r\n  font-size: 35px;\r\n  line-height: 1em;\r\n  font-weight: bold;\r\n  margin: 5px 0 10px;\r\n  text-align: center;\r\n`;\r\n\r\nexport const Close = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 80%;\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { ADD_BOARD_TITLE } from '../../common/constans/messages';\r\nimport BoardCreate from '../Home/components/boards/boardCreate/BoardCreate';\r\nimport Modal from './Modal';\r\nimport { Close, DesktopModalContainer, Header } from './ModalPopup.styles';\r\n\r\ninterface BaseModalWrapperProps {\r\n  isModalVisible: boolean;\r\n  onBackDropClick: () => void;\r\n  startTitle: string;\r\n}\r\n\r\nconst BaseModalWrapper: React.FC<BaseModalWrapperProps> = ({ isModalVisible, onBackDropClick, startTitle }) => {\r\n  if (!isModalVisible) {\r\n    return null;\r\n  }\r\n  return (\r\n    <Modal onBackDropClick={onBackDropClick}>\r\n      <DesktopModalContainer>\r\n        <Close onClick={(): void => onBackDropClick()}>x</Close>\r\n        <Header>{ADD_BOARD_TITLE}</Header>\r\n        <BoardCreate startTitle={startTitle} />\r\n      </DesktopModalContainer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default BaseModalWrapper;\r\n","import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport MyContext from '../../../../common/Context';\r\nimport { useActions } from '../../../../hooks/useActions';\r\n\r\nconst DeleteBoard: React.FC = () => {\r\n  const history = useHistory();\r\n  const { deleteItem } = useActions();\r\n  return (\r\n    <MyContext.Consumer>\r\n      {({ boardID }): JSX.Element => (\r\n        <button\r\n          className=\"btn btn-danger deleteBoard ml-4\"\r\n          onClick={async (): Promise<void> => {\r\n            await deleteItem(boardID);\r\n            history.push('/');\r\n          }}\r\n        >\r\n          Delete\r\n        </button>\r\n      )}\r\n    </MyContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default DeleteBoard;\r\n","import React, { useRef, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { DANGER_NAME } from '../../../../common/constans/messages';\r\nimport MyContext from '../../../../common/Context';\r\nimport { Alert } from '../../../../components/Alert';\r\nimport { isValidTitle } from '../../../../functions/validTitles';\r\nimport { useActions } from '../../../../hooks/useActions';\r\nimport DeleteBoard from '../DeleteBoard/DeleteBoard';\r\n\r\ntype IData = {\r\n  startTitle: string;\r\n};\r\n\r\ntype ITitle = {\r\n  title: string;\r\n};\r\n\r\nconst BoardHeader: React.FC<IData> = ({ startTitle }) => {\r\n  const [title, setTitle] = useState<string>(startTitle);\r\n  const [isAlert, setAlert] = useState<boolean>(false);\r\n  const [isDanger, setDanger] = useState<boolean>(false);\r\n  const [textAlert, setTextAlert] = useState<string>('');\r\n  const { editItem, fetchLists } = useActions();\r\n  const inputEl = useRef<HTMLInputElement>(null);\r\n\r\n  return (\r\n    <MyContext.Consumer>\r\n      {({ boardID }): JSX.Element => {\r\n        function setUpAlert(alrt: boolean, dang: boolean, text: string): void {\r\n          setAlert(alrt);\r\n          setDanger(dang);\r\n          setTextAlert(text);\r\n          setTimeout(() => {\r\n            setTitle(startTitle);\r\n            setAlert(false);\r\n          }, 3000);\r\n        }\r\n\r\n        const changeHandler = (event: React.ChangeEvent<HTMLInputElement>): void => setTitle(event.target.value);\r\n        const newData: ITitle = { title };\r\n        function editTitle(): void {\r\n          if (isValidTitle(title)) {\r\n            editItem(newData, boardID);\r\n          } else {\r\n            setUpAlert(true, true, DANGER_NAME);\r\n          }\r\n        }\r\n        const keyPressHandler = (event: React.KeyboardEvent): void => {\r\n          if (event.key === 'Enter') {\r\n            editTitle();\r\n            fetchLists(boardID);\r\n          }\r\n        };\r\n\r\n        const keyUpHandler = (): void => {\r\n          editTitle();\r\n        };\r\n\r\n        const blurHandler = (): void => {\r\n          if (startTitle !== title) {\r\n            editTitle();\r\n            fetchLists(boardID);\r\n          }\r\n        };\r\n\r\n        return (\r\n          <div className=\"board-header container my-4\">\r\n            <Link to=\"/\">Home</Link>\r\n            <div className=\"board-header-title mt-4\">\r\n              <Alert show={isAlert} text={textAlert} danger={isDanger} />\r\n              <div className=\"input-row\">\r\n                <input\r\n                  className=\"h1\"\r\n                  ref={inputEl}\r\n                  type=\"text\"\r\n                  placeholder={title}\r\n                  value={title}\r\n                  onChange={changeHandler}\r\n                  onKeyPress={keyPressHandler}\r\n                  onKeyUp={keyUpHandler}\r\n                  onBlur={blurHandler}\r\n                />\r\n\r\n                <DeleteBoard />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n      }}\r\n    </MyContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default BoardHeader;\r\n","/* eslint-disable no-console */\r\nimport React from 'react';\r\nimport { IconContext } from 'react-icons';\r\nimport { FaTrashAlt } from 'react-icons/fa';\r\nimport MyContext from '../../../../../../../common/Context';\r\nimport { useActions } from '../../../../../../../hooks/useActions';\r\n\r\ntype Props = {\r\n  id: number;\r\n};\r\n\r\nconst DeleteCard: React.FC<Props> = ({ id }) => {\r\n  const { fetchLists, deleteItem } = useActions();\r\n  return (\r\n    <MyContext.Consumer>\r\n      {({ boardID }): JSX.Element => (\r\n        <div className=\"icon__inner mr-2 my-2\">\r\n          <IconContext.Provider value={{ className: 'trash-list' }}>\r\n            <FaTrashAlt\r\n              onClick={async (): Promise<void> => {\r\n                await deleteItem(`${boardID}/card/${id}`);\r\n                await fetchLists(boardID);\r\n              }}\r\n            />\r\n          </IconContext.Provider>\r\n        </div>\r\n      )}\r\n    </MyContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default DeleteCard;\r\n","/* eslint-disable no-console */\r\nimport React, { useRef, useState } from 'react';\r\nimport { DANGER_NAME } from '../../../../../../common/constans/messages';\r\nimport MyContext from '../../../../../../common/Context';\r\nimport { Alert } from '../../../../../../components/Alert';\r\n// import TitleWithEdition from '../../../../../../components/TitleWithEdition';\r\nimport { isValidTitle } from '../../../../../../functions/validTitles';\r\nimport { useActions } from '../../../../../../hooks/useActions';\r\nimport { ICard } from '../../../../../../interfaces/inrefaces';\r\nimport DeleteCard from './DeleteCard/DeleteCard';\r\n\r\ntype Props = {\r\n  card: ICard;\r\n  listID: number;\r\n};\r\ntype Data = {\r\n  title: string;\r\n  list_id: number;\r\n};\r\n\r\nconst Card: React.FC<Props> = ({ card, listID }) => {\r\n  const inputEl = useRef<HTMLInputElement>(null);\r\n  const [title, setTitle] = useState<string>(card.title);\r\n  const [isAlert, setAlert] = useState<boolean>(false);\r\n  const { editItem, fetchLists } = useActions();\r\n\r\n  return (\r\n    <MyContext.Consumer>\r\n      {({ boardID }): JSX.Element => {\r\n        const changeHandler = (event: React.ChangeEvent<HTMLInputElement>): void => setTitle(event.target.value);\r\n        const newData: Data = { list_id: listID, title };\r\n\r\n        function callAlert(): void {\r\n          setAlert(true);\r\n          setTimeout(() => {\r\n            setTitle(card.title);\r\n            setAlert(false);\r\n          }, 3000);\r\n        }\r\n\r\n        function editTitle(update: boolean): void {\r\n          if (isValidTitle(title)) {\r\n            editItem(newData, `${boardID}/card/${card.id}`);\r\n            if (update) {\r\n              fetchLists(boardID);\r\n            }\r\n          } else {\r\n            callAlert();\r\n          }\r\n        }\r\n        const keyPressHandler = (event: React.KeyboardEvent): void => {\r\n          if (event.key === 'Enter' || event.key === 'enter') {\r\n            editTitle(true);\r\n          }\r\n        };\r\n\r\n        const keyUpHandler = (): void => {\r\n          editTitle(false);\r\n        };\r\n\r\n        const blurHandler = (): void => {\r\n          if (card.title !== title) {\r\n            editTitle(true);\r\n          }\r\n        };\r\n\r\n        return (\r\n          <li className=\"card list-item\" draggable>\r\n            <DeleteCard id={card.id} />\r\n            <Alert show={isAlert} text={DANGER_NAME} danger />\r\n            <div className=\"card__inner\">\r\n              <input\r\n                ref={inputEl}\r\n                type=\"text\"\r\n                placeholder={card.title}\r\n                value={title}\r\n                onChange={changeHandler}\r\n                onKeyPress={keyPressHandler}\r\n                onKeyUp={keyUpHandler}\r\n                onBlur={blurHandler}\r\n                className=\"listTitle\"\r\n              />\r\n              {card.description !== '' ? <p>{card.description}</p> : null}\r\n            </div>\r\n          </li>\r\n        );\r\n      }}\r\n    </MyContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","/* eslint-disable no-console */\r\nimport React, { useState } from 'react';\r\nimport { ADD_LIST, DANGER_NAME } from '../../../../common/constans/messages';\r\nimport MyContext from '../../../../common/Context';\r\nimport { Alert } from '../../../../components/Alert';\r\nimport { isValidTitle } from '../../../../functions/validTitles';\r\nimport { useActions } from '../../../../hooks/useActions';\r\nimport './addList.css';\r\n\r\ntype Props = {\r\n  countLists: number;\r\n};\r\n\r\nconst AddList: React.FC<Props> = ({ countLists }) => {\r\n  const [title, setTitle] = useState<string>('');\r\n  const [isAlert, setAlert] = useState<boolean>(false);\r\n  const changeHandler = (event: React.ChangeEvent<HTMLInputElement>): void => setTitle(event.target.value);\r\n  const { addItem, fetchLists } = useActions();\r\n  return (\r\n    <MyContext.Consumer>\r\n      {({ boardID }): JSX.Element => {\r\n        function callAlert(): void {\r\n          setAlert(true);\r\n          setTimeout(() => {\r\n            setTitle('');\r\n            setAlert(false);\r\n          }, 3000);\r\n        }\r\n        async function clickHandler(): Promise<void> {\r\n          if (isValidTitle(title)) {\r\n            const newList = { title, position: countLists + 1 };\r\n            await addItem(`${boardID}/list`, newList);\r\n            await fetchLists(boardID);\r\n          } else {\r\n            callAlert();\r\n          }\r\n        }\r\n        return (\r\n          <div className=\"list-input-outside\">\r\n            <Alert show={isAlert} text={DANGER_NAME} danger />\r\n            <div className=\"list-input mt-2\">\r\n              <input type=\"text\" id=\"addList\" placeholder=\"Enter list name\" onChange={changeHandler} value={title} />\r\n              <button className=\"btn btn-primary ml-2\" onClick={clickHandler}>\r\n                {ADD_LIST}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        );\r\n      }}\r\n    </MyContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default AddList;\r\n","import React from 'react';\r\nimport { LIST_NUMBER } from '../../../../../../common/constans/messages';\r\nimport AddList from '../../../AddList/AddList';\r\n\r\ntype Props = {\r\n  arrLenght: number;\r\n  lists: JSX.Element | JSX.Element[];\r\n};\r\nconst ListMain: React.FC<Props> = ({ arrLenght, lists }) => (\r\n  <div className=\"lists-main\">\r\n    <div className=\"input-row mb-4\">\r\n      <AddList countLists={arrLenght} />\r\n      <div className=\"count-lists\">\r\n        {LIST_NUMBER} {arrLenght}\r\n      </div>\r\n    </div>\r\n    <div className=\"cards\">{lists}</div>\r\n  </div>\r\n);\r\n\r\nexport default ListMain;\r\n","/* eslint-disable no-console */\r\nimport React from 'react';\r\nimport { IconContext } from 'react-icons';\r\nimport { FaTrashAlt } from 'react-icons/fa';\r\nimport MyContext from '../../../../common/Context';\r\nimport { useActions } from '../../../../hooks/useActions';\r\n\r\ntype Props = {\r\n  id: string;\r\n};\r\n\r\nconst DeleteList: React.FC<Props> = ({ id }) => {\r\n  const { fetchLists, deleteItem } = useActions();\r\n  return (\r\n    <MyContext.Consumer>\r\n      {({ boardID }): JSX.Element => (\r\n        <div className=\"icon__inner\">\r\n          <IconContext.Provider value={{ className: 'trash-list' }}>\r\n            <FaTrashAlt\r\n              onClick={async (): Promise<void> => {\r\n                await deleteItem(`${boardID}/list/${id}`);\r\n                await fetchLists(boardID);\r\n              }}\r\n            />\r\n          </IconContext.Provider>\r\n        </div>\r\n      )}\r\n    </MyContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default DeleteList;\r\n","/* eslint-disable no-console */\r\nimport React, { useState } from 'react';\r\nimport { ADD_CARD, DANGER_NAME } from '../../../../common/constans/messages';\r\nimport MyContext from '../../../../common/Context';\r\nimport { Alert } from '../../../../components/Alert';\r\nimport { isValidTitle } from '../../../../functions/validTitles';\r\nimport { useActions } from '../../../../hooks/useActions';\r\nimport './addCard.css';\r\n\r\ntype Props = {\r\n  position: number;\r\n  list_id: number;\r\n};\r\n\r\nconst AddCard: React.FC<Props> = ({ position, list_id }) => {\r\n  const [title, setTitle] = useState<string>('');\r\n  const [isAlert, setAlert] = useState(false);\r\n  const { addItem, fetchLists } = useActions();\r\n  return (\r\n    <MyContext.Consumer>\r\n      {({ boardID }): JSX.Element => {\r\n        const changeHandler = (event: React.ChangeEvent<HTMLInputElement>): void => setTitle(event.target.value);\r\n        function callAlert(): void {\r\n          setAlert(true);\r\n          setTimeout(() => {\r\n            setTitle('');\r\n            setAlert(false);\r\n          }, 3000);\r\n        }\r\n        async function clickHandler(): Promise<void> {\r\n          if (isValidTitle(title)) {\r\n            const newCard = { title, list_id, position };\r\n            await addItem(`${boardID}/card`, newCard);\r\n            await fetchLists(boardID);\r\n          } else {\r\n            callAlert();\r\n          }\r\n        }\r\n        return (\r\n          <div className=\"card-input-outside\">\r\n            <Alert show={isAlert} text={DANGER_NAME} danger />\r\n            <div className=\"card-input mt-2\">\r\n              <input\r\n                className=\"card-title\"\r\n                type=\"text\"\r\n                placeholder=\"Enter card title\"\r\n                onChange={changeHandler}\r\n                value={title}\r\n              />\r\n              <button className=\"btn btn-primary ml-2\" onClick={clickHandler}>\r\n                {ADD_CARD}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        );\r\n      }}\r\n    </MyContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default AddCard;\r\n","import React, { useState } from 'react';\r\nimport { FaPlus } from 'react-icons/fa';\r\nimport { IconContext } from 'react-icons/lib';\r\nimport { IList } from '../../../../../../interfaces/inrefaces';\r\nimport AddCard from '../../../AddCard/AddCard';\r\n\r\nimport './addCardInput.css';\r\n\r\ntype Props = {\r\n  list: IList;\r\n};\r\n\r\nconst AddCardInput: React.FC<Props> = ({ list }) => {\r\n  const [isCardAddVisible, setCardAddVisible] = useState(false);\r\n  const toggleCardAdd = (): void => {\r\n    setCardAddVisible((wasVisible) => !wasVisible);\r\n  };\r\n  return (\r\n    <div className=\"addCardInput\">\r\n      <div className=\"iconPlus__inner\">\r\n        <IconContext.Provider value={{ className: 'trash-list' }}>\r\n          <FaPlus onClick={toggleCardAdd} />\r\n        </IconContext.Provider>\r\n      </div>\r\n      {isCardAddVisible ? <AddCard position={list.position} list_id={list.id} /> : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddCardInput;\r\n","/* eslint-disable no-console */\r\nimport React, { useRef, useState } from 'react';\r\nimport { DANGER_NAME } from '../../../../../../common/constans/messages';\r\nimport MyContext from '../../../../../../common/Context';\r\nimport { Alert } from '../../../../../../components/Alert';\r\nimport { isValidTitle } from '../../../../../../functions/validTitles';\r\nimport { useActions } from '../../../../../../hooks/useActions';\r\n\r\ntype Props = {\r\n  startTitle: string;\r\n  position: number;\r\n  id: string;\r\n};\r\n\r\ntype Data = {\r\n  position: number;\r\n  title: string;\r\n};\r\n\r\nconst ListTitle: React.FC<Props> = ({ startTitle, position, id }) => {\r\n  const [title, setTitle] = useState<string>(startTitle);\r\n  const [isAlert, setAlert] = useState<boolean>(false);\r\n  const inputEl = useRef<HTMLInputElement>(null);\r\n  const { editItem, fetchLists } = useActions();\r\n  return (\r\n    <MyContext.Consumer>\r\n      {({ boardID }): JSX.Element => {\r\n        const newPos: Data = { position, title };\r\n        const changeHandler = (event: React.ChangeEvent<HTMLInputElement>): void => setTitle(event.target.value);\r\n        function callAlert(): void {\r\n          setAlert(true);\r\n          setTimeout(() => {\r\n            setTitle(startTitle);\r\n            setAlert(false);\r\n          }, 3000);\r\n        }\r\n\r\n        function editTitle(update: boolean): void {\r\n          if (isValidTitle(title)) {\r\n            editItem(newPos, `${boardID}/list/${id}`); // /list/<id>\r\n\r\n            if (update) {\r\n              fetchLists(boardID);\r\n            }\r\n          } else {\r\n            callAlert();\r\n          }\r\n        }\r\n        const keyPressHandler = (event: React.KeyboardEvent): void => {\r\n          if (event.key === 'Enter') {\r\n            editTitle(true);\r\n          }\r\n        };\r\n\r\n        const keyUpHandler = (): void => {\r\n          editTitle(false);\r\n        };\r\n\r\n        const blurHandler = (): void => {\r\n          if (startTitle !== title) {\r\n            editTitle(true);\r\n          }\r\n        };\r\n        return (\r\n          <div className=\"listTitleMain\">\r\n            <Alert show={isAlert} text={DANGER_NAME} danger />\r\n            <input\r\n              ref={inputEl}\r\n              type=\"text\"\r\n              placeholder={title}\r\n              value={title}\r\n              onChange={changeHandler}\r\n              onKeyPress={keyPressHandler}\r\n              onKeyUp={keyUpHandler}\r\n              onBlur={blurHandler}\r\n              className=\"listTitle\"\r\n            />\r\n          </div>\r\n        );\r\n      }}\r\n    </MyContext.Consumer>\r\n  );\r\n};\r\n\r\nexport default ListTitle;\r\n","import React from 'react';\r\nimport { TASKS_NUMBER } from '../../../../../../common/constans/messages';\r\nimport { IList } from '../../../../../../interfaces/inrefaces';\r\nimport DeleteList from '../../../DeleteList/DeleteList';\r\nimport AddCardInput from '../AddCardInput/AddCardInput';\r\nimport ListTitle from '../ListTitle/ListTitle';\r\n\r\ntype Props = {\r\n  list: IList;\r\n  id: string;\r\n  cards: JSX.Element[];\r\n};\r\n\r\nconst ListInner: React.FC<Props> = ({ list, id, cards }) => (\r\n  <div className=\"card list mx-2\">\r\n    <DeleteList id={id} />\r\n    <p>\r\n      {TASKS_NUMBER} {cards.length}\r\n    </p>\r\n    <ListTitle startTitle={list.title} position={list.position} id={id} />\r\n    <ul className=\"list-items\">{cards}</ul>\r\n    <AddCardInput list={list} />\r\n  </div>\r\n);\r\n\r\nexport default ListInner;\r\n","/* eslint-disable no-console */\r\nimport React from 'react';\r\n// import { useActions } from '../../../../hooks/useActions';\r\n// import { useTypeSelector } from '../../../../hooks/useTypeSelector';\r\nimport Card from './components/Card/Card';\r\nimport './lists.css';\r\nimport ListMain from './components/ListsMain/ListMain';\r\nimport ListInner from './components/ListInner/ListInner';\r\nimport { ILists } from '../../../../interfaces/inrefaces';\r\nimport { ANY_LIST_YET } from '../../../../common/constans/messages';\r\n\r\ntype Props = {\r\n  getLists: ILists;\r\n};\r\n\r\nconst Lists: React.FC<Props> = ({ getLists }) => {\r\n  const arr = Object.keys(getLists.lists);\r\n  const arrLenght = arr.length;\r\n\r\n  const lists =\r\n    arrLenght !== 0 ? (\r\n      arr.map((id) => {\r\n        const list = getLists.lists[Number(id)];\r\n        const cards = Object.keys(list.cards).map((idCard) => {\r\n          const card = list.cards[Number(idCard)];\r\n          return <Card key={card.id} card={card} listID={Number(id)} />;\r\n        });\r\n\r\n        return <ListInner key={id} list={list} id={id} cards={cards} />;\r\n      })\r\n    ) : (\r\n      <h2>{ANY_LIST_YET}</h2>\r\n    );\r\n\r\n  return <ListMain arrLenght={arrLenght} lists={lists} />;\r\n};\r\n\r\nexport default Lists;\r\n","/* eslint-disable no-console */\r\nimport React, { useLayoutEffect, useState } from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport Spinner from 'reactstrap/es/Spinner';\r\nimport MyContext from '../../common/Context';\r\nimport { useActions } from '../../hooks/useActions';\r\nimport { useTypeSelector } from '../../hooks/useTypeSelector';\r\nimport BaseModalWrapper from '../Modal/BaseModalWrapper';\r\nimport './board.css';\r\nimport BoardHeader from './components/BoardHeader/BoardHeader';\r\nimport Lists from './components/Lists/Lists';\r\n\r\ntype TParams = { id: string };\r\n\r\nconst Board: React.FC<RouteComponentProps<TParams>> = ({ match }) => {\r\n  const [isModalVisible, setModalVisible] = useState(false);\r\n  const toggleModal = (): void => {\r\n    setModalVisible((wasModalVisible) => !wasModalVisible);\r\n  };\r\n  const boardID = match.params.id;\r\n  const { getLists, error, loading } = useTypeSelector((state) => state.lists);\r\n  const { fetchLists } = useActions();\r\n\r\n  useLayoutEffect(() => {\r\n    const abortController = new AbortController();\r\n    fetchLists(boardID);\r\n    return (): void => {\r\n      abortController.abort();\r\n    };\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <Spinner color=\"success\" />;\r\n  }\r\n\r\n  if (error) {\r\n    return <h2>{error}</h2>;\r\n  }\r\n\r\n  const { title } = getLists;\r\n  return (\r\n    <>\r\n      <MyContext.Provider\r\n        value={{\r\n          boardID,\r\n        }}\r\n      >\r\n        <BoardHeader startTitle={title} />\r\n        <Lists getLists={getLists} />\r\n        <BaseModalWrapper isModalVisible={isModalVisible} onBackDropClick={toggleModal} startTitle=\"\" />\r\n      </MyContext.Provider>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","const LOWER_COLOR = 100;\r\nconst UPPER_COLOR = 255;\r\nconst LOWER_OPACITY = 0.3;\r\nconst UPPER_OPACITY = 0.8;\r\n\r\nfunction getRandomFloat(min: number, max: number): number {\r\n  return Math.random() * (max - min) + min;\r\n}\r\n\r\nfunction getRandomInRange(min: number, max: number): number {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport function colorGenerator(): string {\r\n  const colors: number[] = new Array(3);\r\n  for (let i = 0; i < 3; i++) {\r\n    colors[i] = getRandomInRange(LOWER_COLOR, UPPER_COLOR);\r\n  }\r\n  const a = getRandomFloat(LOWER_OPACITY, UPPER_OPACITY);\r\n\r\n  return `rgba(${colors[0]}, ${colors[1]}, ${colors[2]}, ${a})`;\r\n}\r\n","import React, { useLayoutEffect } from 'react';\r\n/* import { connect } from 'react-redux'; */\r\nimport { Link } from 'react-router-dom';\r\nimport { Spinner } from 'reactstrap';\r\nimport { ANY_BOARD_YET } from '../../../../common/constans/messages';\r\nimport { colorGenerator } from '../../../../functions/cardColorGenerator';\r\nimport { useActions } from '../../../../hooks/useActions';\r\nimport { useTypeSelector } from '../../../../hooks/useTypeSelector';\r\n// import { fetchBoards } from '../../../../store/actions/boards';\r\n/* import { RootState } from '../../../../store/reducers';\r\nimport { BoardsState } from '../../../../store/types/boards'; */\r\nimport './boards.css';\r\n/**\r\n * Get boards list from api\r\n * @returns Boards List\r\n */\r\nconst Boards: React.FC = () => {\r\n  const { getBoards, error, loading } = useTypeSelector((state) => state.boards);\r\n  const { fetchBoards } = useActions();\r\n  useLayoutEffect(() => {\r\n    const abortController = new AbortController();\r\n    fetchBoards();\r\n\r\n    return (): void => {\r\n      abortController.abort();\r\n    };\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <Spinner color=\"success\" />;\r\n  }\r\n\r\n  if (error) {\r\n    return <h2>{error}</h2>;\r\n  }\r\n\r\n  if (getBoards.boards.length > 0) {\r\n    return (\r\n      <div>\r\n        <div className=\"row boards-row\">\r\n          {getBoards.boards.map((board) => (\r\n            <Link\r\n              to={`/board/${board.id}`}\r\n              key={board.id}\r\n              className=\"card col-md-3 mx-2\"\r\n              style={{ background: `${colorGenerator()}` }}\r\n            >\r\n              {board.title}\r\n            </Link>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>{ANY_BOARD_YET}</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\n/* const mapStateToProps = (state: RootState): BoardsState => ({ ...state.boards });\r\n\r\nexport default connect(mapStateToProps, fetchBoards)(Boards); */\r\n\r\nexport default Boards;\r\n","import React, { useState } from 'react';\r\nimport { ADD_BOARD, BOARDS, HOME_PAGE_DESC } from '../../common/constans/messages';\r\nimport BaseModalWrapper from '../Modal/BaseModalWrapper';\r\nimport Boards from './components/boards/Boards';\r\n/**\r\n * The page has 3 components: the \"Add Board\" button, the board's list, and modal window (MW) for add a new board.\r\n * MW is hidden by default and stays visible by clicking the button.\r\n * @returns Main page\r\n */\r\nconst Main: React.FC = () => {\r\n  const [isModalVisible, setModalVisible] = useState(false); // the state for control MV visibility\r\n  const toggleModal = (): void => {\r\n    setModalVisible((wasModalVisible) => !wasModalVisible);\r\n  };\r\n  return (\r\n    <section>\r\n      <div className=\"container my-4\">\r\n        <button className=\"btn btn-outline-primary\" onClick={toggleModal}>\r\n          {ADD_BOARD}\r\n        </button>\r\n      </div>\r\n      <div className=\"container\">\r\n        <h1>{BOARDS}</h1>\r\n        <p>{HOME_PAGE_DESC}</p>\r\n        <Boards />\r\n      </div>\r\n      <BaseModalWrapper isModalVisible={isModalVisible} onBackDropClick={toggleModal} startTitle=\"\" />\r\n    </section>\r\n  );\r\n};\r\nexport default Main;\r\n","import React from 'react';\r\nimport { Switch, Route, Redirect, BrowserRouter } from 'react-router-dom';\r\nimport './App.css';\r\nimport Board from './pages/Board/Board';\r\nimport Home from './pages/Home/Home';\r\n\r\nconst App: React.FC = () => (\r\n  <BrowserRouter>\r\n    <div className=\"container\">\r\n      <Switch>\r\n        <Route component={Home} path=\"/\" exact />\r\n        <Route component={Board} path=\"/board/:id\" />\r\n        <Redirect exact to=\"/\" />\r\n      </Switch>\r\n    </div>\r\n  </BrowserRouter>\r\n);\r\n\r\nexport default App;\r\n","import { BoardsAction, BoardsActionTypes, BoardsState } from '../types/boards';\r\n\r\nconst initialState: BoardsState = {\r\n  getBoards: { boards: [] },\r\n  loading: false,\r\n  error: false,\r\n};\r\n\r\nexport const boardsReducer = (state = initialState, action: BoardsAction): BoardsState => {\r\n  switch (action.type) {\r\n    case BoardsActionTypes.FETCH_BOARDS:\r\n      return { loading: true, error: false, getBoards: { boards: [] } };\r\n    case BoardsActionTypes.FETCH_BOARDS_SUCCESS:\r\n      return { loading: false, error: false, getBoards: action.payload };\r\n    case BoardsActionTypes.FETCH_BOARDS_ERROR:\r\n      return { loading: false, error: action.payload, getBoards: { boards: [] } };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { ListsAction, ListsActionTypes, ListsState } from '../types/lists';\r\n\r\nconst initialState: ListsState = {\r\n  getLists: {\r\n    title: '',\r\n    users: [],\r\n    lists: [],\r\n  },\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nexport const listsReducer = (state = initialState, action: ListsAction): ListsState => {\r\n  switch (action.type) {\r\n    case ListsActionTypes.FETCH_LISTS:\r\n      return {\r\n        loading: true,\r\n        error: null,\r\n        getLists: {\r\n          title: '',\r\n          users: [],\r\n          lists: [],\r\n        },\r\n      };\r\n    case ListsActionTypes.FETCH_LISTS_SUCCESS:\r\n      return { loading: false, error: null, getLists: action.payload };\r\n    case ListsActionTypes.FETCH_LISTS_ERROR:\r\n      return {\r\n        loading: false,\r\n        error: action.payload,\r\n        getLists: {\r\n          title: '',\r\n          users: [],\r\n          lists: [],\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { ChangeItemActions, ChangeItemActionTypes, ChangeItemState } from '../types/changeItem';\r\n\r\nconst initialState: ChangeItemState = {\r\n  changeState: false,\r\n  error: null,\r\n};\r\n\r\nexport const itemChangeReducer = (state = initialState, action: ChangeItemActions): ChangeItemState => {\r\n  switch (action.type) {\r\n    case ChangeItemActionTypes.CHANGE_ITEM_SUCCESS:\r\n      return { changeState: true, error: null };\r\n    case ChangeItemActionTypes.CHANGE_ITEM_ERROR:\r\n      return { changeState: true, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { boardsReducer } from './boardsReducer';\r\nimport { listsReducer } from './listsReducer';\r\nimport { itemChangeReducer } from './itemChangeReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n  boards: boardsReducer,\r\n  lists: listsReducer,\r\n  changeItem: itemChangeReducer,\r\n});\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n","import { applyMiddleware, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { rootReducer } from './reducers';\r\n\r\n// export const store = createStore(rootReducer, compose(applyMiddleware(thunk), composeWithDevTools()));\r\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport { store } from './store';\r\n\r\n/* import reportWebVitals from './reportWebVitals'; */\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n/* reportWebVitals(); */\r\n"],"sourceRoot":""}