{"version":3,"sources":["store/types/boards.ts","common/constans/api.ts","store/actions/boards.ts","store/types/lists.ts","store/actions/lists.ts","store/types/addBoard.ts","store/actions/boardPost.ts","store/types/editBoard.ts","store/actions/editBoard.ts","store/types/deleteBoard.ts","store/actions/boardDelete.ts","store/actions/index.ts","hooks/useActions.ts","hooks/useTypeSelector.ts","components/Alert.tsx","pages/Modal/boardCreate/BoardCreate.tsx","common/constans/messages.ts","pages/Modal/Modal.tsx","pages/Modal/ModalPopup.styles.ts","pages/Modal/BaseModalWrapper.tsx","pages/Board/Board.tsx","functions/cardColorGenerator.ts","pages/Home/components/boards/Boards.tsx","pages/Home/Home.tsx","App.tsx","store/reducers/boardsReducer.ts","store/reducers/listsReducer.ts","store/reducers/boardReducer.ts","store/reducers/boardEditReducer.ts","store/reducers/deleteBoardReducer.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["BoardsActionTypes","process","ListsActionTypes","url","api","fetchBoards","dispatch","a","type","FETCH_BOARDS","axios","get","headers","Authorization","response","FETCH_BOARDS_SUCCESS","payload","data","FETCH_BOARDS_ERROR","AddBoardActionTypes","fetchLists","id","FETCH_LISTS_SUCCESS","FETCH_LISTS_ERROR","EditBoardActionTypes","addBoard","newBoard","post","ADD_BOARD_SUCCESS","e","ADD_BOARD_ERROR","DeleteBoardActionTypes","editBoard","urlEdit","put","EDIT_BOARD_SUCCESS","EDIT_BOARD_ERROR","deleteBoard","delete","DELETE_BOARD_SUCCESS","DELETE_BOARD_ERROR","BoardsActionCreators","ListsActionCreators","BoardActionCreators","BoardEditActionCreators","BoardDeleteActionCreators","useActions","useDispatch","bindActionCreators","ActionCreators","useTypeSelector","useSelector","Alert","show","text","danger","className","role","BoardCreate","startTitle","isCreate","useState","title","setTitle","isAlert","setAlert","isDanger","setDanger","textAlert","setTextAlert","setUpAlert","alrt","dang","setTimeout","onChange","event","target","value","placeholder","onClick","titleBoard","trim","replaceAll","length","Overlay","styled","div","Modal","onBackDropClick","children","ReactDOM","createPortal","stopPropagation","document","getElementById","ModalContainer","DesktopModalContainer","Header","h3","Close","BaseModalWrapper","isModalVisible","Board","match","history","useHistory","params","state","lists","getLists","error","loading","useEffect","setModalVisible","toggleModal","wasModalVisible","newList","Object","keys","map","list","Number","cards","idCard","card","to","push","addList","position","colorGenerator","min","max","colors","Array","i","Math","floor","random","getRandomFloat","Boards","boards","getBoards","board","style","background","Main","App","component","Home","path","exact","initialState","users","added","edited","deleted","rootReducer","combineReducers","action","FETCH_LISTS","boardAdd","boardEdit","boardDelete","store","createStore","composeWithDevTools","applyMiddleware","thunk","render"],"mappings":"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","file":"static/js/main.f1f8f130.chunk.js","sourcesContent":["interface IBoard {\r\n  id: number;\r\n  title: string;\r\n}\r\n\r\ninterface IBoards {\r\n  boards: IBoard[];\r\n}\r\nexport interface BoardsState {\r\n  getBoards: IBoards;\r\n  loading: boolean;\r\n  error: null | string;\r\n}\r\nexport enum BoardsActionTypes {\r\n  FETCH_BOARDS = 'FETCH_BOARDS',\r\n  FETCH_BOARDS_SUCCESS = 'FETCH_BOARDS_SUCCESS',\r\n  FETCH_BOARDS_ERROR = 'FETCH_BOARDS_ERROR',\r\n}\r\n\r\ninterface FetchBoardsAction {\r\n  type: BoardsActionTypes.FETCH_BOARDS;\r\n}\r\ninterface FetchBoardsSuccessAction {\r\n  type: BoardsActionTypes.FETCH_BOARDS_SUCCESS;\r\n  payload: IBoards;\r\n}\r\ninterface FetchBoardsErrorAction {\r\n  type: BoardsActionTypes.FETCH_BOARDS_ERROR;\r\n  payload: string;\r\n}\r\nexport type BoardsAction = FetchBoardsAction | FetchBoardsSuccessAction | FetchBoardsErrorAction;\r\n","export default {\r\n  baseURL: process.env.REACT_APP_API_URL || '',\r\n};\r\n","import axios from 'axios';\r\nimport { Dispatch } from 'redux';\r\nimport api from '../../common/constans/api';\r\nimport { BoardsAction, BoardsActionTypes } from '../types/boards';\r\n\r\nconst url = `${api.baseURL}/board`;\r\nexport const fetchBoards = () => async (dispatch: Dispatch<BoardsAction>): Promise<void> => {\r\n  try {\r\n    dispatch({ type: BoardsActionTypes.FETCH_BOARDS });\r\n    const response = await axios.get(url, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: 'Bearer 123',\r\n      },\r\n    });\r\n    dispatch({ type: BoardsActionTypes.FETCH_BOARDS_SUCCESS, payload: response.data });\r\n  } catch (e) {\r\n    dispatch({ type: BoardsActionTypes.FETCH_BOARDS_ERROR, payload: \"Error. Boards info don't load\" });\r\n  }\r\n};\r\n","interface IUser {\r\n  id: number;\r\n  username: string;\r\n}\r\n\r\ninterface ICard {\r\n  id: number;\r\n  title: string;\r\n  description: string;\r\n  users: number[];\r\n}\r\n\r\ninterface IList {\r\n  id: number;\r\n  title: string;\r\n  cards: ICard[];\r\n}\r\n\r\ninterface ILists {\r\n  users: IUser[];\r\n  lists: IList[];\r\n}\r\nexport interface ListsState {\r\n  getLists: ILists;\r\n  loading: boolean;\r\n  error: null | string;\r\n}\r\nexport enum ListsActionTypes {\r\n  FETCH_LISTS = 'FETCH_LISTS',\r\n  FETCH_LISTS_SUCCESS = 'FETCH_LISTS_SUCCESS',\r\n  FETCH_LISTS_ERROR = 'FETCH_LISTS_ERROR',\r\n}\r\n\r\ninterface FetchListsAction {\r\n  type: ListsActionTypes.FETCH_LISTS;\r\n}\r\ninterface FetchListsSuccessAction {\r\n  type: ListsActionTypes.FETCH_LISTS_SUCCESS;\r\n  payload: ILists;\r\n}\r\ninterface FetchListsErrorAction {\r\n  type: ListsActionTypes.FETCH_LISTS_ERROR;\r\n  payload: string;\r\n}\r\nexport type ListsAction = FetchListsAction | FetchListsSuccessAction | FetchListsErrorAction;\r\n","/* eslint-disable no-console */\r\nimport axios from 'axios';\r\nimport { Dispatch } from 'redux';\r\nimport api from '../../common/constans/api';\r\nimport { ListsAction, ListsActionTypes } from '../types/lists';\r\n\r\nexport const fetchLists = (id: string) => async (dispatch: Dispatch<ListsAction>): Promise<void> => {\r\n  const url = `${api.baseURL}/board/${id}`;\r\n  try {\r\n    // dispatch({ type: ListsActionTypes.FETCH_LISTS });\r\n    const response = await axios.get(url, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: 'Bearer 123',\r\n      },\r\n    });\r\n    dispatch({ type: ListsActionTypes.FETCH_LISTS_SUCCESS, payload: response.data });\r\n  } catch (e) {\r\n    dispatch({ type: ListsActionTypes.FETCH_LISTS_ERROR, payload: \"Error. Boards info didn't load\" });\r\n  }\r\n};\r\n","export enum AddBoardActionTypes {\r\n  /* ADD_BOARD = 'ADD_BOARD', */\r\n  ADD_BOARD_SUCCESS = 'ADD_BOARD_SUCCESS',\r\n  ADD_BOARD_ERROR = 'ADD_BOARD_ERROR',\r\n}\r\n\r\nexport interface AddBoardState {\r\n  added: boolean;\r\n  error: null | string;\r\n}\r\ninterface AddBoardSuccessAction {\r\n  type: AddBoardActionTypes.ADD_BOARD_SUCCESS;\r\n  payload: boolean;\r\n}\r\ninterface AddBoardErrorAction {\r\n  type: AddBoardActionTypes.ADD_BOARD_ERROR;\r\n  payload: string;\r\n}\r\nexport type AddBoardActions = AddBoardSuccessAction | AddBoardErrorAction;\r\n","import axios from 'axios';\r\nimport { Dispatch } from 'redux';\r\nimport api from '../../common/constans/api';\r\nimport { AddBoardActions, AddBoardActionTypes } from '../types/addBoard';\r\n\r\ntype ITitle = {\r\n  title: string;\r\n};\r\nconst url = `${api.baseURL}/board`;\r\nexport const addBoard = (newBoard: ITitle) => async (dispatch: Dispatch<AddBoardActions>): Promise<void> => {\r\n  try {\r\n    /* dispatch({ type: AddBoardActionTypes.ADD_BOARD, payload: false }); */\r\n    axios.post(url, newBoard, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: 'Bearer 123',\r\n      },\r\n    });\r\n    dispatch({ type: AddBoardActionTypes.ADD_BOARD_SUCCESS, payload: true });\r\n  } catch (e) {\r\n    dispatch({ type: AddBoardActionTypes.ADD_BOARD_ERROR, payload: \"Error. Boards info don't load\" });\r\n  }\r\n};\r\n","export enum EditBoardActionTypes {\r\n  /* ADD_BOARD = 'ADD_BOARD', */\r\n  EDIT_BOARD_SUCCESS = 'EDIT_BOARD_SUCCESS',\r\n  EDIT_BOARD_ERROR = 'EDIT_BOARD_ERROR',\r\n}\r\n\r\nexport interface EditBoardState {\r\n  edited: boolean;\r\n  error: null | string;\r\n}\r\ninterface EditBoardSuccessAction {\r\n  type: EditBoardActionTypes.EDIT_BOARD_SUCCESS;\r\n  payload: boolean;\r\n}\r\ninterface EditBoardErrorAction {\r\n  type: EditBoardActionTypes.EDIT_BOARD_ERROR;\r\n  payload: string;\r\n}\r\nexport type EditBoardActions = EditBoardSuccessAction | EditBoardErrorAction;\r\n","import axios from 'axios';\r\nimport { Dispatch } from 'redux';\r\nimport { EditBoardActions, EditBoardActionTypes } from '../types/editBoard';\r\n\r\ntype ITitle = {\r\n  title: string;\r\n};\r\n\r\nexport const editBoard = (newBoard: ITitle, urlEdit: string) => async (\r\n  dispatch: Dispatch<EditBoardActions>\r\n): Promise<void> => {\r\n  try {\r\n    /* dispatch({ type: AddBoardActionTypes.ADD_BOARD, payload: false }); */\r\n    axios.put(urlEdit, newBoard, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: 'Bearer 123',\r\n      },\r\n    });\r\n    dispatch({ type: EditBoardActionTypes.EDIT_BOARD_SUCCESS, payload: true });\r\n  } catch (e) {\r\n    dispatch({ type: EditBoardActionTypes.EDIT_BOARD_ERROR, payload: \"Error. Boards info don't load\" });\r\n  }\r\n};\r\n","export enum DeleteBoardActionTypes {\r\n  /* ADD_BOARD = 'ADD_BOARD', */\r\n  DELETE_BOARD_SUCCESS = 'DELETE_BOARD_SUCCESS',\r\n  DELETE_BOARD_ERROR = 'DELETE_BOARD_ERROR',\r\n}\r\n\r\nexport interface DeleteBoardState {\r\n  deleted: boolean;\r\n  error: null | string;\r\n}\r\ninterface DeleteBoardSuccessAction {\r\n  type: DeleteBoardActionTypes.DELETE_BOARD_SUCCESS;\r\n  payload: boolean;\r\n}\r\ninterface DeleteBoardErrorAction {\r\n  type: DeleteBoardActionTypes.DELETE_BOARD_ERROR;\r\n  payload: string;\r\n}\r\nexport type DeleteBoardActions = DeleteBoardSuccessAction | DeleteBoardErrorAction;\r\n","import axios from 'axios';\r\nimport { Dispatch } from 'redux';\r\nimport { DeleteBoardActions, DeleteBoardActionTypes } from '../types/deleteBoard';\r\n\r\nexport const deleteBoard = (url: string) => async (dispatch: Dispatch<DeleteBoardActions>): Promise<void> => {\r\n  try {\r\n    /* dispatch({ type: DeleteBoardActionTypes.Delete_BOARD, payload: false }); */\r\n    axios.delete(url, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: 'Bearer 123',\r\n      },\r\n    });\r\n    dispatch({ type: DeleteBoardActionTypes.DELETE_BOARD_SUCCESS, payload: true });\r\n  } catch (e) {\r\n    dispatch({ type: DeleteBoardActionTypes.DELETE_BOARD_ERROR, payload: \"Error. Boards info don't load\" });\r\n  }\r\n};\r\n","import * as BoardsActionCreators from './boards';\r\nimport * as ListsActionCreators from './lists';\r\nimport * as BoardActionCreators from './boardPost';\r\nimport * as BoardEditActionCreators from './editBoard';\r\nimport * as BoardDeleteActionCreators from './boardDelete';\r\n\r\nexport default {\r\n  ...BoardsActionCreators,\r\n  ...ListsActionCreators,\r\n  ...BoardActionCreators,\r\n  ...BoardEditActionCreators,\r\n  ...BoardDeleteActionCreators,\r\n};\r\n","/* eslint-disable @typescript-eslint/explicit-function-return-type */\r\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\nimport { useDispatch } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport ActionCreators from '../store/actions';\r\n\r\nexport const useActions = () => {\r\n  const dispatch = useDispatch();\r\n  return bindActionCreators(ActionCreators, dispatch);\r\n};\r\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\r\nimport { RootState } from '../store/reducers';\r\n\r\nexport const useTypeSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import React from 'react';\r\n\r\ntype AlertType = {\r\n  show: boolean;\r\n  text: string;\r\n  danger: boolean;\r\n};\r\nexport const Alert: React.FC<AlertType> = ({ show, text, danger }) =>\r\n  show ? (\r\n    <div className={danger ? 'alert alert-danger' : 'alert alert-success'} role=\"alert\">\r\n      {text}\r\n    </div>\r\n  ) : (\r\n    <></>\r\n  );\r\n","/* eslint-disable no-console */\r\nimport React, { useState } from 'react';\r\n// import api from '../../../common/constans/api';\r\nimport { DANGER_BOARD_NAME, SUCCESS_BOARD_NAME, SUCCESS_BOARD_NAME_EDIT } from '../../../common/constans/messages';\r\nimport { Alert } from '../../../components/Alert';\r\nimport { useActions } from '../../../hooks/useActions';\r\nimport './boardCreate.css';\r\n\r\ntype ITitle = {\r\n  title: string;\r\n};\r\n\r\ntype IProps = {\r\n  startTitle: string;\r\n  isCreate: boolean;\r\n  urlEdit: string;\r\n};\r\nconst BoardCreate: React.FC<IProps> = ({ startTitle, isCreate, urlEdit }) => {\r\n  const [title, setTitle] = useState<string>(startTitle);\r\n  const [isAlert, setAlert] = useState<boolean>(false);\r\n  const [isDanger, setDanger] = useState<boolean>(false);\r\n  const [textAlert, setTextAlert] = useState<string>('');\r\n  const newBoard: ITitle = { title };\r\n  const changeHandler = (event: React.ChangeEvent<HTMLInputElement>): void => setTitle(event.target.value);\r\n  const { addBoard } = useActions();\r\n  const { editBoard } = useActions();\r\n  const { fetchBoards } = useActions();\r\n\r\n  function isValidBoardTitle(titleBoard: string): boolean {\r\n    const newStr = titleBoard.trim().replaceAll(/[а-яА-ЯёЁ]|[a-zA-z]|[0-9]|\\s|,|-|_|\\.+/gm, '');\r\n    return newStr.length === 0 && titleBoard !== '';\r\n  }\r\n\r\n  function setUpAlert(alrt: boolean, dang: boolean, text: string): void {\r\n    setAlert(alrt);\r\n    setDanger(dang);\r\n    setTextAlert(text);\r\n    setTimeout(() => {\r\n      setTitle('');\r\n      setAlert(false);\r\n    }, 5000);\r\n  }\r\n  return (\r\n    <div className=\"container\">\r\n      <Alert show={isAlert} text={textAlert} danger={isDanger} />\r\n      <div className=\"fields mb-4\">\r\n        <div className=\"field mr-4\">\r\n          <input onChange={changeHandler} value={title} type=\"text\" id=\"title\" placeholder=\"Enter board name\" />\r\n        </div>\r\n      </div>\r\n      <button\r\n        className=\"btn btn-success mr-2 btn-new-board\"\r\n        onClick={(): void => {\r\n          if (isValidBoardTitle(title)) {\r\n            if (isCreate) {\r\n              addBoard(newBoard);\r\n              fetchBoards();\r\n            } else {\r\n              editBoard(newBoard, urlEdit);\r\n              fetchBoards();\r\n            }\r\n            setUpAlert(true, false, isCreate ? SUCCESS_BOARD_NAME : SUCCESS_BOARD_NAME_EDIT);\r\n          } else {\r\n            setUpAlert(true, true, DANGER_BOARD_NAME);\r\n          }\r\n        }}\r\n      >\r\n        {isCreate ? 'Add board' : 'Edit board'}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BoardCreate;\r\n","export const DANGER_BOARD_NAME =\r\n  'The value is empty or contains errors. Allowed characters: letters, numbers, spaces, dashes, dots, underscores.';\r\nexport const SUCCESS_BOARD_NAME = 'New board was created successfully!';\r\nexport const SUCCESS_BOARD_NAME_EDIT = 'Board title was edited successfully!';\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport styled from 'styled-components';\r\n\r\ninterface ModalProps {\r\n  onBackDropClick: () => void;\r\n}\r\n\r\nconst Overlay = styled.div`\r\n  background-color: rgba(0, 0, 0, 0.7);\r\n  position: fixed;\r\n  height: 100%;\r\n  width: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst Modal: React.FC<ModalProps> = ({ onBackDropClick, children }) =>\r\n  ReactDOM.createPortal(\r\n    <Overlay onClick={onBackDropClick}>\r\n      <div onClick={(e): void => e.stopPropagation()}>{children}</div>\r\n    </Overlay>,\r\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n    document.getElementById('modal-root')!\r\n  );\r\n\r\nexport default Modal;\r\n","import styled from 'styled-components';\r\n\r\nconst ModalContainer = styled.div`\r\n  background-color: #ffffff;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  position: relative;\r\n`;\r\nexport const DesktopModalContainer = styled(ModalContainer)`\r\n  border-radius: 7px;\r\n  box-shadow: 0 0 32px rgba(0, 0, 0, 0.5);\r\n  padding: 40px;\r\n  width: 450px;\r\n  font-size: 26px;\r\n`;\r\nexport const Header = styled.h3`\r\n  color: #25306c;\r\n  font-size: 35px;\r\n  line-height: 1em;\r\n  font-weight: bold;\r\n  margin: 5px 0 10px;\r\n  text-align: center;\r\n`;\r\n\r\nexport const Close = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 80%;\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport BoardCreate from './boardCreate/BoardCreate';\r\nimport Modal from './Modal';\r\nimport { Close, DesktopModalContainer, Header } from './ModalPopup.styles';\r\n\r\ninterface BaseModalWrapperProps {\r\n  isModalVisible: boolean;\r\n  onBackDropClick: () => void;\r\n  startTitle: string;\r\n  isCreate: boolean;\r\n  urlEdit: string;\r\n}\r\n\r\nconst BaseModalWrapper: React.FC<BaseModalWrapperProps> = ({\r\n  isModalVisible,\r\n  onBackDropClick,\r\n  startTitle,\r\n  isCreate,\r\n  urlEdit,\r\n}) => {\r\n  if (!isModalVisible) {\r\n    return null;\r\n  }\r\n  return (\r\n    <Modal onBackDropClick={onBackDropClick}>\r\n      <DesktopModalContainer>\r\n        <Close onClick={(): void => onBackDropClick()}>x</Close>\r\n        <Header>{isCreate ? 'Add new board' : 'Edit board title'}</Header>\r\n        <BoardCreate startTitle={startTitle} isCreate={isCreate} urlEdit={urlEdit} />\r\n      </DesktopModalContainer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default BaseModalWrapper;\r\n","/* eslint-disable no-console */\r\nimport axios from 'axios';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Link, RouteComponentProps, useHistory } from 'react-router-dom';\r\nimport api from '../../common/constans/api';\r\nimport { useActions } from '../../hooks/useActions';\r\nimport { useTypeSelector } from '../../hooks/useTypeSelector';\r\nimport BaseModalWrapper from '../Modal/BaseModalWrapper';\r\nimport './board.css';\r\n\r\ntype TParams = { id: string };\r\n\r\nconst Board: React.FC<RouteComponentProps<TParams>> = ({ match }) => {\r\n  const history = useHistory();\r\n  const url = `${api.baseURL}/board/${match.params.id}`;\r\n  const { getLists, error, loading } = useTypeSelector((state) => state.lists);\r\n  const { deleteBoard } = useActions();\r\n  const { fetchLists } = useActions();\r\n  useEffect(() => {\r\n    fetchLists(match.params.id);\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <h2>Loading...</h2>;\r\n  }\r\n\r\n  if (error) {\r\n    return <h2>{error}</h2>;\r\n  }\r\n\r\n  const [isModalVisible, setModalVisible] = useState(false);\r\n  const toggleModal = (): void => {\r\n    setModalVisible((wasModalVisible) => !wasModalVisible);\r\n  };\r\n\r\n  type IList = {\r\n    title: string;\r\n    position: number;\r\n  };\r\n\r\n  async function addList(newList: IList): Promise<Response> {\r\n    return axios.post(`${url}/list`, newList, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: 'Bearer 123',\r\n      },\r\n    });\r\n  }\r\n  const arr = Object.keys(getLists.lists);\r\n  const arrLenght = arr.length;\r\n  const lists =\r\n    arrLenght !== 0 ? (\r\n      Object.keys(getLists.lists).map((id) => {\r\n        const list = getLists.lists[Number(id)];\r\n        const cards = Object.keys(list.cards).map((idCard) => {\r\n          const card = getLists.lists[Number(idCard)];\r\n          return (\r\n            <li key={card.id} className=\"card board-list-item\">\r\n              {card.title}\r\n            </li>\r\n          );\r\n        });\r\n        return (\r\n          <div className=\"card board\" key={list.id}>\r\n            <h4>{list.title}</h4>\r\n            <ul className=\"board-list\">{cards}</ul>\r\n          </div>\r\n        );\r\n      })\r\n    ) : (\r\n      <h2>Any lists yet. Create your first list!</h2>\r\n    );\r\n\r\n  return (\r\n    <>\r\n      <div className=\"board-header container my-4\">\r\n        <Link to=\"/\">Home</Link>\r\n        <div className=\"board-header-title\">\r\n          <h1>Boards Number: {match.params.id}</h1>\r\n          <button className=\"btn btn-success editBoard ml-4\" onClick={toggleModal}>\r\n            Edit\r\n          </button>\r\n          <button\r\n            className=\"btn btn-danger deleteBoard ml-4\"\r\n            onClick={(): void => {\r\n              deleteBoard(url);\r\n              history.push('/');\r\n            }}\r\n          >\r\n            Delete\r\n          </button>\r\n        </div>\r\n        <button\r\n          className=\"btn btn-add-board mt-2\"\r\n          onClick={(): void => {\r\n            const newList = { title: 'aaaa', position: 2 };\r\n            addList(newList);\r\n          }}\r\n        >\r\n          Add List\r\n        </button>\r\n      </div>\r\n      <div className=\"cards\">{lists}</div>\r\n      <BaseModalWrapper\r\n        isModalVisible={isModalVisible}\r\n        onBackDropClick={toggleModal}\r\n        startTitle=\"\"\r\n        isCreate={false}\r\n        urlEdit={url}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","const LOWER_COLOR = 100;\r\nconst UPPER_COLOR = 255;\r\nconst LOWER_OPACITY = 0.3;\r\nconst UPPER_OPACITY = 0.8;\r\n\r\nfunction getRandomFloat(min: number, max: number): number {\r\n  return Math.random() * (max - min) + min;\r\n}\r\n\r\nfunction getRandomInRange(min: number, max: number): number {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport function colorGenerator(): string {\r\n  const colors: number[] = new Array(3);\r\n  for (let i = 0; i < 3; i++) {\r\n    colors[i] = getRandomInRange(LOWER_COLOR, UPPER_COLOR);\r\n  }\r\n  const a = getRandomFloat(LOWER_OPACITY, UPPER_OPACITY);\r\n\r\n  return `rgba(${colors[0]}, ${colors[1]}, ${colors[2]}, ${a})`;\r\n}\r\n","/* eslint-disable no-console */\r\nimport React, { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { colorGenerator } from '../../../../functions/cardColorGenerator';\r\nimport { useActions } from '../../../../hooks/useActions';\r\nimport { useTypeSelector } from '../../../../hooks/useTypeSelector';\r\nimport './boards.css';\r\n\r\nconst Boards: React.FC = () => {\r\n  const { getBoards, error, loading } = useTypeSelector((state) => state.boards);\r\n  const { fetchBoards } = useActions();\r\n  useEffect(() => {\r\n    fetchBoards();\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <h2>Loading...</h2>;\r\n  }\r\n\r\n  if (error) {\r\n    return <h2>{error}</h2>;\r\n  }\r\n\r\n  if (getBoards.boards.length > 0) {\r\n    return (\r\n      <div>\r\n        <div className=\"row boards-row\">\r\n          {getBoards.boards.map((board) => (\r\n            <Link\r\n              to={`/board/${board.id}`}\r\n              key={board.id}\r\n              className=\"card col-md-3 mx-2\"\r\n              style={{ background: `${colorGenerator()}` }}\r\n            >\r\n              {board.title}\r\n            </Link>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Boards</h1>\r\n      <h2>Boards wasn't create</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Boards;\r\n","import React, { useState } from 'react';\r\nimport BaseModalWrapper from '../Modal/BaseModalWrapper';\r\nimport Boards from './components/boards/Boards';\r\n\r\nconst Main: React.FC = () => {\r\n  const [isModalVisible, setModalVisible] = useState(false);\r\n  const toggleModal = (): void => {\r\n    setModalVisible((wasModalVisible) => !wasModalVisible);\r\n  };\r\n  return (\r\n    <section>\r\n      <div className=\"container my-4\">\r\n        <button className=\"btn btn-outline-primary\" onClick={toggleModal}>\r\n          Add Board\r\n        </button>\r\n      </div>\r\n      <div className=\"container\">\r\n        <h1>Boards</h1>\r\n        <p>This is a training React-project. An analogue of the \"Trello\" service.</p>\r\n        <Boards />\r\n      </div>\r\n      <BaseModalWrapper\r\n        isModalVisible={isModalVisible}\r\n        onBackDropClick={toggleModal}\r\n        startTitle=\"\"\r\n        isCreate\r\n        urlEdit=\"\"\r\n      />\r\n    </section>\r\n  );\r\n};\r\nexport default Main;\r\n","import React from 'react';\r\nimport { Switch, Route, Redirect, BrowserRouter } from 'react-router-dom';\r\nimport './App.css';\r\nimport Board from './pages/Board/Board';\r\nimport Home from './pages/Home/Home';\r\n\r\nconst App: React.FC = () => (\r\n  <BrowserRouter>\r\n    <div className=\"container\">\r\n      <Switch>\r\n        <Route component={Home} path=\"/\" exact />\r\n        <Route component={Board} path=\"/board/:id\" />\r\n        <Redirect exact to=\"/\" />\r\n      </Switch>\r\n    </div>\r\n  </BrowserRouter>\r\n);\r\n\r\nexport default App;\r\n","import { BoardsAction, BoardsActionTypes, BoardsState } from '../types/boards';\r\n\r\nconst initialState: BoardsState = {\r\n  getBoards: { boards: [{ id: 1, title: '' }] },\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nexport const boardsReducer = (state = initialState, action: BoardsAction): BoardsState => {\r\n  switch (action.type) {\r\n    case BoardsActionTypes.FETCH_BOARDS:\r\n      return { loading: true, error: null, getBoards: { boards: [{ id: 1, title: '' }] } };\r\n    case BoardsActionTypes.FETCH_BOARDS_SUCCESS:\r\n      return { loading: false, error: null, getBoards: action.payload };\r\n    case BoardsActionTypes.FETCH_BOARDS_ERROR:\r\n      return { loading: false, error: action.payload, getBoards: { boards: [{ id: 1, title: '' }] } };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { ListsAction, ListsActionTypes, ListsState } from '../types/lists';\r\n\r\nconst initialState: ListsState = {\r\n  getLists: {\r\n    users: [],\r\n    lists: [],\r\n  },\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nexport const listsReducer = (state = initialState, action: ListsAction): ListsState => {\r\n  switch (action.type) {\r\n    case ListsActionTypes.FETCH_LISTS:\r\n      return {\r\n        loading: true,\r\n        error: null,\r\n        getLists: {\r\n          users: [],\r\n          lists: [],\r\n        },\r\n      };\r\n    case ListsActionTypes.FETCH_LISTS_SUCCESS:\r\n      return { loading: false, error: null, getLists: action.payload };\r\n    case ListsActionTypes.FETCH_LISTS_ERROR:\r\n      return {\r\n        loading: false,\r\n        error: action.payload,\r\n        getLists: {\r\n          users: [],\r\n          lists: [],\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { AddBoardActions, AddBoardActionTypes, AddBoardState } from '../types/addBoard';\r\n\r\nconst initialState: AddBoardState = {\r\n  added: true,\r\n  error: null,\r\n};\r\n\r\nexport const boardReducer = (state = initialState, action: AddBoardActions): AddBoardState => {\r\n  switch (action.type) {\r\n    case AddBoardActionTypes.ADD_BOARD_SUCCESS:\r\n      return { added: true, error: null };\r\n    case AddBoardActionTypes.ADD_BOARD_ERROR:\r\n      return { added: false, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { EditBoardActions, EditBoardActionTypes, EditBoardState } from '../types/editBoard';\r\n\r\nconst initialState: EditBoardState = {\r\n  edited: true,\r\n  error: null,\r\n};\r\n\r\nexport const boardEditReducer = (state = initialState, action: EditBoardActions): EditBoardState => {\r\n  switch (action.type) {\r\n    case EditBoardActionTypes.EDIT_BOARD_SUCCESS:\r\n      return { edited: true, error: null };\r\n    case EditBoardActionTypes.EDIT_BOARD_ERROR:\r\n      return { edited: false, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { DeleteBoardActions, DeleteBoardActionTypes, DeleteBoardState } from '../types/deleteBoard';\r\n\r\nconst initialState: DeleteBoardState = {\r\n  deleted: true,\r\n  error: null,\r\n};\r\n\r\nexport const deleteBoardReducer = (state = initialState, action: DeleteBoardActions): DeleteBoardState => {\r\n  switch (action.type) {\r\n    case DeleteBoardActionTypes.DELETE_BOARD_SUCCESS:\r\n      return { deleted: true, error: null };\r\n    case DeleteBoardActionTypes.DELETE_BOARD_ERROR:\r\n      return { deleted: false, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { boardsReducer } from './boardsReducer';\r\nimport { listsReducer } from './listsReducer';\r\nimport { boardReducer } from './boardReducer';\r\nimport { boardEditReducer } from './boardEditReducer';\r\nimport { deleteBoardReducer } from './deleteBoardReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n  boards: boardsReducer,\r\n  lists: listsReducer,\r\n  boardAdd: boardReducer,\r\n  boardEdit: boardEditReducer,\r\n  boardDelete: deleteBoardReducer,\r\n});\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n","import { applyMiddleware, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { rootReducer } from './reducers';\r\n\r\n// export const store = createStore(rootReducer, compose(applyMiddleware(thunk), composeWithDevTools()));\r\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport { store } from './store';\r\n\r\n/* import reportWebVitals from './reportWebVitals'; */\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n/* reportWebVitals(); */\r\n"],"sourceRoot":""}