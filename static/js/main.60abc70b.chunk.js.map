{"version":3,"sources":["pages/Board/Board.tsx","common/constans/api.ts","pages/Home/components/boardCreate/BoardCreate.tsx","functions/cardColorGenerator.ts","store/types/boards.ts","store/actions/boards.ts","store/actions/index.ts","hooks/useTypeSelector.ts","pages/Home/components/boards/Boards.tsx","hooks/useActions.ts","pages/Home/Home.tsx","App.tsx","store/reducers/boardsReducer.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["Board","match","useState","list","setTodos","useEffect","title","lists","id","cards","items","map","item","elements","cItem","className","params","process","BoardCreate","setTitle","newBoard","url","api","to","htmlFor","onChange","event","target","value","type","placeholder","onClick","a","axios","post","headers","Authorization","colorGenerator","min","max","colors","Array","i","Math","floor","random","getRandomFloat","BoardsActionTypes","fetchBoards","dispatch","FETCH_BOARDS","get","response","FETCH_BOARDS_SUCCESS","payload","data","FETCH_BOARDS_ERROR","BoardsActionCreators","useTypeSelector","useSelector","Boards","state","boards","getBoards","error","loading","useDispatch","bindActionCreators","ActionCreators","useActions","length","board","style","background","Main","App","component","Home","path","exact","initialState","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.60abc70b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { IBoardPage } from '../../interfaces/board-page-interface';\r\nimport './board.css';\r\n\r\ntype TParams = { id: string };\r\n\r\nfunction Board({ match }: RouteComponentProps<TParams>): JSX.Element {\r\n  const [list, setTodos] = useState<IBoardPage>();\r\n  useEffect(() => {\r\n    const saved = {\r\n      title: 'My test board',\r\n      lists: [\r\n        {\r\n          id: 1,\r\n          title: 'Планы',\r\n          cards: [\r\n            { id: 1, title: 'помыть кота' },\r\n            { id: 2, title: 'приготовить суп' },\r\n            { id: 3, title: 'сходить в магазин' },\r\n          ],\r\n        },\r\n        {\r\n          id: 2,\r\n          title: 'В процессе',\r\n          cards: [{ id: 4, title: 'посмотреть сериал' }],\r\n        },\r\n        {\r\n          id: 3,\r\n          title: 'Сделано',\r\n          cards: [\r\n            { id: 5, title: 'сделать домашку' },\r\n            { id: 6, title: 'погулять с собакой' },\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n    setTodos(saved);\r\n  }, []);\r\n\r\n  const items = list?.lists.map((item) => {\r\n    const elements = item.cards.map((cItem) => (\r\n      <li key={cItem.id} className=\"card board-list-item\">\r\n        {cItem.title}\r\n      </li>\r\n    ));\r\n    return (\r\n      <div className=\"card board\" key={item.id}>\r\n        <h4>{item.title}</h4>\r\n        <ul className=\"board-list\">{elements}</ul>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <div className=\"board-header\">\r\n        <h1>Boards Number: {match.params.id}</h1>\r\n        <button className=\"btn btn-add-board mt-2\">Add List</button>\r\n      </div>\r\n      <div className=\"cards\">{items}</div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n","export default {\r\n  baseURL: process.env.REACT_APP_API_URL || '',\r\n};\r\n","/* eslint-disable no-console */\r\nimport axios from 'axios';\r\nimport React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport api from '../../../../common/constans/api';\r\nimport './boardCreate.css';\r\n\r\ntype ITitle = {\r\n  title: string;\r\n};\r\nconst BoardCreate: React.FC = () => {\r\n  const [title, setTitle] = useState<string>('');\r\n  const changeHandler = (event: React.ChangeEvent<HTMLInputElement>): void => setTitle(event.target.value);\r\n  const newBoard: ITitle = { title };\r\n  const url = `${api.baseURL}/board`;\r\n  return (\r\n    <div className=\"container\">\r\n      <Link to=\"/\">Home</Link>\r\n      <h1>Board Creator</h1>\r\n      <div className=\"fields mb-4\">\r\n        <div className=\"field mr-4\">\r\n          <label htmlFor=\"title\" className=\"label\">\r\n            Board name\r\n          </label>\r\n          <input onChange={changeHandler} value={title} type=\"text\" id=\"title\" placeholder=\"Enter board name\" />\r\n        </div>\r\n      </div>\r\n      <button\r\n        className=\"btn btn-success mr-2\"\r\n        onClick={async (): Promise<Response> =>\r\n          axios.post(url, newBoard, {\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              Authorization: 'Bearer 123',\r\n            },\r\n          })\r\n        }\r\n      >\r\n        add use axios\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BoardCreate;\r\n","const LOWER_COLOR = 100;\r\nconst UPPER_COLOR = 255;\r\nconst LOWER_OPACITY = 0.3;\r\nconst UPPER_OPACITY = 0.8;\r\n\r\nfunction getRandomFloat(min: number, max: number): number {\r\n  return Math.random() * (max - min) + min;\r\n}\r\n\r\nfunction getRandomInRange(min: number, max: number): number {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport function colorGenerator(): string {\r\n  const colors: number[] = new Array(3);\r\n  for (let i = 0; i < 3; i++) {\r\n    colors[i] = getRandomInRange(LOWER_COLOR, UPPER_COLOR);\r\n  }\r\n  const a = getRandomFloat(LOWER_OPACITY, UPPER_OPACITY);\r\n\r\n  return `rgba(${colors[0]}, ${colors[1]}, ${colors[2]}, ${a})`;\r\n}\r\n","interface IBoard {\r\n  id: number;\r\n  title: string;\r\n}\r\n\r\ninterface IBoards {\r\n  boards: IBoard[];\r\n}\r\nexport interface BoardsState {\r\n  getBoards: IBoards;\r\n  loading: boolean;\r\n  error: null | string;\r\n}\r\nexport enum BoardsActionTypes {\r\n  FETCH_BOARDS = 'FETCH_BOARDS',\r\n  FETCH_BOARDS_SUCCESS = 'FETCH_BOARDS_SUCCESS',\r\n  FETCH_BOARDS_ERROR = 'FETCH_BOARDS_ERROR',\r\n}\r\n\r\ninterface FetchBoardsAction {\r\n  type: BoardsActionTypes.FETCH_BOARDS;\r\n}\r\ninterface FetchBoardsSuccessAction {\r\n  type: BoardsActionTypes.FETCH_BOARDS_SUCCESS;\r\n  payload: IBoards;\r\n}\r\ninterface FetchBoardsErrorAction {\r\n  type: BoardsActionTypes.FETCH_BOARDS_ERROR;\r\n  payload: string;\r\n}\r\nexport type BoardsAction = FetchBoardsAction | FetchBoardsSuccessAction | FetchBoardsErrorAction;\r\n","import axios from 'axios';\r\nimport { Dispatch } from 'redux';\r\nimport { BoardsAction, BoardsActionTypes } from '../types/boards';\r\n\r\nexport const fetchBoards = () => async (dispatch: Dispatch<BoardsAction>): Promise<void> => {\r\n  try {\r\n    dispatch({ type: BoardsActionTypes.FETCH_BOARDS });\r\n    const response = await axios.get('https://trello-back.shpp.me/lmyetolkina/api/v1/board', {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: 'Bearer 123',\r\n      },\r\n    });\r\n    dispatch({ type: BoardsActionTypes.FETCH_BOARDS_SUCCESS, payload: response.data });\r\n  } catch (e) {\r\n    dispatch({ type: BoardsActionTypes.FETCH_BOARDS_ERROR, payload: \"Error. Boards info don't load\" });\r\n  }\r\n};\r\n","import * as BoardsActionCreators from './boards';\r\n\r\nexport default {\r\n  ...BoardsActionCreators,\r\n};\r\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\r\nimport { RootState } from '../store/reducers';\r\n\r\nexport const useTypeSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","/* eslint-disable no-console */\r\nimport React, { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { colorGenerator } from '../../../../functions/cardColorGenerator';\r\nimport { useActions } from '../../../../hooks/useActions';\r\nimport { useTypeSelector } from '../../../../hooks/useTypeSelector';\r\nimport './boards.css';\r\n\r\nconst Boards: React.FC = () => {\r\n  const { getBoards, error, loading } = useTypeSelector((state) => state.boards);\r\n  const { fetchBoards } = useActions();\r\n  useEffect(() => {\r\n    fetchBoards();\r\n  }, []);\r\n  if (loading) {\r\n    return <h2>Loading...</h2>;\r\n  }\r\n\r\n  if (error) {\r\n    return <h2>{error}</h2>;\r\n  }\r\n\r\n  if (getBoards.boards.length > 0) {\r\n    return (\r\n      <div>\r\n        <div className=\"row\">\r\n          {getBoards.boards.map((board) => (\r\n            <Link\r\n              to={`/board/${board.id}`}\r\n              key={board.id}\r\n              className=\"card col-md-3 mx-2 mb-2\"\r\n              style={{ background: `${colorGenerator()}` }}\r\n            >\r\n              {board.title}\r\n            </Link>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Boards</h1>\r\n      <h2>Boards wasn't create</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Boards;\r\n","/* eslint-disable @typescript-eslint/explicit-function-return-type */\r\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\nimport { useDispatch } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport ActionCreators from '../store/actions';\r\n\r\nexport const useActions = () => {\r\n  const dispatch = useDispatch();\r\n  return bindActionCreators(ActionCreators, dispatch);\r\n};\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Boards from './components/boards/Boards';\r\n\r\nconst Main: React.FC = () => (\r\n  <section>\r\n    <div className=\"container mb-4\">\r\n      <Link className=\"board-title mr-4\" to=\"/boardCreate\">\r\n        Add Board\r\n      </Link>\r\n    </div>\r\n    <div className=\"container\">\r\n      <h1>My Boards</h1>\r\n      <p>This is a training React-project. An analogue of the \"Trello\" service.</p>\r\n      <Boards />\r\n    </div>\r\n  </section>\r\n);\r\nexport default Main;\r\n","import React from 'react';\r\nimport { Switch, Route, Redirect, BrowserRouter } from 'react-router-dom';\r\nimport './App.css';\r\nimport Board from './pages/Board/Board';\r\nimport BoardCreate from './pages/Home/components/boardCreate/BoardCreate';\r\nimport Home from './pages/Home/Home';\r\n\r\nconst App: React.FC = () => (\r\n  <BrowserRouter>\r\n    <div className=\"container\">\r\n      <Switch>\r\n        <Route component={Home} path=\"/\" exact />\r\n        <Route component={BoardCreate} path=\"/boardCreate\" />\r\n        <Route component={Board} path=\"/board/:id\" />\r\n        <Redirect exact to=\"/\" />\r\n      </Switch>\r\n    </div>\r\n  </BrowserRouter>\r\n);\r\n\r\nexport default App;\r\n","import { BoardsAction, BoardsActionTypes, BoardsState } from '../types/boards';\r\n\r\nconst initialState: BoardsState = {\r\n  getBoards: { boards: [{ id: 1, title: '' }] },\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nexport const boardsReducer = (state = initialState, action: BoardsAction): BoardsState => {\r\n  switch (action.type) {\r\n    case BoardsActionTypes.FETCH_BOARDS:\r\n      return { loading: true, error: null, getBoards: { boards: [{ id: 1, title: '' }] } };\r\n    case BoardsActionTypes.FETCH_BOARDS_SUCCESS:\r\n      return { loading: false, error: null, getBoards: action.payload };\r\n    case BoardsActionTypes.FETCH_BOARDS_ERROR:\r\n      return { loading: false, error: action.payload, getBoards: { boards: [{ id: 1, title: '' }] } };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { boardsReducer } from './boardsReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n  boards: boardsReducer,\r\n});\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n","import { applyMiddleware, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { rootReducer } from './reducers';\r\n\r\n// export const store = createStore(rootReducer, compose(applyMiddleware(thunk), composeWithDevTools()));\r\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport { store } from './store';\r\n\r\n/* import reportWebVitals from './reportWebVitals'; */\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n/* reportWebVitals(); */\r\n"],"sourceRoot":""}