{"version":3,"sources":["pages/Board/Board.tsx","components/Alert.tsx","pages/Modal/boardCreate/BoardCreate.tsx","common/constans/api.ts","common/constans/messages.ts","pages/Modal/Modal.tsx","pages/Modal/ModalPopup.styles.ts","pages/Modal/BaseModalWrapper.tsx","functions/cardColorGenerator.ts","store/types/boards.ts","store/actions/boards.ts","store/actions/index.ts","hooks/useTypeSelector.ts","pages/Home/components/boards/Boards.tsx","hooks/useActions.ts","pages/Home/Home.tsx","App.tsx","store/reducers/boardsReducer.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["Board","match","useState","list","setTodos","useEffect","title","lists","id","cards","items","map","item","elements","cItem","className","to","params","Alert","show","text","danger","role","url","process","newBoard","a","axios","post","headers","Authorization","BoardCreate","setTitle","isAlert","setAlert","isDanger","setDanger","textAlert","setTextAlert","setUpAlert","alrt","dang","setTimeout","onChange","event","target","value","type","placeholder","onClick","titleBoard","newStr","trim","replaceAll","console","log","length","isValidBoardTitle","postBoard","Overlay","styled","div","Modal","onBackDropClick","children","ReactDOM","createPortal","e","stopPropagation","document","getElementById","ModalContainer","DesktopModalContainer","Header","h3","Close","BaseModalWrapper","isModalVisible","colorGenerator","min","max","colors","Array","i","Math","floor","random","getRandomFloat","BoardsActionTypes","fetchBoards","dispatch","FETCH_BOARDS","get","response","FETCH_BOARDS_SUCCESS","payload","data","FETCH_BOARDS_ERROR","BoardsActionCreators","useTypeSelector","useSelector","Boards","state","boards","getBoards","error","loading","useDispatch","bindActionCreators","ActionCreators","useActions","board","style","background","Main","setModalVisible","toggleModal","wasModalVisible","App","component","Home","path","exact","initialState","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","render"],"mappings":"qXAkEeA,MA3Df,YAAsE,IAArDC,EAAoD,EAApDA,MAAoD,EAC1CC,qBAD0C,mBAC5DC,EAD4D,KACtDC,EADsD,KAEnEC,qBAAU,WA4BRD,EA3Bc,CACZE,MAAO,gBACPC,MAAO,CACL,CACEC,GAAI,EACJF,MAAO,iCACPG,MAAO,CACL,CAAED,GAAI,EAAGF,MAAO,iEAChB,CAAEE,GAAI,EAAGF,MAAO,yFAChB,CAAEE,GAAI,EAAGF,MAAO,kGAGpB,CACEE,GAAI,EACJF,MAAO,0DACPG,MAAO,CAAC,CAAED,GAAI,EAAGF,MAAO,uGAE1B,CACEE,GAAI,EACJF,MAAO,6CACPG,MAAO,CACL,CAAED,GAAI,EAAGF,MAAO,yFAChB,CAAEE,GAAI,EAAGF,MAAO,6GAMvB,IAEH,IAAMI,EAAK,OAAGP,QAAH,IAAGA,OAAH,EAAGA,EAAMI,MAAMI,KAAI,SAACC,GAC7B,IAAMC,EAAWD,EAAKH,MAAME,KAAI,SAACG,GAAD,OAC9B,oBAAmBC,UAAU,uBAA7B,SACGD,EAAMR,OADAQ,EAAMN,OAIjB,OACE,sBAAKO,UAAU,aAAf,UACE,6BAAKH,EAAKN,QACV,oBAAIS,UAAU,aAAd,SAA4BF,MAFGD,EAAKJ,OAO1C,OACE,qCACE,sBAAKO,UAAU,8BAAf,UACE,cAAC,IAAD,CAAMC,GAAG,IAAT,kBACA,iDAAoBf,EAAMgB,OAAOT,MACjC,wBAAQO,UAAU,yBAAlB,yBAEF,qBAAKA,UAAU,QAAf,SAAwBL,Q,0CCtDjBQ,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,KAAMC,EAAf,EAAeA,OAAf,OACxCF,EACE,qBAAKJ,UAAWM,EAAS,qBAAuB,sBAAuBC,KAAK,QAA5E,SACGF,IAGH,8BCLEG,G,MAAG,UCPEC,iDDOF,W,4CAKT,WAAyBC,GAAzB,SAAAC,EAAA,+EACSC,IAAMC,KAAKL,EAAKE,EAAU,CAC/BI,QAAS,CACP,eAAgB,mBAChBC,cAAe,iBAJrB,4C,sBASA,I,UAgDeC,EAhDe,WAAO,IAAD,EACR7B,mBAAiB,IADT,mBAC3BI,EAD2B,KACpB0B,EADoB,OAEN9B,oBAAkB,GAFZ,mBAE3B+B,EAF2B,KAElBC,EAFkB,OAGJhC,oBAAkB,GAHd,mBAG3BiC,EAH2B,KAGjBC,EAHiB,OAIAlC,mBAAiB,IAJjB,mBAI3BmC,EAJ2B,KAIhBC,EAJgB,KAK5Bb,EAAmB,CAAEnB,SAS3B,SAASiC,EAAWC,EAAeC,EAAerB,GAChDc,EAASM,GACTJ,EAAUK,GACVH,EAAalB,GACbsB,YAAW,WACTV,EAAS,IACTE,GAAS,KACR,KAEL,OACE,sBAAKnB,UAAU,YAAf,UACE,cAAC,EAAD,CAAOI,KAAMc,EAASb,KAAMiB,EAAWhB,OAAQc,IAC/C,qBAAKpB,UAAU,cAAf,SACE,qBAAKA,UAAU,aAAf,SACE,uBAAO4B,SAtBO,SAACC,GAAD,OAAsDZ,EAASY,EAAMC,OAAOC,QAsB1DA,MAAOxC,EAAOyC,KAAK,OAAOvC,GAAG,QAAQwC,YAAY,yBAGrF,wBACEjC,UAAU,qCACVkC,QAAS,YAzBf,SAA2BC,GACzB,IAAMC,EAASD,EAAWE,OAAOC,WAAW,yEAA4C,IAExF,OADAC,QAAQC,IAAR,WAAgBJ,EAAhB,YAA0BA,EAAOK,SACR,IAAlBL,EAAOK,QAA+B,KAAfN,EAuBpBO,CAAkBnD,GAIpBiC,GAAW,GAAM,EE3D3B,qH,oCFwDUmB,CAAUjC,GACVc,GAAW,GAAM,EExDK,yCFmD5B,2B,gBG7CAoB,EAAUC,IAAOC,IAAV,uNAqBEC,EATqB,SAAC,GAAD,IAAGC,EAAH,EAAGA,gBAAiBC,EAApB,EAAoBA,SAApB,OAClCC,IAASC,aACP,cAACP,EAAD,CAASV,QAASc,EAAlB,SACE,qBAAKd,QAAS,SAACkB,GAAD,OAAaA,EAAEC,mBAA7B,SAAiDJ,MAGnDK,SAASC,eAAe,gBCxBtBC,EAAiBX,IAAOC,IAAV,sJAOPW,EAAwBZ,YAAOW,EAAPX,CAAH,sJAOrBa,EAASb,IAAOc,GAAV,4JASNC,EAAQf,IAAOC,IAAV,oHCAHe,EAf2C,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,eAAgBd,EAAsB,EAAtBA,gBAC3E,OAAKc,EAIH,cAAC,EAAD,CAAOd,gBAAiBA,EAAxB,SACE,eAACS,EAAD,WACE,cAACG,EAAD,CAAO1B,QAAS,kBAAYc,KAA5B,eACA,cAACU,EAAD,4BACA,cAAC,EAAD,SAPG,MCCJ,SAASK,IAEd,IADA,IALwBC,EAAaC,EAK/BC,EAAmB,IAAIC,MAAM,GAC1BC,EAAI,EAAGA,EAAI,EAAGA,IACrBF,EAAOE,IAPeJ,EATN,IASmBC,EARnB,IASXI,KAAKC,MAAMD,KAAKE,UAAYN,EAAMD,EAAM,IAAMA,GAQrD,IAAMrD,EAbR,SAAwBqD,EAAaC,GACnC,OAAOI,KAAKE,UAAYN,EAAMD,GAAOA,EAY3BQ,CAhBU,GACA,IAiBpB,MAAM,QAAN,OAAeN,EAAO,GAAtB,aAA6BA,EAAO,GAApC,aAA2CA,EAAO,GAAlD,aAAyDvD,EAAzD,K,ICPU8D,E,yBAAAA,K,4BAAAA,E,4CAAAA,E,yCAAAA,M,KCTL,IAAMC,EAAc,yDAAM,WAAOC,GAAP,eAAAhE,EAAA,sEAE7BgE,EAAS,CAAE3C,KAAMyC,EAAkBG,eAFN,SAGNhE,IAAMiE,IAAI,uDAAwD,CACvF/D,QAAS,CACP,eAAgB,mBAChBC,cAAe,gBANU,OAGvB+D,EAHuB,OAS7BH,EAAS,CAAE3C,KAAMyC,EAAkBM,qBAAsBC,QAASF,EAASG,OAT9C,gDAW7BN,EAAS,CAAE3C,KAAMyC,EAAkBS,mBAAoBF,QAAS,kCAXnC,yDAAN,uDCFZ,iBACVG,GCAQC,EAAmDC,IC8CjDC,G,MAzCU,WAAO,IAAD,EACSF,GAAgB,SAACG,GAAD,OAAWA,EAAMC,UAA/DC,EADqB,EACrBA,UAAWC,EADU,EACVA,MAAOC,EADG,EACHA,QAClBjB,ECJgB,WACxB,IAAMC,EAAWiB,cACjB,OAAOC,6BAAmBC,EAAgBnB,GDElBoB,GAAhBrB,YAIR,OAHApF,qBAAU,WACRoF,MACC,IACCiB,EACK,4CAGLD,EACK,6BAAKA,IAGVD,EAAUD,OAAO/C,OAAS,EAE1B,8BACE,qBAAKzC,UAAU,iBAAf,SACGyF,EAAUD,OAAO5F,KAAI,SAACoG,GAAD,OACpB,cAAC,IAAD,CACE/F,GAAE,iBAAY+F,EAAMvG,IAEpBO,UAAU,qBACViG,MAAO,CAAEC,WAAW,GAAD,OAAKnC,MAJ1B,SAMGiC,EAAMzG,OAJFyG,EAAMvG,WAarB,gCACE,wCACA,2DEnBS0G,EArBQ,WAAO,IAAD,EACehH,oBAAS,GADxB,mBACpB2E,EADoB,KACJsC,EADI,KAErBC,EAAc,WAClBD,GAAgB,SAACE,GAAD,OAAsBA,MAExC,OACE,oCACE,qBAAKtG,UAAU,iBAAf,SACE,wBAAQA,UAAU,0BAA0BkC,QAASmE,EAArD,yBAIF,sBAAKrG,UAAU,YAAf,UACE,wCACA,uGACA,cAAC,EAAD,OAEF,cAAC,EAAD,CAAkB8D,eAAgBA,EAAgBd,gBAAiBqD,QCH1DE,EAZO,kBACpB,cAAC,IAAD,UACE,qBAAKvG,UAAU,YAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOwG,UAAWC,EAAMC,KAAK,IAAIC,OAAK,IACtC,cAAC,IAAD,CAAOH,UAAWvH,EAAOyH,KAAK,eAC9B,cAAC,IAAD,CAAUC,OAAK,EAAC1G,GAAG,c,gBCVrB2G,EAA4B,CAChCnB,UAAW,CAAED,OAAQ,CAAC,CAAE/F,GAAI,EAAGF,MAAO,MACtCoG,SAAS,EACTD,MAAO,MCFImB,EAAcC,0BAAgB,CACzCtB,ODI2B,WAA8D,IAA7DD,EAA4D,uDAApDqB,EAAcG,EAAsC,uCACxF,OAAQA,EAAO/E,MACb,KAAKyC,EAAkBG,aACrB,MAAO,CAAEe,SAAS,EAAMD,MAAO,KAAMD,UAAW,CAAED,OAAQ,CAAC,CAAE/F,GAAI,EAAGF,MAAO,OAC7E,KAAKkF,EAAkBM,qBACrB,MAAO,CAAEY,SAAS,EAAOD,MAAO,KAAMD,UAAWsB,EAAO/B,SAC1D,KAAKP,EAAkBS,mBACrB,MAAO,CAAES,SAAS,EAAOD,MAAOqB,EAAO/B,QAASS,UAAW,CAAED,OAAQ,CAAC,CAAE/F,GAAI,EAAGF,MAAO,OACxF,QACE,OAAOgG,MEXAyB,EAAQC,sBAAYJ,EAAaK,8BAAoBC,0BAAgBC,OCGlFlE,IAASmE,OACP,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEF1D,SAASC,eAAe,W","file":"static/js/main.a8c69969.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Link, RouteComponentProps } from 'react-router-dom';\r\nimport { IBoardPage } from '../../interfaces/board-page-interface';\r\nimport './board.css';\r\n\r\ntype TParams = { id: string };\r\n\r\nfunction Board({ match }: RouteComponentProps<TParams>): JSX.Element {\r\n  const [list, setTodos] = useState<IBoardPage>();\r\n  useEffect(() => {\r\n    const saved = {\r\n      title: 'My test board',\r\n      lists: [\r\n        {\r\n          id: 1,\r\n          title: 'Планы',\r\n          cards: [\r\n            { id: 1, title: 'помыть кота' },\r\n            { id: 2, title: 'приготовить суп' },\r\n            { id: 3, title: 'сходить в магазин' },\r\n          ],\r\n        },\r\n        {\r\n          id: 2,\r\n          title: 'В процессе',\r\n          cards: [{ id: 4, title: 'посмотреть сериал' }],\r\n        },\r\n        {\r\n          id: 3,\r\n          title: 'Сделано',\r\n          cards: [\r\n            { id: 5, title: 'сделать домашку' },\r\n            { id: 6, title: 'погулять с собакой' },\r\n          ],\r\n        },\r\n      ],\r\n    };\r\n    setTodos(saved);\r\n  }, []);\r\n\r\n  const items = list?.lists.map((item) => {\r\n    const elements = item.cards.map((cItem) => (\r\n      <li key={cItem.id} className=\"card board-list-item\">\r\n        {cItem.title}\r\n      </li>\r\n    ));\r\n    return (\r\n      <div className=\"card board\" key={item.id}>\r\n        <h4>{item.title}</h4>\r\n        <ul className=\"board-list\">{elements}</ul>\r\n      </div>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <div className=\"board-header container my-4\">\r\n        <Link to=\"/\">Home</Link>\r\n        <h1>Boards Number: {match.params.id}</h1>\r\n        <button className=\"btn btn-add-board mt-2\">Add List</button>\r\n      </div>\r\n      <div className=\"cards\">{items}</div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n","import React from 'react';\r\n\r\ntype AlertType = {\r\n  show: boolean;\r\n  text: string;\r\n  danger: boolean;\r\n};\r\nexport const Alert: React.FC<AlertType> = ({ show, text, danger }) =>\r\n  show ? (\r\n    <div className={danger ? 'alert alert-danger' : 'alert alert-success'} role=\"alert\">\r\n      {text}\r\n    </div>\r\n  ) : (\r\n    <></>\r\n  );\r\n","/* eslint-disable no-console */\r\nimport axios from 'axios';\r\nimport React, { useState } from 'react';\r\nimport api from '../../../common/constans/api';\r\nimport { DANGER_BOARD_NAME, SUCCESS_BOARD_NAME } from '../../../common/constans/messages';\r\nimport { Alert } from '../../../components/Alert';\r\nimport './boardCreate.css';\r\n\r\nconst url = `${api.baseURL}/board`;\r\ntype ITitle = {\r\n  title: string;\r\n};\r\n\r\nasync function postBoard(newBoard: ITitle): Promise<Response> {\r\n  return axios.post(url, newBoard, {\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      Authorization: 'Bearer 123',\r\n    },\r\n  });\r\n}\r\n\r\nconst BoardCreate: React.FC = () => {\r\n  const [title, setTitle] = useState<string>('');\r\n  const [isAlert, setAlert] = useState<boolean>(false);\r\n  const [isDanger, setDanger] = useState<boolean>(false);\r\n  const [textAlert, setTextAlert] = useState<string>('');\r\n  const newBoard: ITitle = { title };\r\n  const changeHandler = (event: React.ChangeEvent<HTMLInputElement>): void => setTitle(event.target.value);\r\n\r\n  function isValidBoardTitle(titleBoard: string): boolean {\r\n    const newStr = titleBoard.trim().replaceAll(/[а-яА-ЯёЁ]|[a-zA-z]|[0-9]|\\s|,|-|_|\\.+/gm, '');\r\n    console.log(`:${newStr}:${newStr.length}`);\r\n    return newStr.length === 0 && titleBoard !== '';\r\n  }\r\n\r\n  function setUpAlert(alrt: boolean, dang: boolean, text: string): void {\r\n    setAlert(alrt);\r\n    setDanger(dang);\r\n    setTextAlert(text);\r\n    setTimeout(() => {\r\n      setTitle('');\r\n      setAlert(false);\r\n    }, 5000);\r\n  }\r\n  return (\r\n    <div className=\"container\">\r\n      <Alert show={isAlert} text={textAlert} danger={isDanger} />\r\n      <div className=\"fields mb-4\">\r\n        <div className=\"field mr-4\">\r\n          <input onChange={changeHandler} value={title} type=\"text\" id=\"title\" placeholder=\"Enter board name\" />\r\n        </div>\r\n      </div>\r\n      <button\r\n        className=\"btn btn-success mr-2 btn-new-board\"\r\n        onClick={(): void => {\r\n          if (isValidBoardTitle(title)) {\r\n            postBoard(newBoard);\r\n            setUpAlert(true, false, SUCCESS_BOARD_NAME);\r\n          } else {\r\n            setUpAlert(true, true, DANGER_BOARD_NAME);\r\n          }\r\n        }}\r\n      >\r\n        Add board\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BoardCreate;\r\n","export default {\r\n  baseURL: process.env.REACT_APP_API_URL || '',\r\n};\r\n","export const DANGER_BOARD_NAME =\r\n  'The value is empty or contains errors. Allowed characters: letters, numbers, spaces, dashes, dots, underscores.';\r\nexport const SUCCESS_BOARD_NAME = 'New board was created successfully!';\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport styled from 'styled-components';\r\n\r\ninterface ModalProps {\r\n  onBackDropClick: () => void;\r\n}\r\n\r\nconst Overlay = styled.div`\r\n  background-color: rgba(0, 0, 0, 0.7);\r\n  position: fixed;\r\n  height: 100%;\r\n  width: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst Modal: React.FC<ModalProps> = ({ onBackDropClick, children }) =>\r\n  ReactDOM.createPortal(\r\n    <Overlay onClick={onBackDropClick}>\r\n      <div onClick={(e): void => e.stopPropagation()}>{children}</div>\r\n    </Overlay>,\r\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n    document.getElementById('modal-root')!\r\n  );\r\n\r\nexport default Modal;\r\n","import styled from 'styled-components';\r\n\r\nconst ModalContainer = styled.div`\r\n  background-color: #ffffff;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  position: relative;\r\n`;\r\nexport const DesktopModalContainer = styled(ModalContainer)`\r\n  border-radius: 7px;\r\n  box-shadow: 0 0 32px rgba(0, 0, 0, 0.5);\r\n  padding: 40px;\r\n  width: 450px;\r\n  font-size: 26px;\r\n`;\r\nexport const Header = styled.h3`\r\n  color: #25306c;\r\n  font-size: 35px;\r\n  line-height: 1em;\r\n  font-weight: bold;\r\n  margin: 5px 0 10px;\r\n  text-align: center;\r\n`;\r\n\r\nexport const Close = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 80%;\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport BoardCreate from './boardCreate/BoardCreate';\r\nimport Modal from './Modal';\r\nimport { Close, DesktopModalContainer, Header } from './ModalPopup.styles';\r\n\r\ninterface BaseModalWrapperProps {\r\n  isModalVisible: boolean;\r\n  onBackDropClick: () => void;\r\n}\r\n\r\nconst BaseModalWrapper: React.FC<BaseModalWrapperProps> = ({ isModalVisible, onBackDropClick }) => {\r\n  if (!isModalVisible) {\r\n    return null;\r\n  }\r\n  return (\r\n    <Modal onBackDropClick={onBackDropClick}>\r\n      <DesktopModalContainer>\r\n        <Close onClick={(): void => onBackDropClick()}>x</Close>\r\n        <Header>Add new board</Header>\r\n        <BoardCreate />\r\n      </DesktopModalContainer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default BaseModalWrapper;\r\n","const LOWER_COLOR = 100;\r\nconst UPPER_COLOR = 255;\r\nconst LOWER_OPACITY = 0.3;\r\nconst UPPER_OPACITY = 0.8;\r\n\r\nfunction getRandomFloat(min: number, max: number): number {\r\n  return Math.random() * (max - min) + min;\r\n}\r\n\r\nfunction getRandomInRange(min: number, max: number): number {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport function colorGenerator(): string {\r\n  const colors: number[] = new Array(3);\r\n  for (let i = 0; i < 3; i++) {\r\n    colors[i] = getRandomInRange(LOWER_COLOR, UPPER_COLOR);\r\n  }\r\n  const a = getRandomFloat(LOWER_OPACITY, UPPER_OPACITY);\r\n\r\n  return `rgba(${colors[0]}, ${colors[1]}, ${colors[2]}, ${a})`;\r\n}\r\n","interface IBoard {\r\n  id: number;\r\n  title: string;\r\n}\r\n\r\ninterface IBoards {\r\n  boards: IBoard[];\r\n}\r\nexport interface BoardsState {\r\n  getBoards: IBoards;\r\n  loading: boolean;\r\n  error: null | string;\r\n}\r\nexport enum BoardsActionTypes {\r\n  FETCH_BOARDS = 'FETCH_BOARDS',\r\n  FETCH_BOARDS_SUCCESS = 'FETCH_BOARDS_SUCCESS',\r\n  FETCH_BOARDS_ERROR = 'FETCH_BOARDS_ERROR',\r\n}\r\n\r\ninterface FetchBoardsAction {\r\n  type: BoardsActionTypes.FETCH_BOARDS;\r\n}\r\ninterface FetchBoardsSuccessAction {\r\n  type: BoardsActionTypes.FETCH_BOARDS_SUCCESS;\r\n  payload: IBoards;\r\n}\r\ninterface FetchBoardsErrorAction {\r\n  type: BoardsActionTypes.FETCH_BOARDS_ERROR;\r\n  payload: string;\r\n}\r\nexport type BoardsAction = FetchBoardsAction | FetchBoardsSuccessAction | FetchBoardsErrorAction;\r\n","import axios from 'axios';\r\nimport { Dispatch } from 'redux';\r\nimport { BoardsAction, BoardsActionTypes } from '../types/boards';\r\n\r\nexport const fetchBoards = () => async (dispatch: Dispatch<BoardsAction>): Promise<void> => {\r\n  try {\r\n    dispatch({ type: BoardsActionTypes.FETCH_BOARDS });\r\n    const response = await axios.get('https://trello-back.shpp.me/lmyetolkina/api/v1/board', {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: 'Bearer 123',\r\n      },\r\n    });\r\n    dispatch({ type: BoardsActionTypes.FETCH_BOARDS_SUCCESS, payload: response.data });\r\n  } catch (e) {\r\n    dispatch({ type: BoardsActionTypes.FETCH_BOARDS_ERROR, payload: \"Error. Boards info don't load\" });\r\n  }\r\n};\r\n","import * as BoardsActionCreators from './boards';\r\n\r\nexport default {\r\n  ...BoardsActionCreators,\r\n};\r\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\r\nimport { RootState } from '../store/reducers';\r\n\r\nexport const useTypeSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","/* eslint-disable no-console */\r\nimport React, { useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { colorGenerator } from '../../../../functions/cardColorGenerator';\r\nimport { useActions } from '../../../../hooks/useActions';\r\nimport { useTypeSelector } from '../../../../hooks/useTypeSelector';\r\nimport './boards.css';\r\n\r\nconst Boards: React.FC = () => {\r\n  const { getBoards, error, loading } = useTypeSelector((state) => state.boards);\r\n  const { fetchBoards } = useActions();\r\n  useEffect(() => {\r\n    fetchBoards();\r\n  }, []);\r\n  if (loading) {\r\n    return <h2>Loading...</h2>;\r\n  }\r\n\r\n  if (error) {\r\n    return <h2>{error}</h2>;\r\n  }\r\n\r\n  if (getBoards.boards.length > 0) {\r\n    return (\r\n      <div>\r\n        <div className=\"row boards-row\">\r\n          {getBoards.boards.map((board) => (\r\n            <Link\r\n              to={`/board/${board.id}`}\r\n              key={board.id}\r\n              className=\"card col-md-3 mx-2\"\r\n              style={{ background: `${colorGenerator()}` }}\r\n            >\r\n              {board.title}\r\n            </Link>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Boards</h1>\r\n      <h2>Boards wasn't create</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Boards;\r\n","/* eslint-disable @typescript-eslint/explicit-function-return-type */\r\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\nimport { useDispatch } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport ActionCreators from '../store/actions';\r\n\r\nexport const useActions = () => {\r\n  const dispatch = useDispatch();\r\n  return bindActionCreators(ActionCreators, dispatch);\r\n};\r\n","import React, { useState } from 'react';\r\nimport BaseModalWrapper from '../Modal/BaseModalWrapper';\r\nimport Boards from './components/boards/Boards';\r\n\r\nconst Main: React.FC = () => {\r\n  const [isModalVisible, setModalVisible] = useState(false);\r\n  const toggleModal = (): void => {\r\n    setModalVisible((wasModalVisible) => !wasModalVisible);\r\n  };\r\n  return (\r\n    <section>\r\n      <div className=\"container my-4\">\r\n        <button className=\"btn btn-outline-primary\" onClick={toggleModal}>\r\n          Add Board\r\n        </button>\r\n      </div>\r\n      <div className=\"container\">\r\n        <h1>Boards</h1>\r\n        <p>This is a training React-project. An analogue of the \"Trello\" service.</p>\r\n        <Boards />\r\n      </div>\r\n      <BaseModalWrapper isModalVisible={isModalVisible} onBackDropClick={toggleModal} />\r\n    </section>\r\n  );\r\n};\r\nexport default Main;\r\n","import React from 'react';\r\nimport { Switch, Route, Redirect, BrowserRouter } from 'react-router-dom';\r\nimport './App.css';\r\nimport Board from './pages/Board/Board';\r\nimport Home from './pages/Home/Home';\r\n\r\nconst App: React.FC = () => (\r\n  <BrowserRouter>\r\n    <div className=\"container\">\r\n      <Switch>\r\n        <Route component={Home} path=\"/\" exact />\r\n        <Route component={Board} path=\"/board/:id\" />\r\n        <Redirect exact to=\"/\" />\r\n      </Switch>\r\n    </div>\r\n  </BrowserRouter>\r\n);\r\n\r\nexport default App;\r\n","import { BoardsAction, BoardsActionTypes, BoardsState } from '../types/boards';\r\n\r\nconst initialState: BoardsState = {\r\n  getBoards: { boards: [{ id: 1, title: '' }] },\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nexport const boardsReducer = (state = initialState, action: BoardsAction): BoardsState => {\r\n  switch (action.type) {\r\n    case BoardsActionTypes.FETCH_BOARDS:\r\n      return { loading: true, error: null, getBoards: { boards: [{ id: 1, title: '' }] } };\r\n    case BoardsActionTypes.FETCH_BOARDS_SUCCESS:\r\n      return { loading: false, error: null, getBoards: action.payload };\r\n    case BoardsActionTypes.FETCH_BOARDS_ERROR:\r\n      return { loading: false, error: action.payload, getBoards: { boards: [{ id: 1, title: '' }] } };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { boardsReducer } from './boardsReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n  boards: boardsReducer,\r\n});\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n","import { applyMiddleware, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { rootReducer } from './reducers';\r\n\r\n// export const store = createStore(rootReducer, compose(applyMiddleware(thunk), composeWithDevTools()));\r\nexport const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport { store } from './store';\r\n\r\n/* import reportWebVitals from './reportWebVitals'; */\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n/* reportWebVitals(); */\r\n"],"sourceRoot":""}